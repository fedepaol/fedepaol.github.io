<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on My little software warehouse</title>
    <link>https://fedepaol.github.io/categories/kubernetes/</link>
    <description>Recent content in Kubernetes on My little software warehouse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Jan 2021 23:01:51 +0100</lastBuildDate><atom:link href="https://fedepaol.github.io/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Writing a Kubernetes Controller: part 2</title>
      <link>https://fedepaol.github.io/blog/2021/01/07/writing-a-kubernetes-controller-part-2/</link>
      <pubDate>Thu, 07 Jan 2021 23:01:51 +0100</pubDate>
      
      <guid>https://fedepaol.github.io/blog/2021/01/07/writing-a-kubernetes-controller-part-2/</guid>
      <description>This is the second part of my &amp;ldquo;writing a kubernetes controller&amp;rdquo; blogpost.
Here, I will explain how to put what was explained int the first part in go code.
Setting the informer and the workqueue This is the first step, where you listen for events and send them to the consumers via the workqueue:
	kubeInformerFactory := kubeinformers.NewSharedInformerFactory(kubeClient, time.Second*30) 	informer := kubeInformerFactory.Core().V1().Pods()  	informer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{ 	AddFunc: func(obj interface{}) { 	pod := obj.</description>
    </item>
    
    <item>
      <title>Writing a Kubernetes Controller: part 1</title>
      <link>https://fedepaol.github.io/blog/2020/12/07/writing-a-kubernetes-controller-part-1/</link>
      <pubDate>Mon, 07 Dec 2020 23:01:51 +0100</pubDate>
      
      <guid>https://fedepaol.github.io/blog/2020/12/07/writing-a-kubernetes-controller-part-1/</guid>
      <description>Even when knowing Go, writing a Kubernetes controller is intimidating.
In this post, I&amp;rsquo;ll introduce the Kubernetes operating model, how objects are mapped and what are the tools provided by the go-client framework to write bullet proof controllers. In a following post I will explain how to put all the pieces together and how to define and consume custom types.
I will describe the core components like:
 ClientSets Informers Work Queues (and RateLimiting Work Queues)  and how they fit together in writing a Kubernetes controller.</description>
    </item>
    
  </channel>
</rss>
