<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My little Android warehouse]]></title>
  <link href="http://fedepaol.github.io/atom.xml" rel="self"/>
  <link href="http://fedepaol.github.io/"/>
  <updated>2017-04-30T23:26:52+02:00</updated>
  <id>http://fedepaol.github.io/</id>
  <author>
    <name><![CDATA[Federico Paolinelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android, Okhttp and Websockets]]></title>
    <link href="http://fedepaol.github.io/blog/2017/04/16/android-okhttp-and-websockets/"/>
    <updated>2017-04-16T23:04:19+02:00</updated>
    <id>http://fedepaol.github.io/blog/2017/04/16/android-okhttp-and-websockets</id>
    <content type="html"><![CDATA[<h2>Websockets</h2>

<p>Rest http calls are the most common interaction between Android apps and remote servers. However, there are some scenarios where the interaction is better handled via a persistent connection: think about a chat, or a multiplayer game where data flows in both directions and the server needs to push data to the clients and to be aware of which client are connected.</p>

<p>This kind of scenario can be implemented through Websockets.</p>

<h3>OkHttp and Websockets</h3>

<p>Given the quality of the libraries offered by Square, OkHttp was the first library I checked when I recently had to deal with websockets. Luckily, <a href="https://medium.com/square-corner-blog/web-sockets-now-shipping-in-okhttp-3-5-463a9eec82d1">WebSocket support was introduced in December, 2016</a>. In this post I will try to describe how to use it, and to show how it is different from using it with regular http calls.</p>

<h3>Establishing the connection</h3>

<p>Establishing the connection is pretty straightforward. You declare the OkHttp client as always:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OkHttpClient</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">readTimeout</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span>  <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then take a websocket object out of it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Request</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="n">serverUrl</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="n">webSocket</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">newWebSocket</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="k">new</span> <span class="nf">WebSocketListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                      <span class="o">...</span>
</span><span class='line'>                  <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note that by creating the websocket, OkHttp will try to establish the connection with the server. The second parameter of the <code>newWebSocket</code> factory method needs to implement the <code>WebSocketListener</code> interface, in order to get asynchronously notified of the various events occurred to the socket (such as an incoming message, or the disconnection of the socket, or a failure).</p>

<h3>Sending a message</h3>

<p>Sending a message is easy. Just call <code>send</code> with a <em>String</em> or a <em>ByteString</em> as an argument. Since OkHttp will send the data using its own background thread, <code>send</code> can be called from any thread without worrying of blocking the current thread (and risking to get a NetworkOnMainThreadException).</p>

<p>The only caveat here is that a positive result only indicates that the message was enqueued, but it does not reflect the result of the trasmission. From my understanding, the user of the library is notified only in case of failure via the <code>onFailure</code> callback, so an optimistic approach must be taken in place.</p>

<h3>The callbacks</h3>

<p>The <a href="https://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/WebSocketListener.java">WebSocketListener</a> interface provides callbacks to handle the asynchronous events related to the socket. Those includes the fact that the socket was opened (or closed), or that a new message was received.</p>

<p>Unlike the trasmission of the data, the interaction between the callbacks and the main Android thread needs to be implemented carefully, since <code>WebSocketListener</code>&rsquo;s method will be executed inside a background thread. Using a <code>handler</code> is the &ldquo;vanilla Android&rdquo; approach to let a background thread interact with a thread associated to a looper (such as Android&rsquo;s main thread).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="n">WebSocket</span> <span class="n">webSocket</span><span class="o">,</span> <span class="n">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(..);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another way to achieve the same result would be to go reactive and expose observables to publish this events.</p>

<h3>Closing the connection</h3>

<p>OkHttp provides two methods to close the connection:</p>

<h2>Close</h2>

<p><code>webSocket.close(0, "Bye");</code> asks the server to gracefully close the connection and waits for confirmation.
All the queued messages are trasmitted <strong>before</strong> closing the connection.</p>

<p>Since some interaction is involved, the socket might not be immediately closed. If the initialization and the closure of the connection are bound to the lifecycle of the activity (i.e. in onPause / onResume), what could happen is that some messages are received <strong>after</strong> close was invoked, so this needs to be handled carefully.</p>

<h2>Cancel</h2>

<p>Cancel is more brutal: it just discards all the queued messages and brutally closes the socket. This has the advantage of not having to wait for the housekeeping and the trasmission of enqueued messages. However, choosing <code>cancel</code> over <code>close</code> really depends on the use case.</p>

<h1>Talk is cheap, show me the code</h1>

<p><a href="https://github.com/fedepaol/websocket-sample">Here</a> I pushed a simple example that allows an app to open the websocket when the app goes in foreground and shuts the websocket down when the app goes on background. This is the suggested approach for persistent connections. Using a service to hold the persisten connection is considered a misbehaviour and doze mode will make your app&rsquo;s life really hard.</p>

<p>The example has some weak point that could be improved:</p>

<h4>Cancel is invoked when the app goes in background.</h4>

<p>This means that some messages could eventually get discarded. A better approach would be to invoke close and wait the connection to be gracefully closed and all the messages sent. Since in <code>onPause</code> the activity disposes the subscriptions, no leaking is happening. We can just hope that the application process will live long enough to let OkHttp thread to do what it needs to do in order to gracefully close the connection. A more complex approach could involve a Service or using the JobScheduler.</p>

<h4>No failure of trasmission is taken into account</h4>

<p>onFailure should listen for failures and notify the user of the failure (or even retry to send failed messages) while in the sample it just forces the disconnection.</p>

<h4>No RxJava!</h4>

<p>Handlers are so 2013. A better solution would have used RxJava (and probably there are many cool libraries that support that out of the box). Using RxJava would make super easy to use and transform the incoming messages and / or implement smart reconnection policies such as exponential backoff.</p>

<h1>Conclusion</h1>

<p>Using websockets is a completely different beast from getting / posting to http endpoints where you fetch (or post) and forget about the call, however the OkHttp implementation is really easy to use.</p>

<p>On your side, you&rsquo;ll have not only to handle the trasmission / reception of the messages, but you will also need to monitor the state of the connection and behave accordingly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android, MVP, Dagger and Testing]]></title>
    <link href="http://fedepaol.github.io/blog/2016/08/27/android-mvp-testing/"/>
    <updated>2016-08-27T22:52:07+02:00</updated>
    <id>http://fedepaol.github.io/blog/2016/08/27/android-mvp-testing</id>
    <content type="html"><![CDATA[<h3>MVP is Model View Presenter</h3>

<p>.. which is a pattern that is very popular among Android developers nowdays.</p>

<p>I don&rsquo;t intend to write (yet) another guide about MVP in Android, because others have done a better job, for example:</p>

<ul>
<li><a href="http://antonioleiva.com/MVP-android/">Antonio Leiva&rsquo;s introduction to MVP</a></li>
<li><a href="http://hannesdorfmann.com/mosby/MVP/">Hannes Dorfmann&rsquo;s introduction to Mosby</a></li>
<li><a href="http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/">Fernando Cejas&#8217; post on clean architecture</a></li>
</ul>


<p>A lot have been said about MVP (and other similar patterns), like:</p>

<ul>
<li>it isolates the business logic from the UI</li>
<li>it makes faster and easier to unit test the business logic</li>
<li>it avoids having a god Fragment or Activity class that manages everything</li>
<li>it makes it easier to maintain the app</li>
</ul>


<p>However, the first thing you notice while switching into &ldquo;MVP mode&rdquo;, <em>is a great sense of order</em>.</p>

<p>In all the (few) apps I wrote before, I ended up with the well known hodgepodgey fragment or activity that contained both the UI logic and the business logic.</p>

<p>By defining the responsabilities of the view and of the presenter with MVP, you implicitly define the interfaces between those two components (and the model), <strong>and everything fits its place</strong>.</p>

<p>Every touch, drag, and eventyally lifecycle events are just events that are reported back to the presenter, which then chooses what to do with them. This is powerful.</p>

<h2>This post is about my experience with the MVP pattern, Dagger (2) and testing.</h2>

<p>Given the definition of the interface between the view and the presenter, <strong>I ingenuosly expected that testing of both (using unit tests and Espresso tests) would have been super smooth</strong>. As it often happens, the reality is quite different from what one expects and reads from blogs. In this post I will try to sum up all the issues I had during that process and the solutions I tried to put in place.</p>

<p>In order to better illustrate the concepts, I wrote a little example that can be found on my <a href="https://github.com/fedepaol/MVPtesting">github repo</a></p>

<p>The structure of the app is the same one the can be found googling for Dagger / MVP , for example <a href="https://github.com/antoniolg/androidMVP">here</a>.</p>

<p>The only thing I added is a local component / module that I use in order to inject the stuff needed only by that particular set of classes.</p>

<p>This means that in addition to the global Component / Module classes, used to inject stuff like the storage, there will be a <em>local</em> Component / Module used, for example, to inject the presenter into the View.</p>

<h3>The easy part: testing the presenter</h3>

<p>The dependencies are resolved by passing what it needs as constructor parameters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mMockView</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">MainView</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mMockStorage</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">KeyValueStorage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mToTest</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MainPresenterImpl</span><span class="o">(</span><span class="n">mMockView</span><span class="o">,</span> <span class="n">mMockStorage</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since no injection magic is involved here, we can just mock the view and all the other stuff the presenter needs and easily write unit tests for a Presenter instance.</p>

<p>Moreover, all the dependencies with external models / sources of data like retrofit can be tested by testing the behaviour of the presenter.</p>

<h3>The &ldquo;I expected it to be easier part&rdquo;: testing the view</h3>

<p>A common approach I heard around is to test the view not against a mock presenter, but against a presenter injected with mocked &ldquo;external components&rdquo;, such as api client and storage.</p>

<p>What I wanted to achieve here on the other hand, is to test the view driving the behaviour of the presenter it interacts with.</p>

<p>With this strong separation of roles, I expected it to be easy to mock the presenter and test the view with Espresso.</p>

<h4>Injecting a mock presenter</h4>

<p>Since the presenter is provided by the local module and injected into the view by Dagger, I had to find a way to override the Module in order to provide the mock presenter that could drive the tests.</p>

<p>By using the common method to inject the view</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DaggerMainComponent</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">applicationComponent</span><span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">getComponent</span><span class="o">())</span>
</span><span class='line'>            <span class="o">.</span><span class="na">mainModule</span><span class="o">(</span><span class="k">new</span> <span class="nf">MainModule</span><span class="o">(</span><span class="k">this</span><span class="o">))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">build</span><span class="o">().</span><span class="na">inject</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>the only way to override the presenter since it is provided by the &ldquo;real&rdquo; MainModule is to use build flavours, as shown in <a href="https://codelabs.developers.google.com/codelabs/android-testing/#0">Android testing codelab</a>.</p>

<p><strong>However, I wanted to take advantage of Dagger 2 injecting a mock presenter.</strong></p>

<h3>The key of replacing a dependency is by overriding the Application object</h3>

<p>By adding a factory method that returns an istance of the module in the Application class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DaggerMainComponent</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">applicationComponent</span><span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">getComponent</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">mainModule</span><span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">getMainModule</span><span class="o">(</span><span class="k">this</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">().</span><span class="na">inject</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can be use a custom test runner that provides a subclass of that application object declared in the Manifest.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EspressoTestRunner</span> <span class="kd">extends</span> <span class="n">AndroidJUnitRunner</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Application</span> <span class="nf">newApplication</span><span class="o">(</span><span class="n">ClassLoader</span> <span class="n">cl</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">,</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span>
</span><span class='line'>            <span class="n">IllegalAccessException</span><span class="o">,</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">InstantiationException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">newApplication</span><span class="o">(</span><span class="n">cl</span><span class="o">,</span> <span class="n">TestMvpApplication</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and declare it in our gradle file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>        <span class="n">testInstrumentationRunner</span> <span class="s1">&#39;com.whiterabbit.windlocator.EspressoTestRunner&#39;</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Application object (and its test variant) is the one responsible of providing all the modules, so by subclassing it we can drive what is provided to be injected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestMvpApplication</span> <span class="kd">extends</span> <span class="n">MvpApplication</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MainModule</span> <span class="n">mMainModule</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// By usint this two method we can drive whatever module we want during the tests</span>
</span><span class='line'>    <span class="c1">// (and with that, drive what classes inject)</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">MainModule</span> <span class="nf">getMainModule</span><span class="o">(</span><span class="n">MainView</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mMainModule</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMainModule</span><span class="o">(</span><span class="n">MainModule</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mMainModule</span> <span class="o">=</span> <span class="n">m</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is what the setup method would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// a mock module with the mock presenter to be injected..</span>
</span><span class='line'>    <span class="n">MainModule</span> <span class="n">m</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">MainModule</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mMockPresenter</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">MainPresenter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">provideMainView</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">mock</span><span class="o">(</span><span class="n">MainView</span><span class="o">.</span><span class="na">class</span><span class="o">));</span> <span class="c1">// this is needed to fool dagger</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">provideMainPresenter</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">MainView</span><span class="o">.</span><span class="na">class</span><span class="o">),</span> <span class="n">any</span><span class="o">(</span><span class="n">KeyValueStorage</span><span class="o">.</span><span class="na">class</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">mMockPresenter</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Instrumentation</span> <span class="n">instrumentation</span> <span class="o">=</span> <span class="n">InstrumentationRegistry</span><span class="o">.</span><span class="na">getInstrumentation</span><span class="o">();</span>
</span><span class='line'>    <span class="n">TestMvpApplication</span> <span class="n">app</span>
</span><span class='line'>      <span class="o">=</span> <span class="o">(</span><span class="n">TestMvpApplication</span><span class="o">)</span> <span class="n">instrumentation</span><span class="o">.</span><span class="na">getTargetContext</span><span class="o">().</span><span class="na">getApplicationContext</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// forced to the application object</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="na">setMainModule</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A mock module is needed to provide a mock presenter. Then the mock module is passed to the application object.
Please note that in order to have Dagger 2 working, the mock module needs to provide a view instance (even a mock one) that will never be used.</p>

<p>Now we can finally write a test method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testButtonClick</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">activity</span><span class="o">.</span><span class="na">launchActivity</span><span class="o">(</span><span class="k">new</span> <span class="nf">Intent</span><span class="o">());</span>
</span><span class='line'>    <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">main_button</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">click</span><span class="o">());</span>
</span><span class='line'>    <span class="n">verify</span><span class="o">(</span><span class="n">mMockPresenter</span><span class="o">).</span><span class="na">onButtonClicked</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After all this struggling, we can &ldquo;just test the view&rdquo;, meaning that we do not need to test if the mocked rest end point was called, nor if the storage was asked to write something.
<strong>We just test the view against the presenter interface</strong></p>

<p>One piece is still missing: what if we want to test the behaviour of the view when one of its methods gets called by the presenter? In the example, the view interface offers a method to set the text displayed.</p>

<p>Again, one could naively think that it would be sufficient to call the method with something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">activity</span><span class="o">.</span><span class="na">getActivity</span><span class="o">().</span><span class="na">showValue</span><span class="o">(</span><span class="s">&quot;23&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The truth is, espresso tests run in a thread different from the UI thread. By doing that, it would result in</p>

<pre><code>Only the original thread that created a view hierarchy can touch its views
</code></pre>

<p>One way to overcome this, is to call the methods in the ui thread</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">activity</span><span class="o">.</span><span class="na">getActivity</span><span class="o">().</span><span class="na">runOnUiThread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// fancy using a lambda here?</span>
</span><span class='line'>                                                 <span class="nd">@Override</span>
</span><span class='line'>                                                 <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                                                     <span class="n">activity</span><span class="o">.</span><span class="na">getActivity</span><span class="o">().</span><span class="na">showValue</span><span class="o">(</span><span class="s">&quot;23&quot;</span><span class="o">);</span>
</span><span class='line'>                                                 <span class="o">}</span>
</span><span class='line'>                                             <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Why I did not use the <code>@UiThreadTest</code> annotation?</h4>

<p>Simply because it would have ended with another exception since startactivity cannot be called directly from the ui thread.</p>

<h3>To sum up</h3>

<ul>
<li>Make the application provide the Module that provides the presenter(s)</li>
<li>Change the testrunner in order to provide a different application</li>
<li>Let the &ldquo;test&rdquo; application provide a mock module that provides a mock presenter</li>
<li>Test!</li>
</ul>


<h2>Conclusion</h2>

<p>The Mvp pattern isolates the view (which needs to be as dumb as it can) from the presenter.
By instrumenting the view with a mocked presenter, you will drain those tests from any kind of logic we expect to be in the presenter. You just test that the interface between the presenter and the view is working as expected.</p>

<p>By doing this, you can focus on testing the business logic inside the presenter with vanilla unit tests. Your tdd loop will definetely be faster.</p>

<p><em>A big thank as always to my proofreaders Fabio Collini &amp; Riccardo Ciovati!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactive Android Timers, Countdowns and Lifecycle]]></title>
    <link href="http://fedepaol.github.io/blog/2016/06/20/how-to-a-timer/"/>
    <updated>2016-06-20T23:06:59+02:00</updated>
    <id>http://fedepaol.github.io/blog/2016/06/20/how-to-a-timer</id>
    <content type="html"><![CDATA[<h4>Ok, I must confess</h4>

<p>the title is built to draw people&rsquo;s attention, because you know, nowdays everything is done in a reactive fashion. RxJava is superhelpful, but <strong>if we forget the ecosystem our apps are running into</strong>, we risk to forget the <em>proper</em> way to implement certain tasks in Android.</p>

<h4>Why do we need a whole post about timers?</h4>

<p>Recently, I had to implement a countdown timer in Android.</p>

<p>If you google for <del>code to cut and paste</del> <em>inspiration</em>, you&rsquo;ll get a lot of results like:</p>

<ul>
<li>use a <a href="https://developer.android.com/reference/android/os/CountDownTimer.html">countdown timer</a></li>
<li>use a dyi implementation using handlers</li>
<li>be <em>a la mode</em> and use <a href="http://reactivex.io/documentation/operators/timer.html">RxJava&rsquo;s timer</a></li>
</ul>


<p>There is even a <a href="https://androidcookbook.com/Recipe.seam;jsessionid=DF53064E03C7505C4EBF727E56E0728E?recipeId=1205">cookbook recipe</a> that shows how to implement it.</p>

<p>That might work if you had to measure the cooking time of a <a href="http://www.bettycrocker.com/how-to/tipslibrary/charts-timetables-measuring/timetable-cooking-pasta">portion of capellini</a> (the fastest cooking pasta I could think of).</p>

<h3>But wait, what if I had to bake a plum cake?</h3>

<p>Baking a plum cake takes longer than an hour. All the solutions I just mentioned rely on the fact that your application is running <strong>for the whole lenght of the timer</strong>.</p>

<p>This could be acceptable in the desktop / server world, but it&rsquo;s far from acceptable in the Android context: if the app goes in background because the user wants to check his email, answer to a phone call or play a game, <strong>the operating system is likely to reclaim the resources and shutdown the app itself</strong>. In any case, the device will turn off after a short time. If you think that using a <a href="https://developer.android.com/training/scheduling/wakelock.html">wakelock</a> will solve the problem&hellip; it will, but the user won&rsquo;t be happy of all the battery wasted by the screen.</p>

<h3>I can use a foreground service!</h3>

<p>So one can start looking for a way to keep the app running in background. A <a href="https://developer.android.com/guide/components/services.html">Service</a> is an Android component made specifically for this purpose.</p>

<p>By using a Service with the <a href="https://developer.android.com/guide/components/services.html#Foreground">startForeground</a> option, your app will stay alive through the whole lenght of the timer. When the timer is finished, it just has to throw a notification and a broadcast so the user will know that the timer expired.</p>

<p><img class="center" src="http://fedepaol.github.io/images/soareyoutelling_timer.jpg" width="300"></p>

<p>This approach will work, but it has a drawback. Your app (or let&rsquo;s say at least the service) needs to be running for the whole length of the timer. This is a waste of memory and cpu.</p>

<h3>The right way</h3>

<p>The right way is to take advantage of what the OS offers. The idea here is to run the countdown timer as long as the app is foregrounded, showing the progress to the user <em>one second at the time</em>, but set a system alarm whenever the app goes in background. Whenever the user gets back to the app, you&rsquo;ll cancel the system alarm and restart the timer from where it is supposed to start.</p>

<p>Here what it would look like when the user gets back to the app before the timer is expired (on the left) and when the timer expires while the app is in background (on the right):</p>

<p><img src="http://fedepaol.github.io/images/timer_resume.png" width="300"> <img src="http://fedepaol.github.io/images/timer_pause.png" width="300"></p>

<p>From the user&rsquo;s perspective, the timer is running even if the app is in background, because whenever he returns to the app he sees what he is expecting to see (the time passed). On the other hand, if the timer expires when the app is in background, a friendly notification will remind him that he has to take the plum cake out of the oven.</p>

<p>Inside the app however, the timer will run <strong>only when the app is in foreground</strong> and has all the rights to consume cpu because the user is using the app.</p>

<h3>Some code</h3>

<p>A simplified version of what I am describing can be found in my <a href="https://github.com/fedepaol/AndroidTimerSample">github repo</a></p>

<p>There are three things you have to take into account:</p>

<h2>Running the timer in the app</h2>

<p>This is the easiest part: you can use a countdown timer, a handler, rxjava or whatever you want to <del>copy and paste</del> take inspiration from.
In my example I&rsquo;ll use a countdown timer since it&rsquo;s simple to use and serves the purpouse.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">startTimer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mCountDownTimer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CountDownTimer</span><span class="o">(</span><span class="n">mTimeToGo</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">,</span> <span class="mi">1000</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onTick</span><span class="o">(</span><span class="kt">long</span> <span class="n">millisUntilFinished</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mTimeToGo</span> <span class="o">-=</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>  <span class="n">updateTimeUi</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFinish</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mState</span> <span class="o">=</span> <span class="n">TimerState</span><span class="o">.</span><span class="na">STOPPED</span><span class="o">;</span>
</span><span class='line'>  <span class="n">onTimerFinish</span><span class="o">();</span>
</span><span class='line'>  <span class="n">updateTimeUi</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>    <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Remembering when the timer was started / how long it was supposed to run</h2>

<p>This is the trickiest part.
In the example I store the starting time inside the shared preferences storage. It will persist even if the app is killed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mPreferences</span><span class="o">.</span><span class="na">setStartedTime</span><span class="o">(</span><span class="n">getNow</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>That value is used when resuming the app in order to check how long the timer has to run (or if the time did expire):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initTimer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">mPreferences</span><span class="o">.</span><span class="na">getStartedTime</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mTimeToGo</span> <span class="o">=</span> <span class="o">(</span><span class="n">TIMER_LENGHT</span> <span class="o">-</span> <span class="o">(</span><span class="n">getNow</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mTimeToGo</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// TIMER EXPIRED</span>
</span><span class='line'>        <span class="n">mTimeToGo</span> <span class="o">=</span> <span class="n">TIMER_LENGHT</span><span class="o">;</span>
</span><span class='line'>        <span class="n">onTimerFinish</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">startTimer</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The app tries to retrieve the start time value. If there still is  some time to run, the countdown restarts for the remaining length of time. Otherwise the timer is reset and the user is notified of the timer expiration.</p>

<p>Please note that this is a ultra simplified version that assumes that <em>the timer is running</em>. The <a href="https://github.com/fedepaol/AndroidTimerSample">github sample</a> checks also if the timer was started or not.</p>

<h2>Handling the alarm</h2>

<p>This is simple. You should set the alarm that triggers a broadcast receiver through the alarm manager:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">wakeUpTime</span> <span class="o">=</span> <span class="o">(</span><span class="n">mPreferences</span><span class="o">.</span><span class="na">getStartedTime</span><span class="o">()</span> <span class="o">+</span> <span class="n">TIMER_LENGHT</span><span class="o">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>    <span class="n">AlarmManager</span> <span class="n">am</span> <span class="o">=</span> <span class="o">(</span><span class="n">AlarmManager</span><span class="o">)</span> <span class="n">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">ALARM_SERVICE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">TimerExpiredReceiver</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">PendingIntent</span> <span class="n">sender</span> <span class="o">=</span> <span class="n">PendingIntent</span><span class="o">.</span><span class="na">getBroadcast</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">intent</span><span class="o">,</span> <span class="n">PendingIntent</span><span class="o">.</span><span class="na">FLAG_CANCEL_CURRENT</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">LOLLIPOP</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">am</span><span class="o">.</span><span class="na">setAlarmClock</span><span class="o">(</span><span class="k">new</span> <span class="n">AlarmManager</span><span class="o">.</span><span class="na">AlarmClockInfo</span><span class="o">(</span><span class="n">wakeUpTime</span><span class="o">,</span> <span class="n">sender</span><span class="o">),</span> <span class="n">sender</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">am</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">AlarmManager</span><span class="o">.</span><span class="na">RTC_WAKEUP</span><span class="o">,</span> <span class="n">wakeUpTime</span><span class="o">,</span> <span class="n">sender</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and cancel it in onResume:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">TimerExpiredReceiver</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">PendingIntent</span> <span class="n">sender</span> <span class="o">=</span> <span class="n">PendingIntent</span><span class="o">.</span><span class="na">getBroadcast</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">intent</span><span class="o">,</span> <span class="n">PendingIntent</span><span class="o">.</span><span class="na">FLAG_CANCEL_CURRENT</span><span class="o">);</span>
</span><span class='line'>    <span class="n">AlarmManager</span> <span class="n">am</span> <span class="o">=</span> <span class="o">(</span><span class="n">AlarmManager</span><span class="o">)</span> <span class="n">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">ALARM_SERVICE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">am</span><span class="o">.</span><span class="na">cancel</span><span class="o">(</span><span class="n">sender</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Launching a system notification that brings the user back to the app when clicked is trivial. You can check the <a href="https://github.com/fedepaol/AndroidTimerSample">sample on github</a>.</p>

<h2>Conclusion</h2>

<p>What I wrote today may sound obvious to a lot of experienced developers.</p>

<p>However, I thought it was a post worth writing since it&rsquo;s a good example of how you should always remember the ecosystem your app is being run into.
If you forget this and think that <strong>your app is the most important app the user has in his phone</strong>, you&rsquo;ll face some unexpected behaviours (the app gets killed) or you will piss the user off (the app needs to be active for the whole length of the timer).</p>

<p>Thanks as always to Fabio Collini and Riccardo Ciovati for proofreading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happiness Is (a) Relative (Layout)]]></title>
    <link href="http://fedepaol.github.io/blog/2016/04/20/happines-is-relative/"/>
    <updated>2016-04-20T06:34:46+02:00</updated>
    <id>http://fedepaol.github.io/blog/2016/04/20/happines-is-relative</id>
    <content type="html"><![CDATA[<h4>Using relative layout is bad</h4>

<p>.. or at least they say so.
The truth is, it is <em>relatively</em> easy to build complex layouts using RelativeLayouts, but this ease of use comes with a cost: in order to provide that kind of flexibility, RelativeLayout does two measurement passes.</p>

<p>There are a lot of talks and <a href="https://medium.com/google-developers/developing-for-android-iii-2efc140167fd#.wpqgdu3xs">posts</a> explaining that if you have nested relative layouts, you&rsquo;ll end up with many measurement passes that will consume your cpu and will contribute to miss the dreaded 16 ms threshold. The higher the RelativeLayouts are placed in your view hierarchy, the more will be the number of measurements.</p>

<p><strong>It&rsquo;s easier than you think</strong>: let&rsquo;s pretend you have a RelativeLayout as the root of your activity view (because hey, it&rsquo;s what Android Studio sets as default from the BlankActivity template).</p>

<p>Then you have a fragment, and for some reason you have a list you want to place aside a button and you need a RelativeLayout over there.</p>

<p>Finally, you&rsquo;ll have to place an image and a text inside the list elements, isn&rsquo;t there an easier way than RelativeLayout? (Actually, <a href="http://antonioleiva.com/textview_power_drawables/">there is and it&rsquo;s much more efficient</a>)</p>

<p><img class="center" src="http://fedepaol.github.io/images/relative_hierarchy.png" width="300"></p>

<p>What will happen here is that with this unharmful scenario the <code>onMeasure()</code> method of each children of the list <strong>will be called 8 times</strong> each frame.</p>

<h3>But why does RelativeLayout need two passes?</h3>

<p>Given that Android is an open source framework, I could satisfy my curiosity by digging into the source code. Here I will try to provide a high level explanation of my understanding on how it works, without going too much into the details.</p>

<p>Let&rsquo;s pretend you want four children (A, B, C, D) for your layout, and the rules are the following:</p>

<ul>
<li>A is above C</li>
<li>B is to right of A</li>
<li>D is below B and its right margin is aligned to B</li>
<li>C is to left of D and its top is aligned to D</li>
</ul>


<p><img class="center" src="http://fedepaol.github.io/images/relative_sample.png" width="200"></p>

<p>The concept behind RelativeLayout is fairly simple. <strong>In order to measure (and place) a certain child, you need to measure (and place) all the views that child depends on</strong> in term of relationship. For this reason, the first thing RelativeLayout does is to build a graph of dependencies between the children. Those dependencies determine the order in which the children are measured (i.e. first the views with no dependencies, then the views that depend only from the root, etc).</p>

<p>This explains the need for two measurement passes: <strong>the order the views need to be measured horizontally can be different from the order the views need to be measured vertically</strong>. In my example, A does not have any <em>horizontal</em> dependency but <em>vertically</em> it depends on the size and the position of C.</p>

<p>In the example, the sequence of measurement are:</p>

<p>Horizontal dimension:
A -> B -> D -> C</p>

<p><img src="http://fedepaol.github.io/images/relative_horizontal.png" width="800"></p>

<p>Note that given the vertical size is not calculated yet, the views are temporarly assigned with the height of the parent view while measuring the horizontal sizes.</p>

<p>Vertical dimension:
B -> D -> C -> A</p>

<p><img src="http://fedepaol.github.io/images/relative_vertical.png" width="800"></p>

<p>Other than these two passes, RelativeLayout can also loop its children up to three other times to finalize their placement (for example for those that are aligned to the bottom of the parent in case of wrap content).</p>

<p>The position of the views is calculated during the measurement double pass. For this reason the <code>onLayout()</code> implementation is pretty trivial.</p>

<p>Finally, the dependency lists are cached, but those cached elements are invalidated whenever a <code>requestLayout()</code> happens. This, together with the fact that <code>requestLayout()</code> goes up to the root and is called on all the children is another reason for not having deep view hierarchy especially with RelativeLayouts.</p>

<h3>Optimizing RelativeLayout</h3>

<p>First of all, remember that you don&rsquo;t always need to. If you are in the early stage of the development or under strict time constraints and you prefer the simplicity of use of <code>RelativeLayout</code> against performance then use it, <strong>just be aware of the implications</strong>. This small piece of technical debt might come back in the future to claim its price.</p>

<p><strong>Measure twice and cut once</strong> (but remember to do that from time to time). Hierarchy Viewer is a convenient way to understand if your hierarchy is too complex and to see at glance what&rsquo;s costing too much:</p>

<p><img class="center" src="http://fedepaol.github.io/images/hierarchy.png" width="700"></p>

<p><a href="https://github.com/lucasr/probe">Probe</a> by Lucas Rocha is also an effective tool to check if your views are getting measured too many times.</p>

<p>After that, if you realize that your view groups suffer from performance issues, the most efficient way to optimize is to write a custom viewgroup. It might look scary at first, but it&rsquo;s just a matter of measuring and placing boxes <strong>knowing exactly where you want to place them and how their container looks like</strong>. This will flat your hierarchy and make it a lot more efficient.</p>

<p>I don&rsquo;t want to write (yet another) tutorial on building custom viewgroups here since it will double the lenght of this post, but some good starting points are:</p>

<ul>
<li><a href="https://newcircle.com/s/post/1663/tutorial_enhancing_android_ui_with_custom_views_dave_smith_video">Dave Smith&rsquo;s post on custom views</a></li>
<li><a href="https://sriramramani.wordpress.com/2015/05/06/custom-viewgroups/">Sriram Ramani&rsquo;s post on custom viewgroups</a></li>
<li><a href="https://www.youtube.com/watch?v=NYtB6mlu7vA">This talk from google io 2013</a></li>
<li><a href="https://www.youtube.com/watch?v=-xAdDqwaWJk">Loving lean layouts from Droidcon SF</a></li>
</ul>


<h3>What&rsquo;s the take home lesson</h3>

<p>RelativeLayout is an awesome piece of software. It makes it super easy to describe complex scenarios without needing to do nasty nested linear layouts.</p>

<p><strong>However</strong> from today, before placing it inside a view I will start thinking not only about the two passes, but also to all the hard work this complex piece of software needs to do behind the scene in order to offer me the flexibility I am used to.</p>

<p>The two measurement passes can be the biggest source of problems because of the risk of exponential explosion, but <strong>other than that there are a lot of computation and additional data structures involved</strong> in building (and maintain) those dependency lists, and a good amount of extra loops through the children needed to place them correctly.</p>

<p>Thanks to Riccardo Ciovati and Fabio Collini for proofreading this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subscribe It While It's Hot: Cached Rest Requests With RxJava]]></title>
    <link href="http://fedepaol.github.io/blog/2016/01/01/cached-rest-requests-with-rxjava/"/>
    <updated>2016-01-01T17:54:21+01:00</updated>
    <id>http://fedepaol.github.io/blog/2016/01/01/cached-rest-requests-with-rxjava</id>
    <content type="html"><![CDATA[<h4>Disclaimer:</h4>

<p>In this post I am trying to cover a proper approach to a common problem. I am still in the process of wrapping my head around RxJava so what I write here might not be the best way to solve the problem.</p>

<h1>Cached requests with RxJava</h1>

<p>Lately I&rsquo;ve been trying to develop a rest backed app using RxJava. I must admit that once you get in the proper mental mood, RxJava almost feels like cheating. Everything looks cleaner, multiple requests can be composed and manipulated easily, the StrictMode gets satisfied by observing on the ui thread and subscribing on a different thread, and all the nice things that can be read about how cool is RxJava with Android.
What I could not find easily, was how to store the result of a request and be sure that even in case of no network, a cached content was available for the user, while still handling everything in a reactive fashion.</p>

<h3>Caching vs non caching</h3>

<p>Going straight from rest result to the UI is appropriate in many cases, for example when displaying the result of a search whose arguments are not predictable (think about Ebay, or Amazon where the user is looking for something different every time).</p>

<p><em>However</em>, there are cases when the results fetched earlier are still significant and displaying them can improve the user experience significantly, compared to a spinning wheel or a white page. Those cases include your twitter feed, a local weather forecast that was fetched just 5 minutes before, or the list of the github repos of a given user.</p>

<p>Here you can see the difference between a non cached version and a cached version of the same activity:</p>

<p><img src="http://fedepaol.github.io/images/uncached.gif" width="300">      <img src="http://fedepaol.github.io/images/cached.gif" width="300"></p>

<p>For this reason I tried to figure out what could have been a clean way to cache the results of a request while keeping the flow in a reactive fashion.</p>

<h3>The storage as the unique source of the truth</h3>

<h4>All reactive</h4>

<p>If we want to cache the data while keeping everything inside the same subscription, things get a bit messy. The result of the request is thrown at the UI and the response is also stored in the storage. The UI subscribes from the storage too but checks which result came first and if the data is too old.</p>

<p><img src="http://fedepaol.github.io/images/messy.jpg" width="500"></p>

<h4>Cached</h4>

<p>In this <em>hybrid</em> variant, the UI subscribes only to the storage, and a facade class wraps the storage and the subscription to the retrofit client that feeds the storage. Once the storage is filled with new data, the UI thread is automatically notified of every change.
<img src="http://fedepaol.github.io/images/clean.jpg" width="500"></p>

<p>In this scenario the observable acts as a <em>hot</em> observable, the first time it gets subscribed it emits the content of the storage, and any other change it might happen to it.</p>

<h3>Talk is cheap, show me the code</h3>

<p>A working example of the following code can be found <a href="https://github.com/fedepaol/RxRestSample">in my github repo here</a>
To write this sample, I started from the abused Github apis which seems to power the 99% of the rest related examples. Sorry about that.</p>

<p>First there is the storage. I wrapped a SQLite helper (which I happily generated with <a href="https://github.com/fedepaol/Android-sql-lite-helper">my handy script</a>) with a class that contains a <a href="http://reactivex.io/RxJava/javadoc/rx/subjects/PublishSubject.html">PublishSubject</a> which can be subscribed to and which we will notify when the insertion methods are called:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObservableRepoDb</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;&gt;</span> <span class="n">mSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RepoDbHelper</span> <span class="n">mDbHelper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;</span> <span class="nf">getAllReposFromDb</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;</span> <span class="n">repos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="c1">// .. performs the query and fills the result</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">repos</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;&gt;</span> <span class="nf">getObservable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Observable</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;&gt;</span> <span class="n">firstTimeObservable</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">Observable</span><span class="o">.</span><span class="na">fromCallable</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">getAllReposFromDb</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">firstTimeObservable</span><span class="o">.</span><span class="na">concatWith</span><span class="o">(</span><span class="n">mSubject</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertRepo</span><span class="o">(</span><span class="n">Repo</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>        <span class="c1">// performs the insertion on the SQLite helper</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">getAllReposFromDb</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mSubject</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we have here is the first piece of the puzzle: a storage that can be subscribed to. The concatenation is needed because we want it to emit the content of the storage as soon as it gets subscribed.</p>

<p>Then there is the facade class, where we get the observable from and to which we start a new update:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObservableGithubRepos</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ObservableRepoDb</span> <span class="n">mDatabase</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">BehaviorSubject</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mRestSubject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;&gt;</span> <span class="nf">getDbObservable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mDatabase</span><span class="o">.</span><span class="na">getObservable</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateRepo</span><span class="o">(</span><span class="n">String</span> <span class="n">userName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Observable</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;&gt;</span> <span class="n">observable</span> <span class="o">=</span> <span class="n">mClient</span><span class="o">.</span><span class="na">getRepos</span><span class="o">(</span><span class="n">userName</span><span class="o">);</span>
</span><span class='line'>        <span class="n">observable</span><span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">io</span><span class="o">())</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">io</span><span class="o">())</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">l</span> <span class="o">-&gt;</span> <span class="n">mDatabase</span><span class="o">.</span><span class="na">insertRepoList</span><span class="o">(</span><span class="n">l</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that everything happens far from the UI thread. This is because we are going to subscribe to the database observable as the unique source of truth.</p>

<p>Now, given that the observable is now <em>hot</em>, we can&rsquo;t listen for its <em>onComplete</em> in order to stop any progress indicators we might put in place.
What we need is another subject that can be bound to the update request, so here it is the new facade class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObservableGithubRepos</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;&gt;</span> <span class="nf">getDbObservable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mDatabase</span><span class="o">.</span><span class="na">getObservable</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">updateRepo</span><span class="o">(</span><span class="n">String</span> <span class="n">userName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">BehaviorSubject</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">requestSubject</span> <span class="o">=</span> <span class="n">BehaviorSubject</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Observable</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;&gt;</span> <span class="n">observable</span> <span class="o">=</span> <span class="n">mClient</span><span class="o">.</span><span class="na">getRepos</span><span class="o">(</span><span class="n">userName</span><span class="o">);</span>
</span><span class='line'>        <span class="n">observable</span><span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">io</span><span class="o">())</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">io</span><span class="o">())</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">l</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                                    <span class="n">mDatabase</span><span class="o">.</span><span class="na">insertRepoList</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
</span><span class='line'>                                    <span class="n">requestSubject</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="n">userName</span><span class="o">);},</span>
</span><span class='line'>                             <span class="n">e</span> <span class="o">-&gt;</span> <span class="n">requestSubject</span><span class="o">.</span><span class="na">onError</span><span class="o">(</span><span class="n">e</span><span class="o">),</span>
</span><span class='line'>                             <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">requestSubject</span><span class="o">.</span><span class="na">onCompleted</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">requestSubject</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the UI client (activity or fragment) we&rsquo;ll need to subscribe to the storage in order to get the data and to the request observable in order to stop the progress indicators. An observable that emits the state of the pending request is returned every time an update is being requested.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">mObservable</span> <span class="o">=</span> <span class="n">mRepo</span><span class="o">.</span><span class="na">getDbObservable</span><span class="o">();</span>
</span><span class='line'><span class="n">mProgressObservable</span> <span class="o">=</span> <span class="n">mRepo</span><span class="o">.</span><span class="na">getProgressObservable</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">mObservable</span><span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">io</span><span class="o">())</span>
</span><span class='line'>               <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">()).</span><span class="na">subscribe</span><span class="o">(</span><span class="n">l</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mAdapter</span><span class="o">.</span><span class="na">updateData</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">Observable</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;&gt;</span> <span class="n">progressObservable</span> <span class="o">=</span> <span class="n">mRepo</span><span class="o">.</span><span class="na">updateRepo</span><span class="o">(</span><span class="s">&quot;fedepaol&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">progressObservable</span><span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">io</span><span class="o">())</span>
</span><span class='line'>                       <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
</span><span class='line'>                       <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{},</span>
</span><span class='line'>                                  <span class="n">e</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;RX&quot;</span><span class="o">,</span> <span class="s">&quot;There has been an error&quot;</span><span class="o">);</span>
</span><span class='line'>                                        <span class="n">mSwipeLayout</span><span class="o">.</span><span class="na">setRefreshing</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>                                  <span class="o">},</span>
</span><span class='line'>                                  <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">mSwipeLayout</span><span class="o">.</span><span class="na">setRefreshing</span><span class="o">(</span><span class="kc">false</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please remember that the DbObservable is a hot one, so every time a call to updateRepo happens, the db will be fed with the result of the query and the ui will get subsequently notified.</p>

<h3>SqlBrite</h3>

<p>If all this wrapping seems too laboruous, the prolific guys from Square wrote <a href="https://github.com/square/sqlbrite">SqlBrite</a> which is a super generic database wrapper that was written for this same purpouse. I am sure it&rsquo;s better and more battle field tested than the poor man&rsquo;s version we can write by ourselves.</p>

<h2>Conclusion</h2>

<p>I don&rsquo;t know if this is an healthy way to use RxJava. Maybe I ended up with this scenario only because I am not 100% confident with RxJava and I am putting some non rx-ness in the middle to better control it.
Here we need to choose where to place the operators, since we can modify the flow that feeds the storage from the http client, or the flow that comes out of the storage itself.</p>

<p>In any case, having an unique source of truth seems more clear, and I feel that in this way it would be a lot easier to do stuff like prefetching, scheduling updates so the user is presented with fresh data (remember having your <a href="https://www.youtube.com/watch?v=GcNNx2zdXN4">app work like magic?</a>), checking if an update is worth to be done at all (such as displaying a 5 minutes old weather forecast) and stuff like that.</p>

<p>Thanks to Fabio Collini for spotting a lot of mistakes in the first draft of this posts, and to Riccardo Ciovati for proof reading it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing RxJava Observables and Subscriptions]]></title>
    <link href="http://fedepaol.github.io/blog/2015/09/13/testing-rxjava-observables-subscriptions/"/>
    <updated>2015-09-13T21:26:15+02:00</updated>
    <id>http://fedepaol.github.io/blog/2015/09/13/testing-rxjava-observables-subscriptions</id>
    <content type="html"><![CDATA[<h2>Testing RxJava</h2>

<p>While catching up with the latest Android novelties I could not ignore RxJava, which seems to grow in popularity between android developers.</p>

<p>If you just heard about it, and you want to get your feet wet, I really recommend Dan Lew&rsquo;s <a href="http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/">Grokking with RxJava</a> series as a starting point.</p>

<p><strong>RxJava is asynchronous by nature</strong>, so unit testing it might seem a daunting at first, especially if you use that asynchronous interaction to test stuff. Luckily, RxJava (and RxAndroid) come with a couple of tools that will make our life a lot easier.</p>

<h2>What to (unit) test</h2>

<p>There are at least a couple of things you&rsquo;ll want to test:</p>

<ol>
<li>You will want to test the <strong>observables</strong>, meaning not only the observables you built, but also the resulting composition of the various operators you may want to apply to them.</li>
<li>Given a certain observable (or its mock), you will want to test <strong>how the rest of your application behaves while triggered by the subscription</strong>.</li>
</ol>


<h2>Testing the observables</h2>

<p>Despite the fact that a subscription is asynchronous, there are (at least) a couple of ways to make the stream of your observable synchronous.</p>

<p>The first way is by using</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">ResultToCheck</span> <span class="n">res</span> <span class="o">=</span> <span class="n">myObservable</span><span class="o">.</span><span class="na">toBlocking</span><span class="o">().</span><span class="na">first</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works because <a href="http://reactivex.io/RxJava/javadoc/rx/Observable.html#toBlocking%28%29">toBlocking</a> converts the observable to a blocking one, while <a href="http://reactivex.io/documentation/operators/first.html">first</a> returns the first emitted element.
The calling code will wait synchronously until the observer calls onCompleted().</p>

<p><strong>The official way to test an observable</strong> is by using a <a href="http://reactivex.io/RxJava/javadoc/rx/observers/TestSubscriber.html">TestSubscriber</a>, an helper subscriber provided directly by the RxJava library.
As with toBlocking, a test subscription is synchronous.
Here you can find an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">Observable</span><span class="o">&lt;</span><span class="n">RubberChicken</span><span class="o">&gt;</span> <span class="n">obs</span> <span class="o">=</span> <span class="n">obsFactory</span><span class="o">.</span><span class="na">getObservable</span><span class="o">();</span>
</span><span class='line'><span class="n">TestSubscriber</span><span class="o">&lt;</span><span class="n">RubberChicken</span><span class="o">&gt;</span> <span class="n">testSubscriber</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TestSubscriber</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="n">obs</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">testSubscriber</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">testSubscriber</span><span class="o">.</span><span class="na">assertNoErrors</span><span class="o">();</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">RubberChicken</span><span class="o">&gt;</span> <span class="n">chickens</span> <span class="o">=</span> <span class="n">testSubscriber</span><span class="o">.</span><span class="na">getOnNextEvents</span><span class="o">();</span>
</span><span class='line'><span class="c1">// Assert your chickens integrity here</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>TestSubscriber</code> comes with a bunch of helper methods for testing, like specific assertions and other stuff. On top of that, its <code>getOnNextEvents()</code> method is blocking and  will return all the emitted items as elements of a list.
This is a neat way to test not only your observers, but also to check if the compositions you put in place are working as expected. That makes testing observables super easy.</p>

<h2>Testing the subscription</h2>

<p>Once your observables are in place, you will likely to be observing them on some thread, and subscribing them on some other thread. This will make it harder for us to test how our activity (or fragment) reacts to a triggered subscription.</p>

<p>RxJava (and RxAndroid) provide a way to override the schedulers exposed when <code>Schedulers.io()</code> or <code>AndroidSchedulers.mainThread()</code> are called. By replacing them with <code>Schedulers.immediate()</code>, your code will run immediately and you&rsquo;ll be able to see its results.</p>

<p>The solution is a bit hacky, since we need to call <code>reset()</code> method before overriding RxJava&rsquo;s schedulers, which is package protected. I <em>took inspiration</em> from Alexis Mas&#8217; <a href="http://alexismas.com/blog/2015/05/20/unit-testing-rxjava/">blogpost</a> extending RxJavaPlugins class (there no need for that with RxAndroid):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kn">package</span> <span class="n">rx</span><span class="o">.</span><span class="na">plugins</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RxJavaTestPlugins</span> <span class="kd">extends</span> <span class="n">RxJavaPlugins</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RxJavaTestPlugins</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">resetPlugins</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">getInstance</span><span class="o">().</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Registering a scheduler hook that provides a custom implemetation (Schedulers.immediate()) will end up in overriding the schedulers we are using.</p>

<p>As pointed out by <a href="https://twitter.com/pakerfeldt">Patrik Åkerfeldt</a> in the comments, since the hooks are asked to provide a scheduler implementation during the initialization of the Schedulers class, we have only one chance to override the default schedulers. For this reason, there is no point in setting them up in the <code>setup</code> phases of all our tests.</p>

<p>The best place to override them once seems to be the <code>TestRunner</code>&rsquo;s constructor.</p>

<p>The custom <code>TestRunner</code> will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RxJavaTestRunner</span> <span class="kd">extends</span> <span class="n">RobolectricGradleTestRunner</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">RxJavaTestRunner</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">testClass</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InitializationError</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">testClass</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">RxJavaTestPlugins</span><span class="o">.</span><span class="na">resetPlugins</span><span class="o">();</span>
</span><span class='line'>        <span class="n">RxJavaPlugins</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">registerSchedulersHook</span><span class="o">(</span><span class="k">new</span> <span class="nf">RxJavaSchedulersHook</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Scheduler</span> <span class="nf">getIOScheduler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Schedulers</span><span class="o">.</span><span class="na">immediate</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is how the <code>setup()</code> and <code>teardown()</code> methods will look like (here I am using robolectric but it makes no difference with AndroidTests):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">RxJavaTestRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Config</span><span class="o">(</span><span class="n">constants</span> <span class="o">=</span> <span class="n">BuildConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'><span class="n">application</span> <span class="o">=</span> <span class="n">TestRobolectricApplication</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubscriberTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">RxAndroidPlugins</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">registerSchedulersHook</span><span class="o">(</span><span class="k">new</span> <span class="nf">RxAndroidSchedulersHook</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Scheduler</span> <span class="nf">getMainThreadScheduler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Schedulers</span><span class="o">.</span><span class="na">immediate</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@After</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tearDown</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">RxAndroidPlugins</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Your tests here */</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I already mentioned, you can inject the custom schedulers only once per test session. On the other hand, RxAndroidPlugins come with a reset method that will allow us to hook in different schedulers in different threads.</p>

<p>This, together with a non blocking observable (for instance by replacing your long taking observable with a mocked <code>Observable.just()</code>) will make our test synchronous.</p>

<p>In order to inject a mocked observable, we can override the Application object used by Robolectric,  as described in my <a href="http://fedepaol.github.io/blog/2015/09/05/mocking-with-robolectric-and-dagger-2/">previous post here</a> .</p>

<h2>Bonus point: debugging</h2>

<p>If the unit tests are not enough, and you want to check what is happening inside the chaining / transformation of the stream, you can set an <code>ObservableExecutionHook</code> that will be triggered when observables are being called:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'>   <span class="kd">private</span> <span class="kt">void</span> <span class="nf">enableRxTrack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">RxJavaPlugins</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">registerObservableExecutionHook</span><span class="o">(</span><span class="k">new</span> <span class="nf">DebugHook</span><span class="o">(</span><span class="k">new</span> <span class="nf">DebugNotificationListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;RXDEBUG&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Object</span> <span class="nf">onNext</span><span class="o">(</span><span class="n">DebugNotification</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onNext on &quot;</span> <span class="o">+</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Object</span> <span class="nf">start</span><span class="o">(</span><span class="n">DebugNotification</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span><span class="s">&quot;start on &quot;</span><span class="o">+</span><span class="n">n</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">complete</span><span class="o">(</span><span class="n">Object</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">super</span><span class="o">.</span><span class="na">complete</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span><span class="s">&quot;oncomplete n &quot;</span><span class="o">+</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">error</span><span class="o">(</span><span class="n">Object</span> <span class="n">context</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">super</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span><span class="s">&quot;error on &quot;</span><span class="o">+</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>TL;DR:</h1>

<ul>
<li>Use TestSubscriber when testing how an observable (or a composition of observables) behaves</li>
<li>Mock your observable and override the default schedulers to test how the subscribing class works</li>
<li>Enable the tracking of your observables by registering an observable execution hook</li>
</ul>


<p>A working example (rubber chickens included) can be found on my <a href="https://github.com/fedepaol/TestingRxJava">github repo</a>.</p>

<h3>References</h3>

<ul>
<li><a href="https://medium.com/ribot-labs/unit-testing-rxjava-6e9540d4a329">Unit testing rxjava (observables)</a> by Iván Carballo</li>
<li><a href="http://alexismas.com/blog/2015/05/20/unit-testing-rxjava/">Unit testing rxjava (subscription)</a> by Alexis Mas</li>
<li><a href="http://fragmentedpodcast.com/episodes/3/">This</a> and <a href="http://fragmentedpodcast.com/episodes/4/">this</a> episodes of <a href="http://fragmentedpodcast.com">Fragmented Podcast</a> where Dan Lew gave some insights about RxJava, where I heard about the scheduler overriding trick</li>
<li>Patrik Åkerfeldt&rsquo;s example that demonstrates how the scheduler injection works only before Scheduler class initialization</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking With Robolectric and Dagger 2]]></title>
    <link href="http://fedepaol.github.io/blog/2015/09/05/mocking-with-robolectric-and-dagger-2/"/>
    <updated>2015-09-05T08:22:47+02:00</updated>
    <id>http://fedepaol.github.io/blog/2015/09/05/mocking-with-robolectric-and-dagger-2</id>
    <content type="html"><![CDATA[<h2>Why robolectric</h2>

<p>I&rsquo;ve been a fan of robolectric since the old days, since <a href="http://fedepaol.github.io/blog/2012/07/23/intellij-robolectric-and-android/">when Android Studio was not an option and few developers embraced IntelliJ</a>. I left it a bit behind after the introduction of Android Studio, since its support was far from optimal.</p>

<p>Things have changed, and after listening Corey Latislaw advocating its usage during <a href="http://fragmentedpodcast.com/episodes/13/">this fragmented podcast episode</a> I wanted to give it a spin. Even if there is a bit of debate over its usage, mainly because tests are performed against mocked objects instead of the real framework code, it is the fastest lane to your tdd cycle because tests are run on the local jvm instead of being packed in an apk, deployed on a device and run over there.</p>

<h2>Dependency Injection</h2>

<p>One really cool thing about robolectric 3.0 is the fact that you can override the Application object declared in your manifest with a custom one (which can inherit from your application&rsquo;s one).</p>

<p>If you are using dagger (or dagger 2) and you are using the application as the source of dependency injection for your classes, this allow to easily replace your injected objects with mocks. You can even choose which mocks inject in the setup phase of your tests.</p>

<h2>Let&rsquo;s see an example:</h2>

<p>Let&rsquo;s say you have your application class that exposes all the injected objects in a Dagger 2 fashion, and that you are using it to inject classes in your activities:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// stuff </span>
</span><span class='line'>    <span class="o">((</span><span class="n">MyApplication</span><span class="o">)</span> <span class="n">getApplication</span><span class="o">()).</span><span class="na">getComponent</span><span class="o">().</span><span class="na">inject</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if we can drive the component injected within our tests, the rest of the app would use them and (hopefully) behave in a way we expect, depending on our mocks instead of the real objects.</p>

<p>The dependencies are provided by a module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Module</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationModule</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// stuff</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Provides</span>
</span><span class='line'>    <span class="nd">@Singleton</span>
</span><span class='line'>    <span class="n">GitHubClient</span> <span class="nf">provideClient</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">GitHubClient</span><span class="o">(</span><span class="n">mApp</span><span class="o">.</span><span class="na">getApplicationContext</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// .. Provides other stuff</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>GitHubClient</code> is a Retrofit (2) powered client that helps to retrieve all the repos for a given user.</p>

<p>By using a test only application, we can provide a module from our tests.</p>

<p>Let&rsquo;s see ApplicationModule&rsquo;s mocked alter ego. Note that we can override only the dependencies that we want to mock:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MockApplicationModule</span> <span class="kd">extends</span> <span class="n">ApplicationModule</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">// stuff</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="n">GitHubClient</span> <span class="nf">provideClient</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">GitHubClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">GitHubClient</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// mock behaviour</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">client</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setResult</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Repo</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">result</span> <span class="o">=</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that everything is in place, we can use the mocked objects in our tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">RobolectricGradleTestRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Config</span><span class="o">(</span><span class="n">constants</span> <span class="o">=</span> <span class="n">BuildConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>        <span class="n">application</span> <span class="o">=</span> <span class="n">TestApplication</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">TestApplication</span> <span class="n">app</span> <span class="o">=</span> <span class="o">(</span><span class="n">TestApplication</span><span class="o">)</span> <span class="n">RuntimeEnvironment</span><span class="o">.</span><span class="na">application</span><span class="o">;</span>
</span><span class='line'>        <span class="c1">// Setting up the mock module</span>
</span><span class='line'>        <span class="n">MockApplicationModule</span> <span class="n">module</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MockApplicationModule</span><span class="o">(</span><span class="n">app</span><span class="o">);</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="na">setResult</span><span class="o">(</span><span class="n">mockedResult</span><span class="o">);</span>
</span><span class='line'>        <span class="n">app</span><span class="o">.</span><span class="na">setApplicationModule</span><span class="o">(</span><span class="n">module</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>From now on, the our tested activities will be injected with our mocked github client and we will be able to test their behaviour.</p>

<h2>Quirks</h2>

<p>Since the Test Application object is created before running the tests, a default application module must be provided, otherwise you&rsquo;ll get a dreaded NPE while running your tests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestApplication</span> <span class="kd">extends</span> <span class="n">MyApplication</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="n">ApplicationModule</span> <span class="nf">getApplicationModule</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mApplicationModule</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">getApplicationModule</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mApplicationModule</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>moreover, the dependency graph is generally built inside the Application&rsquo;s onCreate method. Given that we want to recreate it with our mocked module, I had to add a method for that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplication</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Stuff </span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>        <span class="n">initComponent</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">initComponent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mComponent</span> <span class="o">=</span> <span class="n">DaggerRoboSampleComponent</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">applicationModule</span><span class="o">(</span><span class="n">getApplicationModule</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>The fact that robolectric allows you to use a custom test application object (even a different one for different tests) together with dagger is an easy way to inject mock object without having to rely on ugly setters.</p>

<p>Robolectric is a fast and effective way to speed up your tdd process. All the time spent to set the tests and the mocks app is well repaid in code coverage and writing and debugging speed afterwards.</p>

<h2>See it in action (and have something to copy from)</h2>

<p><a href="https://github.com/fedepaol/RobolectricDependenyInjection">Here on github</a> I put a working example that demonstrates how to inject a mocked module using robolectring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's Been a While]]></title>
    <link href="http://fedepaol.github.io/blog/2015/09/04/its-been-a-while/"/>
    <updated>2015-09-04T23:13:14+02:00</updated>
    <id>http://fedepaol.github.io/blog/2015/09/04/its-been-a-while</id>
    <content type="html"><![CDATA[<h3>.. since my last blogpost.</h3>

<p>I&rsquo;ve done a few things in the meanwhile, I wrote a game with LibGdx, I tinkered with various frameworks, but on top of all these things I&rsquo;ve been taking care of my one (and a half) year old daughter.</p>

<p>I do certainly have less time to devote to side projects, but I still like to learn new things and Android is exciting from that point of view.</p>

<p>While trying to catch up with all the new things that keep happening in the Android World, I hope I&rsquo;ll be able to post more often here.</p>

<p>PS: I used this post to reacquatain myself with octopress</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dragging With ViewDragHelper]]></title>
    <link href="http://fedepaol.github.io/blog/2014/09/01/dragging-with-viewdraghelper/"/>
    <updated>2014-09-01T20:48:20+02:00</updated>
    <id>http://fedepaol.github.io/blog/2014/09/01/dragging-with-viewdraghelper</id>
    <content type="html"><![CDATA[<p>While working on my <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=909434">last side gig</a>, a patch to Firefox for Android to allow the urlbar to be dragged in order to show content hidden behind the main view, I had to deal with ViewDragHelper and understand how it works.</p>

<p>The final result (please note that the patch is still under review) is something like this:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/rKRIZB6nQfg" allowfullscreen></iframe></div>


<p>It caused me more than one headache, and for this reason I am writing this post hoping it might be helpful to anybody wanting to tinker with it.</p>

<p>ViewDragHelper&rsquo;s usage is not well documented, but <a href="http://flavienlaurent.com/blog/2013/08/28/each-navigation-drawer-hides-a-viewdraghelper">this post</a> by Flavien Laurent is the best place you could start from.</p>

<p>In order to provide a simpler example for this post, I&rsquo;ll introduce a simplified version of what I have done on Firefox, without all the extra code needed to interact with the rest of the app.</p>

<p>Let&rsquo;s start with..</p>

<h2>How touch events are handled</h2>

<p>A good source of information is the <a href="http://developer.android.com/training/gestures/viewgroup.html">official documentation</a>. However, I&rsquo;ll write a short introduction here.</p>

<p>Whenever a touch event happens, the parent view is being asked if it wants to handle that event in place of its children. This is done by calling its <code>onInterceptTouchEvent()</code> method, which should return true if the parent view wants to handle the event.</p>

<p>In case the event is trapped by the parent, its <code>onTouchEvent()</code> method gets called and it must return true if the event is handled.</p>

<p>Children view can also rebel against their parent tiranny, and disable this mechanism by calling <code>requestDisallowInterceptTouchEvent()</code>. By doing that, they ensure that the touch event wont be passed to the parent view.</p>

<p><img src="http://fedepaol.github.io/images/touches.png" width="350" height="350" title="touches" alt="images"></p>

<h2>How ViewDragHelper works</h2>

<p>The idea behind it is pretty simple. You register a draghelper on a container view</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mDragHelper</span> <span class="o">=</span> <span class="n">ViewDragHelper</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">,</span> <span class="k">new</span> <span class="nf">DragHelperCallback</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then you set a couple of entry points, one to listen if a drag is being started (or is in progress), the other to handle the motion events and perform the dragging when the event is being passed to the view it registered against:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mDragHelper</span><span class="o">.</span><span class="na">shouldInterceptTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onInterceptTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mDragHelper</span><span class="o">.</span><span class="na">processTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ViewDragHelper will be asked to check if a motion event is part of a dragging process. The behaviour of the whole dragging process is ruled by a <code>DragHelperCallback</code> instance passed on creation.
<code>DragHelperCallback</code> has method that need to be implemented to be notified of particular evens, such as:</p>

<ul>
<li>a change in the dragging state</li>
<li>a change in the dragged view location</li>
<li>when and where the dragged view was released</li>
</ul>


<p>It also has methods used to influence the dragging behaviour:</p>

<ul>
<li>clamp the position of the view / the range it can be dragged within</li>
<li>check whether a particular subview can be dragged</li>
</ul>


<p>A whole drag process is intended a sequence of <code>Down</code> / <code>Move</code> / <code>Up</code> events over a particular target view.
Whenever a drag process starts, ViewDragHelper finds the topmost child that contains the location of the motion event, and asks us if that particular view can be dragged or not in <code>tryToCaptureView()</code> method.<br/>
This is <em>more or less</em> the theory involved in the dragging process. On top of that, ViewDragHelper offers also <code>settleAt</code> methods to let the views settle to their rest location gracefully.</p>

<p>Since explaining in words it&rsquo;s not the easiest thing (nor I am particularly good to explain), I&rsquo;ll introduce the simplified app I used to understand (a bit) how ViewDragHelper works.</p>

<h1>Enters DragQueen</h1>

<p><img src="https://farm6.staticflickr.com/5128/5356147569_686637006e.jpg" width="350" height="350" title="dragqueen" alt="images"> <a href="https://www.flickr.com/photos/kbyte/5356147569/in/photolist-9aiE4T-oZtA-6YfGh-ebJmp8-jCeRGT-7xRKgx-7csUvo-nFTXP8-nFTXNg-9DAWnB-dbWyHz-m2FLMf-6x5QY2-5vkGLh-9jwh4a-KCBSK-dJTFb-4XRtDY-ouiHNw-od7U9J-oiKnUm-6DTq9a-6d1uXV-ocLauF-7VXBD4-n4y95v-ouj2w5-oaD6SK-owCHq3-6xQaS8-je4k6-ng25wJ-oDWV9V-os7FZk-8oeWRF-oRT83M-2PtLZZ-6x5Pkt-49vCUN-49rtdk-S9buU-f5Wr7L-49vCQw-nVMgN7-6wABHo-fX91x-6x5PQH-51DtKg-7mVAco-miQ2Q/">Licensed under commons creative</a></p>

<p>(Just kidding). DragQueen is a (ultra) simplified version of what I implemented on fennec with a button named queen that you can drag.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Vo4381SSNn0" allowfullscreen></iframe></div>


<p></p>

<p>It consists of:</p>

<ul>
<li>OuterLayout (the root element of our activity, the one that contains the views we want to drag)</li>
<li>a front panel which can be dragged</li>
</ul>


<p><img src="http://fedepaol.github.io/images/draghelper.png" width="350" height="350" title="draghelper" alt="images"></p>

<p>To make the things a bit more complex we want to enable the dragging only from a particular subview, Queen. To make the things even more complex, we want to be also able to interact with Queen button while the dragging is not happening.</p>

<p>We also allow only two rest locations, so if the view is released mid-way it will settle to its open / close location depending on the speed and the location of when the view is released.
Finally, note that OuterLayout contains also a button that is hidden when main layout is in its closed state.</p>

<h3>OuterLayout</h3>

<p>Outerlayout is a ViewGroup that extends a RelativeLayout.<br/>
As I wrote before, the two methods ViewDragHelper needs to hook into are</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isQueenTarget</span><span class="o">(</span><span class="n">event</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">mDragHelper</span><span class="o">.</span><span class="na">shouldInterceptTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isQueenTarget</span><span class="o">(</span><span class="n">event</span><span class="o">)</span> <span class="o">||</span> <span class="n">isMoving</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mDragHelper</span><span class="o">.</span><span class="na">processTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may notice that <code>onInterceptTouchEvent</code> if has another condition. This is because we want to drag mainlayout only if the touch targets the Queen (it would not be drag-queen otherwise). This is a simplified version of what happens in Fennec, where we want to intercept the drag only if it starts from the toolbar to avoid to interfere with the web content.</p>

<p>In any case, checking if Queen is targeted is quite easy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isQueenTarget</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">queenLocation</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>    <span class="n">mQueenButton</span><span class="o">.</span><span class="na">getLocationOnScreen</span><span class="o">(</span><span class="n">queenLocation</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">upperLimit</span> <span class="o">=</span> <span class="n">queenLocation</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">mQueenButton</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lowerLimit</span> <span class="o">=</span> <span class="n">queenLocation</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawY</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">lowerLimit</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">upperLimit</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Other methods that influence the behaviour of the dragging are:</h2>

<h4>tryCaptureView</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">tryCaptureView</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">main_layout</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>which gives draghelper the permission to drag main layout). You <em>must</em> return true up there for the view you want to be dragged.</p>

<h4>getViewVerticalDragRange &amp;&amp; clampViewPositionVertical (there are <em>Horizontal</em> flavours too)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getViewVerticalDragRange</span><span class="o">(</span><span class="n">View</span> <span class="n">child</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mVerticalRange</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">clampViewPositionVertical</span><span class="o">(</span><span class="n">View</span> <span class="n">child</span><span class="o">,</span> <span class="kt">int</span> <span class="n">top</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">topBound</span> <span class="o">=</span> <span class="n">getPaddingTop</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">bottomBound</span> <span class="o">=</span> <span class="n">mVerticalRange</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">top</span><span class="o">,</span> <span class="n">topBound</span><span class="o">),</span> <span class="n">bottomBound</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>which do what you expect them to do, setting limit for the dragging. In this particular case, vertical range is set to half the size of screen.</p>

<h3>DragQueen</h3>

<p>Note also how <code>mMainLayout</code> is set as clickable with <code>android:clickable="true"</code>. This prevents touch events to be passed down to the view below when it is closed..</p>

<hr />

<h2>Callbacks</h2>

<p>There are several callbacks you will want to implement in order to react to the events related to the dragging:</p>

<h4>onViewDragStateChanged</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onViewDragStateChanged</span><span class="o">(</span><span class="kt">int</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">mDraggingState</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// no change</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">mDraggingState</span> <span class="o">==</span> <span class="n">ViewDragHelper</span><span class="o">.</span><span class="na">STATE_DRAGGING</span> <span class="o">||</span> <span class="n">mDraggingState</span> <span class="o">==</span> <span class="n">ViewDragHelper</span><span class="o">.</span><span class="na">STATE_SETTLING</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>             <span class="n">state</span> <span class="o">==</span> <span class="n">ViewDragHelper</span><span class="o">.</span><span class="na">STATE_IDLE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// the view stopped from moving.</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mDraggingBorder</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">onStopDraggingToClosed</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">mDraggingBorder</span> <span class="o">==</span> <span class="n">mVerticalRange</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mIsOpen</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">ViewDragHelper</span><span class="o">.</span><span class="na">STATE_DRAGGING</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">onStartDragging</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">mDraggingState</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>notifies the state transitions of DragHelper between <code>DRAGGING</code>, <code>IDLE</code> or <code>SETTLING</code> state.</p>

<h4>onViewPositionChanged</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onViewPositionChanged</span><span class="o">(</span><span class="n">View</span> <span class="n">changedView</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">top</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dx</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dy</span><span class="o">)</span> <span class="o">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>whose purpouse is pretty clear.</p>

<h4>onViewReleased</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onViewReleased</span><span class="o">(</span><span class="n">View</span> <span class="n">releasedChild</span><span class="o">,</span> <span class="kt">float</span> <span class="n">xvel</span><span class="o">,</span> <span class="kt">float</span> <span class="n">yvel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">float</span> <span class="n">rangeToCheck</span> <span class="o">=</span> <span class="n">mVerticalRange</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mDraggingBorder</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mIsOpen</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mDraggingBorder</span> <span class="o">==</span> <span class="n">rangeToCheck</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mIsOpen</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">settleToOpen</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">yvel</span> <span class="o">&gt;</span> <span class="n">AUTO_OPEN_SPEED_LIMIT</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// speed has priority over position</span>
</span><span class='line'>            <span class="n">settleToOpen</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">yvel</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">AUTO_OPEN_SPEED_LIMIT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">settleToOpen</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">mDraggingBorder</span> <span class="o">&gt;</span> <span class="n">rangeToCheck</span> <span class="o">/</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">settleToOpen</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">mDraggingBorder</span> <span class="o">&lt;</span> <span class="n">rangeToCheck</span> <span class="o">/</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">settleToOpen</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">settleDestY</span> <span class="o">=</span> <span class="n">settleToOpen</span> <span class="o">?</span> <span class="n">mVerticalRange</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">mDragHelper</span><span class="o">.</span><span class="na">settleCapturedViewAt</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">settleDestY</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ViewCompat</span><span class="o">.</span><span class="na">postInvalidateOnAnimation</span><span class="o">(</span><span class="n">OuterLayout</span><span class="o">.</span><span class="na">this</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>is where you (<em>might</em>) want to let the view go into its rest place. I made it behave in such way that dragging speed (and direction) is more important than the place you are releasing the view.</p>

<hr />

<h2>Bonus methods</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mDragHelper</span><span class="o">.</span><span class="na">settleCapturedViewAt</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">settleDestY</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>is a helper method that will make your view smoothly settle at the given destination.</p>

<hr />

<h2>Quirks and reasons for headaches</h2>

<h4>ViewDragHelper sets the offset of the target view ..</h4>

<p>  .. by calling <code>offsetTopAndBottom</code>, which is ok <em>but</em> you have to remember that a layout round called by any of the children of outerLayout (or the parent view you are passing to the draghelper) will reset that offset. What you are going to see in that case is your dragged view getting back at its rest position.</p>

<p>A possibile solution to this is to force back the parent where it was before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mMainLayout</span><span class="o">.</span><span class="na">addOnLayoutChangeListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnLayoutChangeListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLayoutChange</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">top</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bottom</span><span class="o">,</span> <span class="kt">int</span> <span class="n">oldLeft</span><span class="o">,</span> <span class="kt">int</span> <span class="n">oldTop</span><span class="o">,</span> <span class="kt">int</span> <span class="n">oldRight</span><span class="o">,</span> <span class="kt">int</span> <span class="n">oldBottom</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mOuterLayout</span><span class="o">.</span><span class="na">isMoving</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">v</span><span class="o">.</span><span class="na">setTop</span><span class="o">(</span><span class="n">oldTop</span><span class="o">);</span>
</span><span class='line'>                <span class="n">v</span><span class="o">.</span><span class="na">setBottom</span><span class="o">(</span><span class="n">oldBottom</span><span class="o">);</span>
</span><span class='line'>                <span class="n">v</span><span class="o">.</span><span class="na">setLeft</span><span class="o">(</span><span class="n">oldLeft</span><span class="o">);</span>
</span><span class='line'>                <span class="n">v</span><span class="o">.</span><span class="na">setRight</span><span class="o">(</span><span class="n">oldRight</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>ViewDragHelper always want to intercept the top most child in z order</h4>

<p>If you have some view in between, but you want to be able to drag a lower one, you have to let ViewDragHelper think that your view is the topmost one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getOrderedChildIndex</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">mainLayoutIndex</span> <span class="o">=</span> <span class="n">indexOfChild</span><span class="o">(</span><span class="n">mMainLayout</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">mainLayoutIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mainLayoutIndex</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h1>What&rsquo;s more</h1>

<p>ViewDragHelper offers a lot more features than those I just presented. <em>DragQueen</em> implements only vertical dragging, but you can drag your views horizontally too. Again, refer to the excellent post by Flavien for more details.</p>

<p>Moreover, ViewDragHelper allows you to intercept drag events that start from the edge of the screen, which is the way its used in the <code>NavigationDrawer</code>.</p>

<p>All it needs to enable it is to call</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mDragHelper</span><span class="o">.</span><span class="na">setEdgeTrackingEnabled</span><span class="o">(</span><span class="n">ViewDragHelper</span><span class="o">.</span><span class="na">EDGE_LEFT</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>and to implement</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onEdgeDragStarted</span><span class="o">(</span><span class="kt">int</span> <span class="n">edgeFlags</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pointerId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mDragHelper</span><span class="o">.</span><span class="na">captureChildView</span><span class="o">(</span><span class="n">mMainLayout</span><span class="o">,</span> <span class="n">pointerId</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>TL;DR</h1>

<p>ViewDragHelper is a bit complex and as I said before not well documented. However it allows you to drag views around with very little code, and it can be used to implement nice effects. In any case you can <del>unrestrainedly copy</del> <em>take inspiration</em> from DragQueen source code on <a href="https://github.com/fedepaol/dragqueen">GitHub</a> (it seems to work).
I really hope this post does not contain too many errors and that you enjoyed reading it as much as I did writing.</p>

<p>If you liked this post, consider following me on twitter <a href="https://twitter.com/fedepaol">@fedepaol</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating From Blogger to Octopress (Done!)]]></title>
    <link href="http://fedepaol.github.io/blog/2014/08/24/migrating-from-blogger-to-octopress-done/"/>
    <updated>2014-08-24T19:29:46+02:00</updated>
    <id>http://fedepaol.github.io/blog/2014/08/24/migrating-from-blogger-to-octopress-done</id>
    <content type="html"><![CDATA[<p>It feels a bit like this <img src="http://i.imgur.com/t0XHtgJ.gif" alt="Light bulb" /></p>

<p>but when I had to write a new blogpost and had to embed some code snippets into my blogger hosted blog, I got so pissed of that I chose to migrate my existing blog to a github hosted instance of octopress.</p>

<p>Jason Jarrett made a pretty nice tutorial about the whole process <a href="http://staxmanade.com/2014/04/migrating-blogspot-to-octopress-part-1-introduction/">here</a>.
However, I had to change a couple of things and I thought those might be helpful to anybody who faces the same problems.</p>

<p>The overall process is something like:</p>

<ul>
<li>setup octopress</li>
<li>import an exported dump of blogger</li>
<li>fix internal links</li>
<li>setup redirects from blogger to your new blog</li>
</ul>


<h2>Setting octopress up</h2>

<p>Nothing to say here. Just go to octopress website and follow the instructions.</p>

<h2>Importing posts from blogger</h2>

<p>This is pretty straightforward too. Export your blogger content as xml, and use <a href="https://gist.github.com/juniorz/1564581">this ruby script</a> that generates a <em>posts</em> folder containing all the posts exported from blogger. Anyway, refer to <a href="http://staxmanade.com/2014/04/migrating-blogspot-to-octopress-part-4-import-content-into-ctopress/">Jason&rsquo;s blog</a>, everything is described accurately there.</p>

<h2>Fix internal links</h2>

<p>You&rsquo;ll have to play a bit with <em>sed</em> in order to fix internal links, otherwise they will keep pointing to blogspot.</p>

<h2>Setup redirects</h2>

<p>Here is where things get interesting, because you will want to make visitors of the old url be redirected to the new blog (possibily with 301). The whole process is a bit tricky due to blogger limitation (for more details check <a href="http://staxmanade.com/2014/04/migrating-blogspot-to-octopress-part-6-301-redirect-old-posts-to-new-location/">here</a>).</p>

<p>There are a couple of other obstacles too: the script available is powershell only. Moreover, Jason suggets to use the alias plugin <a href="https://github.com/imathis/octopress/issues/1610">which seems to be broken at the moment</a>.</p>

<p>However, <a href="https://github.com/jekyll/jekyll-redirect-from">jekyll-redirect</a> seems to work fine, so I chose to use it in my solution.</p>

<p>And finally, since powershell is not an option, here is my python version of the script. It binds the post id with the title of the posts, loop all the html files in your post folder, injects the redirection in the yaml header.</p>

<p>Using it is as easy as calling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>python blogger_import.py -p octopress/source/_posts/ -b ./blog-08-22-2014.xml
</span></code></pre></td></tr></table></div></figure>


<p>where p is the path of your posts folder, b is the xml file produced by blogspot.</p>

<p>Here is the script:</p>

<div><script src='https://gist.github.com/e46635e3d7de475b0546.js'></script>
<noscript><pre><code>import argparse
import xml.etree.cElementTree as ET
import os


def is_post(node):
    t = node.find(&#39;{http://www.w3.org/2005/Atom}category&#39;).get(&#39;term&#39;)
    d = node.find(&#39;{http://purl.org/atom/app#}control&#39;)
    return (not d) and (t == &#39;http://schemas.google.com/blogger/2008/kind#post&#39;)

def get_posts_id(blogger_dump):
    title_map = {}
    tree = ET.parse(blogger_dump)
    elem = tree.getroot()
    feed = elem.findall(&#39;{http://www.w3.org/2005/Atom}entry&#39;)
    for f in filter(is_post, feed):
        post_id = f.find(&#39;{http://www.w3.org/2005/Atom}id&#39;)
        id_number = post_id.text.split(&#39;-&#39;)[2]
        post_title = f.find(&#39;{http://www.w3.org/2005/Atom}title&#39;).text
        title_map[post_title] = id_number
    return title_map

def inject_redirect(file_name, title_map):
    yaml_separator = 0
    old_file = file_name + &#39;old&#39;
    print file_name
    print old_file
    os.rename(file_name, old_file)
    f = open(old_file, &#39;r&#39;)
    n = open(file_name, &#39;w+&#39;)
    for line in f:
        if line == &#39;---&#39;:
            yaml_separator = yaml_separator + 1
        if yaml_separator == 2:
            n.write(line)
            continue
        if line.startswith(&#39;title&#39;):
            title = line.split(&#39;&quot;&#39;)[1]
            try:
                post_id = title_map[title]
                n.write(&#39;redirect_from:\n&#39;)
                n.write(&#39;  - /blog/%s/\n&#39;%post_id)
            except KeyError:
                print &#39;id not found for &#39; + title
        n.write(line)

def set_redirect(posts_path, titles_map):
    for file_name in os.listdir(posts_path):
        if (file_name.endswith(&#39;html&#39;)):
            inject_redirect(os.path.join(posts_path, file_name), titles_map)

if __name__ == &#39;__main__&#39;:
    parser = argparse.ArgumentParser()
    parser.add_argument(&#39;-p&#39;, &#39;--posts&#39;, dest=&#39;posts_path&#39;, help=&#39;path of the converted _posts&#39;)
    parser.add_argument(&#39;-b&#39;, &#39;--blogger&#39;, dest=&#39;blogger_dump&#39;, help=&#39;blogger dump file&#39;)
    args = parser.parse_args()

    titles_map = get_posts_id(args.blogger_dump)
    set_redirect(args.posts_path, titles_map)
</code></pre></noscript></div>


<h2>TL;DR</h2>

<ul>
<li>Read <a href="http://staxmanade.com/2014/04/migrating-blogspot-to-octopress-part-1-introduction/">Jason&rsquo;s blog</a></li>
<li>When setting up redirection, install <a href="https://github.com/jekyll/jekyll-redirect-from">jekyll-redirect</a></li>
<li>Use my script to inject redirection in the header of exported blogposts</li>
<li>Setup blogger template as described in Jason&rsquo;s blog</li>
</ul>


<p>PS: I still need to write the blogpost that made me switch to octopress.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Preloaded Sqlite Data]]></title>
    <link href="http://fedepaol.github.io/blog/2014/04/08/preloading-localized-data-in-sqllte/"/>
    <updated>2014-04-08T00:00:00+02:00</updated>
    <id>http://fedepaol.github.io/blog/2014/04/08/preloading-localized-data-in-sqllte</id>
    <content type="html"><![CDATA[<div class='post'>
Preloading data in Sqlite is a common problem during android development.<br />The most common solutions are:<br /><ul><li>hardcode the insert statements and execute them (possibly inside a transaction) the first time the db is opened</li><li>place the data inside a csv file, load it the first time the db gets opened, parse the rows and populate the db</li><li>prepare a pre-built sqlite file, ship it along with your app and load it the first time the db is opened</li></ul><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://i.imgur.com/CmGdiFU.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://i.imgur.com/CmGdiFU.jpg" height="320" width="320" /></a></div><br /><ul></ul>I&#8217;ll focus on the third approach, because it allows us to check our db outside the app without extracting it from our device, and because it allows us to prepare the data in a more &#8220;human friendly way&#8221;.<br /><br />It&#8217;s worth to mention the excellent <a href="https://github.com/jgilfelt/android-sqlite-asset-helper">sqlite asset helper</a> library by Jeff Gifelt, that allows us to embed a prebuilt (compressed) sqlite file without having to reinvent the wheel. For this reason, this post will be about how to handle data entry process (and something more), and you won&#8217;t find a (yet another) way to preload a sqlite file.<br /><br />Let&#8217;s start with a problem: you want to build a pretty simple <a href="https://play.google.com/store/apps/details?id=com.whiterabbit.freshfruitveg">Seasonal Fruit and Vegetables</a> app, and the amount of data you have to deal with is big enough to discourage you to prepare the inserts manually.<br />You&#8217;ll have:<br /><ul><li>the list of products</li><li>the description of each product (possibly localized in different languages)</li><li>the data related to the seasonality of each product</li></ul>So, here&#8217;s the approach:<br /><h3>Step 1: data entry </h3>Use a spreadsheet to fill the data in a human friendly way, export it as csv (or tsv, so you won&#8217;t have to deal with any random comma inside the descriptions), parse it and produce the sqlite file together with localized string res files to be embedded inside the application.<br />In my case I had a file&nbsp; having the genre (fruit or veg), the calories count, the name and the description in italian and in english:<br /><br /><pre style="background-image: URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif); background: #f0f0f0; border: 1px dashed #CCCCCC; color: black; font-family: arial; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;"><code style="color: black; word-wrap: normal;"> asparagus     0     25     Asparagi     Descrizione asparagi in italiano.      Asparagus     English asparagus description  <br /> chard          0     12     Bietola          Descrizione bietola in italiano.      Chard          English chard description  <br /></code></pre><br /><br />I also have files that describe the seasonality of each products in different areas, but I will not describe them since they are not relevant to the approach I am describing here.<br /><br /><h3>Step 2: Parse!</h3>Choose your favorite scripting language. I went for python since it&#8217;s super slick and it comes with batteries included, such as xml writing and sqllite support.<br /><br />Creating the db is straightforward:<br /><pre style="background-image: URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif); background: #f0f0f0; border: 1px dashed #CCCCCC; color: black; font-family: arial; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;"><code style="color: black; word-wrap: normal;"> CREATE_ITEMS = 'create table Item (_id integer primary key, Name text, kind integer, calories integer);'  <br /> CREATE_ITEM_PER_MONTHS = 'create table ItemPerMonth (ItemId integer, Month integer, Freshness integer, Area integer);'  <br /> CREATE_ITEM_PREFERRED = 'create table PreferredItem (PreferredItemId integer);'  <br /> conn = sqlite3.connect('fruit')  <br /> c = conn.cursor()  <br /> c.execute(CREATE_ITEM_PER_MONTHS)  <br /> c.execute(CREATE_ITEM_PREFERRED)  <br /></code></pre><br /><br />Then we need to use the data we have to fullfill two purpouses:<br /><ul><li>fill the database</li><li>fill the localized string resources&nbsp;</li></ul>Again, filling the database consists of parsing each line of the csv file and calling the appropriate insert.<br /><br />In python is as easy as calling<br /><br /><pre style="background-image: URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif); background: #f0f0f0; border: 1px dashed #CCCCCC; color: black; font-family: arial; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;"><code style="color: black; word-wrap: normal;">   cursor.execute(statement)  <br /></code></pre><br />on a cursor object, where statement is the insert statement.<br /><br />Together with that, we do have a lot of data that needs to be rendered in the proper language.<br />In order to take advantage of the resource framework, I chose to generate the resource files instead of relying on a &#8220;locale&#8221; field in the db to filter in my queries.<br />Again, filling an xml node is pretty straightforward in python:<br /><br /><pre style="background-image: URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif); background: #f0f0f0; border: 1px dashed #CCCCCC; color: black; font-family: arial; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;"><code style="color: black; word-wrap: normal;">   name = ET.SubElement(root, "string")  <br />   name.set("name", item_name)  <br />   if lang_name.find('%') != -1:  <br />     name.set("formatted", "false")  <br />   name.text = lang_name  <br /></code></pre><br /><br />At this point, we can generate an it_descriptions.xml file and an eng_descriptions.xml file (and even let our script place them in the proper folders).<br /><br />When we want to use our descriptions in Android (i.e. in&nbsp; our cursor adapter&#8217;s bindView), we&nbsp; need to bind the product name (i.e. &#8220;asparagus&#8221;) with the corresponding resource. That&#8217;s easy and it can be done in this way:<br /><br /><pre style="background-image: URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif); background: #f0f0f0; border: 1px dashed #CCCCCC; color: black; font-family: arial; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;"><code style="color: black; word-wrap: normal;">  int nameResID = context.getResources().getIdentifier(name,   <br />                     "string", context.getPackageName());  <br /></code></pre><br />By doing that, we can retrieve the resource id of the string related to the name that was generated by our script. If we are worried about the cost of the lookup, we can even add a lru cache to absorb that cost.<br /><br /><br />TL;DR:<br /><ul><li>Write your data in a human readable format</li><li>Parse that data with your favourite language</li><li>Write the data that does not depends on the language in sqllite</li><li>Write the language-dependent data in resource files</li><li>Use getIdentifier for retrieving the resource id of the strings automatically generated</li></ul>Bonus point: again, you can use this convention for pictures as well, so you can throw an &#8220;asparagus.png&#8221; image in your assets to be loaded afterwards.<br /><br />The biggest advantage of this approach is that you have only one master source of your data (the spreadsheet) that you can modify and rerun the generator over every time you modify it. <br /><br />If you are interested in the whole loader python script you can <a href="https://gist.github.com/fedepaol/10193052">check it here</a><br /><br /><br /><br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rest Interaction in Android]]></title>
    <link href="http://fedepaol.github.io/blog/2014/02/20/rest-interaction-in-android/"/>
    <updated>2014-02-20T00:00:00+01:00</updated>
    <id>http://fedepaol.github.io/blog/2014/02/20/rest-interaction-in-android</id>
    <content type="html"><![CDATA[<div class='post'>
<div style="text-align: justify;">In last December (&#8216;13) I was asked to submit a talk proposal for the first <a href="http://it.droidcon.com/2014/lineup/">Italian Droidcon</a>, which I did. It got accepted, so in Febraury I gave my first public speech speaking of &#8220;(O)Authenticated Rest Interaction in Android&#8221; in front of real people. <br /><br />This post is meant to be a follow up with the information that can&#8217;t be found in the slides<br /><br /></div><script async="" class="speakerdeck-embed" data-id="ddbb3d50725001312be21e64c86b5257" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script> <br /><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">I hoped to sum all the talk up in a post, but it got too long so I am going to split it in several pieces. This one will cover the asynchronous interaction with a remote webservice.&nbsp; </div><div style="text-align: justify;"><br /><br /></div><div style="text-align: justify;"><span style="font-size: small;">Disclaimer: I am not inventing anything new here, most of the content can be found on the internet. A great source of inspiration is <a href="http://www.youtube.com/watch?v=xHXn3Kg2IQE">this talk</a>, from where I took the inspiration for the approach I am going to explain, probably in a worse way. </span></div><div style="text-align: justify;"><br /><br /></div><h2 style="text-align: justify;"><span style="font-size: x-large;">Rule #1: decouple the interaction with the web service from UI components (activities / fragment)</span></h2><div style="text-align: justify;"><br /></div><div style="text-align: justify;">This means that <b><i>cut and past</i>ing that <i>AsyncTask that contains an HttpUrlConnection</i> code you found on google directly inside your activity is a bad idea</b> (I don&#8217;t even want to remind you that you should NOT host the HttpUrlConnection directly inside your activity, if you are doing that you probably won&#8217;t understand the rest of this post and you should restart your android journey <a href="http://developer.android.com/guide/index.html">here</a>).</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="font-size: large;">There are several reasons for that.&nbsp;</span></div><div style="text-align: justify;">You should start thinking that any network operation has a cost, in terms of bandwith and cpu power. Every time you turn the radio on involves consuming (a lot of) battery power, performing the request and parsing the result involves cpu (and therefore) battery power, <b>so any network operation is precious and you do not want to waste any performed request result</b>.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Said that, you should (must?) be aware that your activity might be killed at any time.. well, not at any time but as soon as it&#8217;s not foregrounded anymore, which is something that is likely to happen if your beloved user chooses to leave your application in favour of candy crush, or if he receives an incoming phone call. </div><div style="text-align: justify;">BUT, the <b>result of a request started inside that activity might still be useful for a latter use</b>, so you do not want your request to be killed together with the activity that hosted it.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Moreover, you should be aware that every time a &#8220;configuration change&#8221; occurs, which is what commonly happens when the device gets rotated, the current activity gets killed and recreated.&nbsp;</div><div style="text-align: justify;">Well, guess what? <b>That ongoing request that costed you a lot of power / cpu is lost, and its result with that</b>. Even worse, it&#8217;s not completely lost, but it might be notified to a leaked activity that nobody will look at anymore because the current one is the one which was recreated. There are ways to circumvent this, like hosting the components that you want to survive to a configuration change inside a <a href="http://www.vogella.com/tutorials/AndroidFragments/article.html#headlessfragments">headless fragment</a>, but again, you should be very careful.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Finally, given that you want to host the interaction with the service inside the activity, and because the activity is guaranteed to be active only as long as it is in foreground, it is obvious that in this way <b>is impossible to schedule requests</b> to be performed while the application is not being used.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Malus point: if you have a <i>god activity</i> that handles the UI interaction, a component like a AsyncTask or a Thread that is in charge of performing the request, the real interaction with the service AND the interaction with the activity in order to update the UI, well, you are likely to have a poor encapsulation of your code and you might have some issues while testing your code.</div><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-uv98YZgJtOA/UwZwlqMlBKI/AAAAAAAAMWY/i68I8z_M-uE/s1600/fry.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-uv98YZgJtOA/UwZwlqMlBKI/AAAAAAAAMWY/i68I8z_M-uE/s1600/fry.png" height="240" width="320" /></a></div><h2 style="text-align: center;"><span style="font-size: large;">So where am I supposed to perform the calls?</span></h2><h3 style="text-align: center;">&nbsp;</h3><div style="text-align: justify;">The answer is pretty simple. Use a Service, which is <i>&#8220;is an application component that can perform long-running operations in the background and does not provide a user interface&#8221;</i>, so it&#8217;s just right for our purpouse. The idea here is to host that <b>rest call inside a service</b>, so it can survive to any activity lifecycle event. </div><div style="text-align: justify;">There are a couple of ways to interact with a service, you can throw intents at it, or you can bind your activities to it. In the latter case, you&#8217;ll get back a reference to the whole service object, and so you are able to implement a rich api your activity can interact with.</div><div style="text-align: justify;">On the other hand, you should be careful and stop your service when you do not need it anymore (ie when all the requests are satisfied), and you should also remember that you (still) need to host your asynchronous interaction inside of some kind of threaded component.&nbsp;</div><div style="text-align: justify;"><br /></div><h3 style="text-align: justify;"><span style="font-size: large;">IntentService!</span></h3><div style="text-align: justify;">Are my favourite flavour of services when speaking of rest interaction. Why is that?</div><ul><li>IntentService(s) provide only a <i>onHandleIntent</i> method, which is performed inside a different thread. No need to spawn an asynctask</li><li>IntentService(s) get destroyed as soon as <i>onHandleIntent</i> returns. No need to understand (or risk to forget) when the service needs to be shut down.</li></ul>Have you ever heard of <a href="http://en.wikipedia.org/wiki/Command_pattern">Command Pattern</a> ? You can just embed your requests parameter inside the intent, parse them in <i>onHandleIntent</i> and let the <i>intentservice</i> execute the request for you. Isn&#8217;t that cool?<br /><br /><br /><h2><span style="font-size: large;">Cool! Now I have the data I retrieved from the service, what should I do with that?</span></h2><div style="text-align: center;"><br /></div><div style="text-align: justify;"><span style="font-size: large;">Store it!</span> The two most common alternatives are <b>plain sqllite or using a content provider</b>. The first benefit of using some kind of persistant storage is that <b>you don&#8217;t want to perform the same costly request twice in order to retrieve the same data</b>.</div><div style="text-align: justify;">Moreover, storing the data enforces the decoupling of your service with the activity, since the activity will fetch the data from the storage, regarless of when the storage was filled. This is also better in terms of user experience, because it&#8217;s better to find some kind of data instead of an empty listview if the device is offline.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Bonus point! If you want to perform the inserts a bit faster, check if you can fetch only new data, if the apis you are consuming are offering any kind of timestamp parameter. Plus, remember to use transactions and bulkinserts in order to speed up your inserts.</div><h2 style="text-align: justify;"></h2><h2 style="text-align: justify;"><span style="font-size: large;">Anything missing?</span></h2><div style="text-align: justify;">Ok, your activity asked to the service to perform the request, the request was performed, the result parsed and stored in your content provider. You should now notify the activity that the storage contains something new.&nbsp;</div><div style="text-align: justify;">You have some options:</div><ul><li>Bind the activity to the service and pass a callback</li><li>Use <a href="http://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager.html">(local) broadcasts </a></li><li>Use a message bus (<a href="http://square.github.io/otto/">Otto</a>, <a href="https://github.com/greenrobot/EventBus">eventbus</a>)</li></ul>Or if you are using a content provider, you could take advantage of CursorLoader / <a href="http://www.grokkingandroid.com/use-contentobserver-to-listen-to-changes/">Observers </a>, which I think are the less error prone way to feed a listview out of a content provider&#8217;s data.<br /><br />You just need to remember to add a couple of lines of code:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-hX1BW7VBeHo/UwZ43lS-BBI/AAAAAAAAMWo/N5b4R1G8AGM/s1600/DroidconIt.034.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-hX1BW7VBeHo/UwZ43lS-BBI/AAAAAAAAMWo/N5b4R1G8AGM/s1600/DroidconIt.034.jpg" height="480" width="640" /></a></div><br /><h2><span style="font-size: large;">Final result:</span></h2><br />The final picture of this kind of architecture is the following (please forgive my extremely bad design skills):<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-GZBxeNRISk0/UwZ5O3Q8D0I/AAAAAAAAMWw/JzGE9krKL88/s1600/DroidconIt.035.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-GZBxeNRISk0/UwZ5O3Q8D0I/AAAAAAAAMWw/JzGE9krKL88/s1600/DroidconIt.035.jpg" height="480" width="640" /></a></div><br />Please note how the the activity asks the Service to perform the request with the webservice and then forgets about it. Any time the data needs to be displayed, it&#8217;s always fetched from the storage.<br />The only other interaction happens when the service tells the activity it needs to reload the data.<br />In this way, any ongoing request will survive even if the activity gets killed. When the user will return to your application, the newly created activity will load the latest fetched data from the storage.<br /><br /><br />This was the first post related to the <b>Rest Interaction in Android</b>. I really hope I did not say too many wrong things&#8230;<br /><br />If you liked this post, consider following me on twitter @fedepaol. <br /><br /><br /><br /></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>kalyanblog</div>
<div class='content'>
HI<br />Nice article.<br />I got a question about one of the common situations, when you get some data from server, that is already sorted on the server, and we don&#39;t have enough fields to sort it on the client. Should we persist this data? And what should we do on another request? Clear table?<br />Thanks</div>
</div>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
@Michal:<br />Let&#39;s distinguish between notifying the activity and then having it update itself. ContentProviders plus loaders offer a full solution via observers, so you don&#39;t have to worry about anything.<br /><br />On the other hand, if you want to notify the activity in some other way, you can:<br />- use a messagebus<br />- use (local) broadcasts<br /><br />Once the activity knows that the underlying storage has new content, again, you have a lot of ways depending on how you stored the data. <br />Again, you can use custom loaders (my favourite one is https://github.com/commonsguy/cwac-loaderex . Alternatively, you can use asynctask, native threads or any async way to interact with your storage.</div>
</div>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
@CristianC:<br />Gave a quick look at your groundy lib, it looks like it&#39;s a slick way to perform async interaction inside a service. My only concern is about passing a callback object instead of registering / unregistering a listener. By doing that, you can only return the result to the calling activity. Worse than that, it looks like (if I understood correctly, sorry it&#39;s a bit late here) you are not using weak references, so you might leak the activity in case the reference is being held but the activity is not active anymore.</div>
</div>
<div class='comment'>
<div class='author'>Michal Kejzlar</div>
<div class='content'>
Thank you for your post, good points there. What would you recommend for observing changes in storage without having Content Provider and loaders? E.g. storing data via dao objects telling to activity via EventBus and then what? Having ugly AsyncTask for querying the database?</div>
</div>
<div class='comment'>
<div class='author'>Cristian C</div>
<div class='content'>
Hi Federico.<br /><br />Have you taken a look at github.com/telly/groundy ?<br /><br />It makes interaction between Service and Activity easier.<br /><br />Disclamer: I wrote the library.</div>
</div>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
@Andy Res:<br /><br />I don&#39;t think you can &quot;natively&quot; stop an intentservice once you launched it. However, what you can do is letting it discover that you are not interested in it anymore. This http://stackoverflow.com/a/7893398/504596 sounds like a reasonable solution. However, despite being a big fan of them, I admit that this is a big limit of IntentService. Another limitation is that you cannot prioritize requests. This is because you are implicitly relying on the Intent queue instead of explicitly using one (or a library that use a queue). In any case, I would also say that in most common use cases, once you start a request you are unlikely to want to delete it. Still, think about updating your twitter feed. If you launch an update, you want the request to be completed even if the user leaves the application.<br />Hope my reply makes sense :-)</div>
</div>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
@Vang:<br /><br />I assume you are talking about how to handle the endless data, not how to display it by using some kind of endless listview. In any case, I&#39;d say that how you want to handle it depends on the data you want to display and on the kind of your application. If you really have an &quot;endless&quot; == almost infinite amount of content, what you can do is just provide a &quot;window&quot; on the data that is held on the server, the same way any twitter client does by showing only the latest tweets and by performing a new get whenever you approach the end of the list. If, on the other hand, you have a HUGE amount of content you always want to be synched on your device, this is a more complex topic to discuss. The &quot;easiest&quot; way would be letting the remote server be the master of your data, and perform a full delete before you download all the new data. From that, several optimizations can be implemented. One can be having a timestamp related to the whole resource, and not performing the sync if your device already has the latest version. More complex optimizations are harder to implement by using a restful interface, because you can&#39;t tell it &quot;just send me the data changed since xxx or even the data deleted since xxx&quot; in order to allow you to apply those differences (at least, not that I am aware of). Sorry for the delay in the reply, but I have been a bit busy in the latest couple of days.<br /><br /></div>
</div>
<div class='comment'>
<div class='author'>Andy Res</div>
<div class='content'>
Thank you for the very useful info.<br /><br />What could you tell in regards to requests cancelation while using IntentService?<br /><br /><br /><br /></div>
</div>
<div class='comment'>
<div class='author'>Vang</div>
<div class='content'>
Hello, Federico. Could you explain how can we handle a case with endless list of content? As i understand we should download all content and find changes to persist. In general the main question is: How to maintain consistency beetween remote and local database? Thank you.</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contributing to Firefox for Android]]></title>
    <link href="http://fedepaol.github.io/blog/2013/07/29/contributing-to-firefox-for-android/"/>
    <updated>2013-07-29T00:00:00+02:00</updated>
    <id>http://fedepaol.github.io/blog/2013/07/29/contributing-to-firefox-for-android</id>
    <content type="html"><![CDATA[<div class='post'>
<br />In the past two / three years I have been (mostly) developing Android code, <a href="http://fedepaol.github.io/blog/2010/11/10/something-more-about-me">even before it was cool</a>(tm), as a way to do something different from what I do during my day time job.<br /><br />I wrote some <a href="https://play.google.com/store/search?q=federico+paolinelli&amp;c=apps">apps</a>, a couple of <a href="https://github.com/fedepaol">libraries</a>, and some 80% finished projects I really hope I will finish some day.<br /><br />Recently I thought that joining some big android related open source project could have been interesting, and I went for them.<br /><br /><br />That&#8217;s <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=731491">when</a> I found <a href="https://play.google.com/store/apps/details?id=org.mozilla.firefox">Firefox for Android</a> (code name fennec). There are several reasons why I choose it. It&#8217;s one of the most complex / active open source projects, I <a href="http://www.joshmatthews.net/fosdem/">spotted these slides</a> on my g+ stream and I decided to give it a spin.<br /><br /><a href="http://www.flickr.com/photos/tambako/5964400251/"><img src="http://farm7.staticflickr.com/6126/5964400251_8dd37a206a.jpg" /></a><br /><br /><span style="font-size: xx-small;">(Some rights reserved, cc licenze by &#8220;Tambako the Jaguar&#8221;)</span><br /><br /><br /> I must admit that I was not using fennec as my primary browser on android.<br /><br />This is my first experience in a (quite) big open source software project, and now I spend on fennec all of the free time I devote to developing (and I really like it).<br /><br /> <br /><h3> What was *totally* a surprise,</h3>&nbsp; is the fact that fennec is very far from a &#8220;plain android&#8221; project. When I first started, I (wrongly) expected to find an android project where I could reuse the stuff I knew from before, and I ended up working on a lot of javascript (which I never used before).  The project is various and I like the mixture of js, c++ and regular android, and I find this challenging, even if the code read / written ratio has become really huge. Hope this will get better with time.<br /><br /><br /><br /><h3> Working on it is harder than a regular android project.</h3>&nbsp; Forget intellij, eclipse or android studio. Forget debugging, or at least expect attaching a command line debugger to your code to be tricky. Slow build time (a full build takes something like 2 hour and half on my laptop).<br />Incremental builds time and upload to the device may take up to 2-3 minutes. I got back to the really old times when I wrote most of my code using vim and figuring out what was happening through logs.<br /><br /><br /><h3> You can get a lot of help from the mobile team,</h3>&nbsp; but you need to ask. A lot. Think of your average day. A lot of work to be done. Bugs coming, code to be written. Now think about some guy, who never wrote a line of code on the project you are working on, coming and asking some dumb or obvious questions. You are that guy.<br />That&#8217;s what must be their point of view (hope I am making less dumb questions). But they are helpful, even on monday mornings. You just have to ping <a href="https://wiki.mozilla.org/IRC">them on irc.</a><br /><br /><br /><h3> Did I say it is hard at first?</h3>&nbsp; The <a href="http://www.joshmatthews.net/bugsahoy/?mobile=1">bugs ahoy page</a> makes it quite easy to find a bug to start with, and the <a href="https://wiki.mozilla.org/Mobile/Fennec/Android">build instructions</a> are dumb proof. But then, it feels like being thrown in the middle of the jungle with a pocket knife. A huge codebase, xul interfaces, javascript, C++ code, Xpcom interfaces, no idea of which function is calling what. <br />The documentation is there, but it&#8217;s hard to figure out where to start from.<br />But if you are not worried about pinging and pinging people on irc, you will be given all the answers you need in order to get better and go ahead, and you will learn about all the tools at your disposal that help a distributed team to work better, such as <a href="http://mxr.mozilla.org/">mxr</a>, <a href="http://pastebin.mozilla.org/">pastebin</a> and <a href="https://etherpad.mozilla.org/">mopad</a>, or <a href="https://developer.mozilla.org/en-US/docs/Developer_Guide/How_to_Submit_a_Patch">how to submit a patch</a>&nbsp;using <a href="https://developer.mozilla.org/en-US/docs/Mercurial_Queues">hg queues</a>.<br /><br /><br /><h3> Is it worth it?</h3><b>&nbsp; Definetely</b>. As I wrote before, I am currently spending all the spare time I devote to side projects writing code for Fennec. Or I should say, reading a lot of code and writing some code. The &#8220;aha&#8221; moment when you realize that you understand how things work after grepping and digging into interfaces and callbacks has no price and it&#8217;s something I haven&#8217;t experienced for a long time.<br />Moreover, it&#8217;s exciting to interact with the mobile team, they all are passionate about what they are doing and very capable, not to mention that you will be forced to produce high quality code in order to pass the reviews.<br /><b>&nbsp; Finally</b>, the fact that you are contributing something bigger than that <a href="https://play.google.com/store/apps/details?id=com.whiterabbit.pastimer.lite">pasta cooking timer app</a> , and that your code will run in the hands of a lot of users is huge. I am not an opensource software integralist, despite having written a decent amount of it, but the <b>freedom message shared by the mozilla foundation is something it feels nice to be part of.</b><br /><br /><br /> <br /> Not to mention the tshirt I received and the &#8221;<a href="https://badges.mozilla.org/en-US/badges/badge/Friends-of-the-Mobile-Team/awards/1002">friend of mobile team</a>&#8221; badge I was awarded :-)<br /><br /><a href="http://1.bp.blogspot.com/-Qrsy0iSfC-w/UfbaCd153iI/AAAAAAAAMCA/iW7Pa0xXMFI/s1600/IMG_20130729_224220.jpg"><img border="0" src="http://1.bp.blogspot.com/-Qrsy0iSfC-w/UfbaCd153iI/AAAAAAAAMCA/iW7Pa0xXMFI/s320/IMG_20130729_224220.jpg" /></a><br /><br /><br /><br /><br /></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
Thanks mrlachatte. Did not realize that my first contribution was getting live until now!</div>
</div>
<div class='comment'>
<div class='author'>mrlachatte</div>
<div class='content'>
It&#39;s FF 23 release day, and I saw your name in the list on https://blog.mozilla.org/community/2013/08/05/firefox-23-new-contributors/. Congratulations on having your first contribution be released to our many users!</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostMan (RingsTwice) Reloaded - Android Rest and Oauth Make Easy(er)]]></title>
    <link href="http://fedepaol.github.io/blog/2013/03/06/postman-ringstwice-reloaded-android/"/>
    <updated>2013-03-06T00:00:00+01:00</updated>
    <id>http://fedepaol.github.io/blog/2013/03/06/postman-ringstwice-reloaded-android</id>
    <content type="html"><![CDATA[<div class='post'>
<h3><span style="font-size: large;"><br /></span></h3><h3><span style="font-size: large;">Android and Rest</span></h3><div><span style="font-size: large;"><br /></span></div><div><span style="font-size: large;"><br /></span></div>My <a href="https://github.com/fedepaol/PostmanLib--Rings-Twice--Android">PostManLib android library</a> had a quite troubled genesis. Some infos can be found in this <a href="http://fedepaol.github.io/blog/2012/01/30/postmanlib-android-and-rest-web">old post</a>&nbsp;, but bear in mind that I only kept the skeleton of what I wrote at that time (which, by the way, was inspired by&nbsp;<a href="http://www.youtube.com/watch?v=xHXn3Kg2IQE">this</a>&nbsp;talk).<br /><br />The api was (to be kind) a bit clunky, and I recently chose to rewrite / finish it. Apart from its clunkyness, one thing was missing:<br /><br /><h3>OAuth Authentication</h3><div>OAuth authentication is quite common for android apps, since it is a widely supported authentication system. Looking for &#8220;inspiration&#8221; I came across&nbsp;<a href="https://github.com/fernandezpablo85/scribe-java">https://github.com/fernandezpablo85/scribe-java</a>&nbsp;which not only provides oauth out of the box, but already provides a good and well tested abstraction for http rest interactions. I then chose not to reinvent the wheel and to delegate oauth and http interaction entirely to scribe.</div><div><br /></div><h3>Why asynchronous rest calls in android are important:</h3><div><br /></div><div>In android, performing time consuming work in the ui thread may result in ANR errors, and obviously rest calls belong to this category. What postmanlib does is to decouple the requests and execute them inside intent services, providing a way to get notified of calls results.</div><h3></h3><h3>What postmanlib offers:</h3><div><br /></div><div><ul><li>OAuth login using a webview hosted inside a fragment dialog. Every interaction is performed asynchronously. Just call registerOAuthService<span style="color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: 19px;">&nbsp;</span>and the registration will happen</li><li>Asynchronous rest calls (oauth-ed or not) performed inside an intent service</li><li>Multiple api handling - token storage</li></ul><div><br /></div></div><div>Given that the interaction is performed inside an intent service, all the well known problems related to asynctasks are avoided.&nbsp;</div><div><br /></div><h3></h3><h3>What postmanlib does not offer:</h3><div><br /></div><div><ul><li>Storage: the data received in background can be stored in the user&#8217;s favorite storage. I strongly suggest to use a content provider, using my automatic <a href="blog/2012/11/11/android-content-providers-generator.html">content provider generator</a></li><li>Parsing: the plain text received must be interpreted. There is plenty of json / xml parsing library, just pick one</li></ul></div><div><br /></div><h2><span style="font-weight: normal;"><span style="font-size: x-large;"><br /></span></span></h2><h2><span style="font-weight: normal;"><span style="font-size: x-large;"><br /></span></span></h2><h2><span style="font-weight: normal;"><span style="font-size: x-large;">Library Architecture</span></span></h2><div><span style="font-weight: normal;"><br /></span></div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="https://raw.github.com/fedepaol/PostmanLib--Rings-Twice--Android/master/images/postman.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="400" src="https://raw.github.com/fedepaol/PostmanLib--Rings-Twice--Android/master/images/postman.png" width="352" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">A singleton object collects the requests to perform the rest calls in background.&nbsp;</div><div class="separator" style="clear: both; text-align: left;">The requests are parcelable objects that are passed inside an intent to the intent services. Using the command pattern along with the strategy pattern to implement the interaction resulted in a much cleaner api (more details about the structure can be found in the <a href="https://github.com/fedepaol/PostmanLib--Rings-Twice--Android">git repository</a>).</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">All the client application has to do is to perform oauth requests is to create and register a oauthservice builder.&nbsp;</div><div class="separator" style="clear: both; text-align: left;">I had to wrap the original scribe oauth service builder because I had to store all the tokens in order to restore them whenever the singleton is garbage collected.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">After performing the registration (which is done using a OAuthHelper class), a registered api can be used to sign any request sent. The only difference between oauth-ed and plain requests is that in the first case we specify a signer.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><h2></h2><h2 id="yui_3_7_3_1_1362605099013_692" style="background-color: #dedede; color: #222222; font-family: 'Bree Serif'; font-size: 26px; font-weight: 400; line-height: 28px; margin: 1.5em 0px; text-transform: capitalize;">TL;DR</h2><div><br /></div><div class="p4" style="background-color: #dedede; color: #2b2b2b; font-family: 'Source Sans Pro'; font-size: 22px; font-weight: normal; line-height: 33px; margin-bottom: 1.5em;"><strong style="margin-bottom: 0px; margin-top: 0px;"></strong></div><div class="separator" style="clear: both; text-align: left;">I really like the way the library grew up (not just because I wrote it :-) ). Scribe performs an excellent job in abstracting oauth registration and http interaction, so I could focus on asynchronous interaction with it.</div><div class="separator" style="clear: both; text-align: left;">The registration process is more than trivial, and rest requests are strongly decoupled from the activities.</div><div class="separator" style="clear: both; text-align: left;">As told earlier, it can be found here:&nbsp;<a href="https://github.com/fedepaol/PostmanLib--Rings-Twice--Android">https://github.com/fedepaol/PostmanLib&#8211;Rings-Twice&#8211;Android</a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">I think this library might be of some help to anybody who wants to interact with webservices and want to go beyond the too often badly used async tasks.</div><div class="separator" style="clear: both; text-align: left;">A real world sample (with no oauth, sorry) can be found in my <a href="https://github.com/fedepaol/AndAppennino">AndAppennino application</a>.&nbsp;</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div><br /></div></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
Grazie mille :-), cerco di darmi da fare come riesco, troppo buono a mettermi sullo stesso piano di Gabriele.. <br />Ho visto la pull request, appena ho un attimo ci faccio un giro e la mergio, adesso sono un po&#39; preso dall&#39;arrivo di una figlia :-)<br /><br />Grazie ancora per le (troppo) buone parole.</div>
</div>
<div class='comment'>
<div class='author'>Alessandro Bellesia</div>
<div class='content'>
Ciao Federico! Innanzitutto ti faccio i miei complimenti per l&#39;ottimo progetto. Si tratta di una soluzione davvero molto completa e comoda perché già pronta out-of-the-box. <br /><br />Grazie a te ed a Gabriele Mariotti praticamente l&#39;Android Weekly è tutta italiana! Sono davvero molto contento. <br /><br />Giocando un po con la libreria mi sono accorto che la funzione isServiceEnabled nel ServerInteractionHelper non funziona nel modo corretto. I numero di Services infatti risulta sempre 4 a prescindere dai servizi effettivamente impostati nel manifest dell&#39;app.<br /><br />Mi sono permesso di fare una piccola pull request su GitHub con la mia proposta di correzione!<br /><br />Grazie mille ed ancora complimenti!<br /><br />Saluti,<br />Alessandro.<br /><br /><br /><br /></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DroidAlone - Reloaded]]></title>
    <link href="http://fedepaol.github.io/blog/2012/11/25/droidalone-reloaded/"/>
    <updated>2012-11-25T00:00:00+01:00</updated>
    <id>http://fedepaol.github.io/blog/2012/11/25/droidalone-reloaded</id>
    <content type="html"><![CDATA[<div class='post'>
Whenever I speak with another android developer, the occasional chat goes to &#8220;what did you develop?&#8221; question.<br />Last time it happened at droidcon uk, and for the first time I felt something wasn&#8217;t completely right when I showed my DroidAlone app.<br /><br />DroidAlone is a useful app (so they say) that comes into play whenever you forget your phone at home. With a simple sms protected by a password choosen by the user, it can be activated. From that moment, it will start notifying you of any missed calls and sms. It also ships a lot of other nice features, such as phone location retrieval and auto reply via sms (if you want to inform the caller that he can reach you to another number).<br />The full description of DroidAlone can be found at&nbsp;<a href="http://www.fedepaolapps.com/app/droidalone/">Missed Calls for Android</a>&nbsp;.<br /><br />Everything seems to work well, it has a lot of good reviews and the few users are happy.<br />Except one thing. It looks (looked) like this:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://www.fedepaolapps.com/wp-content/uploads/2012/09/main_screen1.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://www.fedepaolapps.com/wp-content/uploads/2012/09/main_screen1.jpg" width="213" /></a></div><a href="http://www.blogger.com/"></a><span id="goog_1451563458"></span><span id="goog_1451563459"></span><br />It also had another view with the list of events. The other developer&#8217;s reaction was &#8220;ugh&#8221;. And then I realized that I can&#8217;t keep producing new stuff ignoring what I have around, especially if this is the case of the only app I manage to sell a bit.<br /><br />So, when I got home I decided to change the ui &#8220;just to make it more pleasant&#8221;. &nbsp;Then I opened the code, and I realized that my two year&#8217;s old code needed a bit more than a refresh.<br /><br />Here what was wrong:<br /><br /><ul><li>it used tabactivity, which is very old fashioned. I decided to add the actionbar.</li><li>from the event list view, you had to click on the item to see the details of the event. The details where shown into a dialog. Ugh (again). In the new version I wanted all the details to be visible since they are not so long.</li><li>All the properties of the views in the layouts where explicit. No styles anywhere. The color resources where &#8220;background_color&#8221;, or &#8220;title_color&#8221; instead of some name that remind you the color. I had to put a heavy hand on that.</li><li>I tried to use gridlayout a lot since it seem to be the more efficient way to dispose a layout.</li><li>There was no empty list information.</li><li>A lot of calls where deprecated. I switched to the most modern versions.</li><li>All the data was contained in a sqllite storage without using a content provider. I switched to using a content provider and a cursorloader, which ended up in a more compact code. I didn&#8217;t need anymore to use a broadcast to notify the ui that the data was changed.</li><li>DroidAlone uses broadcast receivers to be notified of incoming calls / sms. Even tough the sms receiver must be enabled because an activation sms can be received at anytime, the call receiver is needed only when the app is active. I then used the package manager to disable it when not needed.</li><li>I wanted to refactor a lot of code. A lot of brackets where on the new line instead of the same line of the method (a la C), and it bothered me a lot. I also trusted lint and changed a lot here and there.&nbsp;</li></ul><div><br /></div><div>Other than these things, I redraw (by my self) a lot of the assets using inkscape. Because I soon got bored to export the resources in 4 different resolutions folders, I wrote a simple python script to do that for me. You can find it <a href="https://gist.github.com/4127778">here</a>&nbsp;.</div><div><br /></div><div>More than that, I got REALLY REALLY bored while writing the content provider, so I ended up writing another python script to automatically generate the content provider for me, as described in my previous <a href="http://fedepaol.github.io/blog/2012/11/11/android-content-providers-generator">post</a>. You can find the <a href="https://github.com/fedepaol/Android-sql-lite-helper">android content provider generator here</a>.&nbsp;</div><div><br /></div><div>Finally, I switched the project to maven because I am getting used to that solution, especially in case I want to add robolectric tests and keep working with intellij.</div><div><br /></div><div>The new version of the app hasn&#8217;t been released yet (I want to have it running for a while on my phone before releasing it, just to be sure that I didn&#8217;t break anything).</div><div><br /></div><div>This is how the new version will look like&nbsp;</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-KFbMTLsxs5w/ULKCXaGOnLI/AAAAAAAAJS4/CVeElRWX6wA/s1600/screen3.tiff" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-KFbMTLsxs5w/ULKCXaGOnLI/AAAAAAAAJS4/CVeElRWX6wA/s320/screen3.tiff" width="194" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">So, this is how a &#8220;little ui polishing&#8221; ended lasting more than two weeks (of my spare time). I am also glad that I think my old code is not that good. I like to think that I am better than two years ago.</div><div><br /></div><br /><div class="separator" style="clear: both; text-align: center;"><br /></div><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Content Providers Generator]]></title>
    <link href="http://fedepaol.github.io/blog/2012/11/11/android-content-providers-generator/"/>
    <updated>2012-11-11T00:00:00+01:00</updated>
    <id>http://fedepaol.github.io/blog/2012/11/11/android-content-providers-generator</id>
    <content type="html"><![CDATA[<div class='post'>
During the refactoring of my two years old app DroidAlone, I decided to try to access to the storage through a ContentProvider.<br /><br />Even if the official documentation warns that there is no need to use content providers if your app does not want to export it&#8217;s data against other apps, there are a bunch of advantages in using a content provider in your app.<br /><br />The main and more obvious advantage is that you can use a Loader with your data. Using loaders relieve you from managing the cursor, forgetting open cursors here and there and most of all, makes a lot easier for your ui to react to changes in your model. Well, more than easier, you don&#8217;t have to do anything.<br /><br />However, I am not writing this post to describe how to interact with an android content provider, nor how to implement a content provider. There are a lot of content provider tutorials out there that probably can explain how them work better than I could possibly ever do (and in a better English).<br /><br />I am writing this post because while writing the content provider, I got bored.<br />It&#8217;s a lot of code, always the same, that cannot be avoided, and you don&#8217;t have to add any value to it. The best thing you can do is not getting distracted and write it with no errors. And it&#8217;s loong (ok, not that long).<br /><br />Given the &#8220;boilerplateness&#8221; of this problem, I thought I could take off some dust from my old <a href="http://fedepaol.github.io/blog/2010/11/18/my-sqllite-helper-builder">SqliteHelper builder script</a>&nbsp;and maybe make it able to generate the content provider class for me. And that&#8217;s what I did.<br /><br /><h3>Android Content Provider Generator</h3><br /><a href="https://github.com/fedepaol/Android-sql-lite-helper">https://github.com/fedepaol/Android-sql-lite-helper</a><br /><br />I added a couple of options to it, and now it can generate automatically for you (no more cut/paste, no more forgotten columns) the content provider class AND a client class with a bunch of methods you can use to add / update / delete / query your data.<br />A sample of the generated code is already included in the beta of my app and it seems to work properly.<br /><br />I won&#8217;t write any instructions or examples here, they are already in the github repo.<br /><b>All you need to know is that with a 10 rows text file that describes your data, you can generate the whole content provider</b>.<br /><br />As <a href="https://plus.google.com/105096943850026101634/posts/RTbp2zVPZQq">I wrote on G+</a>, it&#8217;s certainly not the most elegant piece of python I wrote, but it makes it&#8217;s job.<br /><br /><br /><br />If you liked this post (or my script), consider following me on twitter @fedepaol<br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DroidconUk 2012]]></title>
    <link href="http://fedepaol.github.io/blog/2012/10/29/droidconuk-2012/"/>
    <updated>2012-10-29T00:00:00+01:00</updated>
    <id>http://fedepaol.github.io/blog/2012/10/29/droidconuk-2012</id>
    <content type="html"><![CDATA[<div class='post'>
Here I am, back again from my third DroidconUk experience.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-dfNEw8CwymY/UI7dRBZVlzI/AAAAAAAAJBw/JqUhyGTyHZE/s1600/IMG_20121029_204517.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="http://1.bp.blogspot.com/-dfNEw8CwymY/UI7dRBZVlzI/AAAAAAAAJBw/JqUhyGTyHZE/s320/IMG_20121029_204517.jpg" width="320" /></a></div><br /><br />I can still remember explaining to my non tech friends what Android was the evening of the 1st droidcon, and since then it became a sort of ritual, a couple of days when I can take some rest from my day time job and take part to the community of some of the best android developers coming from all over the Europe.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-YsYHqWhHMHk/UI7eDIWeCqI/AAAAAAAAJCA/b3Dv80SwVLk/s1600/IMG_20121026_190855.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="http://1.bp.blogspot.com/-YsYHqWhHMHk/UI7eDIWeCqI/AAAAAAAAJCA/b3Dv80SwVLk/s320/IMG_20121026_190855.jpg" width="320" /></a></div><br /><br /><br />It&#8217;s an (almost) cheap to flight from Pisa (IT) where I live to London, and I can always count on my architect friends from <a href="http://www.marcelmauer.eu/">Marcel Mauer</a> for accommodation.<br /><br /><br />My overall impression is that droidcon is getting better and better. It&#8217;s growing as much as the Android &nbsp;platform itself, and despite all the interesting talks the better part is still the people you can meet there BETWEEN the talks. Even if you are as shy and sociopath as I am.<br /><br /><br />Most of the talks where very instructive and I heard about a lot of new stuff I can reuse on my side projects.<br /><br /><br /><br />Here I will put a short list of what are the things I liked most (as a kind reminder for me but also for any occasional reader that lands on this page by chance).<br /><br /><br /><br /><h2>The talks:</h2><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-cJwI92KmcAA/UI7hSI-I9wI/AAAAAAAAJDY/PcojASjug88/s1600/IMG_20121025_142744.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="http://1.bp.blogspot.com/-cJwI92KmcAA/UI7hSI-I9wI/AAAAAAAAJDY/PcojASjug88/s320/IMG_20121025_142744.jpg" width="320" /></a></div><div><br /></div><div class="separator" style="clear: both; text-align: center;"></div><div><br /></div><div>I am not following a proper order if not the chronological one. I really enjoyed all the talks.</div><h3>The keynotes:</h3>It&#8217;s official. They are putting Android everywhere. Three keynotes for three Android related product which where not phones nor tablets.<br />- Ouya, the famous kickstarter funded android gaming console<br />- Vendscreen, an android based vending machine (!)<br />- Parrot android based car stereos.<br /><br /><h3>Building songkick for Android&nbsp;(<a href="https://speakerdeck.com/jdamcd/building-songkick-on-android">slides</a>):</h3>Askay and Jamie from Novoda show their professional approach to build the songkick app. A lot of interesting tips and best practices from them. Really liked the &#8220;writing good code is always faster than writing bad code&#8221; approach.<br /><br /><h3>Overcoming device fragmentation:</h3>Jan and Jon from SoundCloud had a bad time dealing with sound infrastructure in Android, especially from a multi device perspective.<br />It&#8217;s not an aspect of the platform I have never addressed that much, but I really enjoyed their story about going from the simple system call up to get the hands dirty with bringing on board ogg library through ndk. I also liked the fact that at first they tried to deal with java version, because it&#8217;s something I would do as well.<br /><br /><h3>The fly in app menu for designers and developers (<a href="https://speakerdeck.com/cyrilmottier/the-fly-in-app-menu-for-designers-and-developers">slides</a>):</h3>Cyril Mottier (&nbsp;we may remember him for Greendroid) made a gorgeous presentation on this navigation pattern which is getting more and more popular (but don&#8217;t use it just because it&#8217;s à la mode).<br />The presentation was a proper walkthrough on why and when one should use the new pattern (and when one shouldn&#8217;t). During the talk he gave a lot of tips on how the correct user experience should be. Very inspiring.<br />If you want to bring this pattern in your app and you can&#8217;t affort to develop it &#8220;in house&#8221; as Cyril did, there are a couple of libraries that implement it for us:<br /><a href="https://github.com/eddieringle/android-undergarment">https://github.com/eddieringle/android-undergarment</a><br /><a href="https://github.com/jfeinstein10/SlidingMenu">https://github.com/jfeinstein10/SlidingMenu</a><br /><a href="https://github.com/SimonVT/android-menudrawer">https://github.com/SimonVT/android-menudrawer</a><br /><br /><br /><h3>Beaming data to devices with nfc (<a href="http://www.slideshare.net/commonsguy/beaming-data-to-devices-with-nfc">slides</a>):</h3>Mark Murphy from CommonsWare introduced what (and how) can be done with an nfc enabled phone through a royalty free spy story. Interesting and funny as always, the talk of Mark is worth the ticket by itself (well, his talk and the free beers I had).<br />It&#8217;s a good starting point when I will look into nfc, which might be very soon.<br /><br /><br /><h3>Fast, user friendly and power efficient network communication with android (<a href="http://developer.sonymobile.com/downloads/documentation/fast-user-friendly-and-power-efficient-network-communication-on-android/">slides</a>):&nbsp;</h3>Another series of super tips from Erik Hellman on how you should perform networking in a proper manner.<br />Still, stuff I read here and there but still useful.<br />He also mentioned <a href="http://netty.io/">netty.io</a> library, which is something I should definitely check, since my current project involves plain socket operation and I implemented it my self (the android way).<br /><br /><br /><h3>Introduction to Google Tv (<a href="http://www.slideshare.net/OpenWorldForum/owf12paug-conf-days-google-tv-part-1-introduction-matt-gaunt-advocate-at-google">slides</a>):</h3><div>Google Tv looks to be the next big thing. I have never dig into the docs but it really looks like a new whole world. Apart from the different challenges that we can have developing a tv ui, I really like the idea of having it interact with our personal devices.</div><br /><br /><br /><h2>The libraries:</h2><br /><h3>Polaris (<a href="https://github.com/cyrilmottier/Polaris">link</a>):</h3><a href="http://android.cyrilmottier.com/">Cyril Mottier</a>&nbsp;(yes, still him) delighted us with Polaris, his map library to enhance the poor experience available from standard map apis.<br /><br /><h3>RoboSpice (<a href="https://github.com/octo-online/robospice">link</a>):</h3><div>The french guys from Octo (sorry I can&#8217;t remember the name of the speaker) presented their awesome RoboSpice library, a library to perform asynchronous jobs (and a lot more) on steroids.&nbsp;</div><div>I was really interested in this talk because of my previous attempt to build something (barely) similar with&nbsp;<a href="http://fedepaol.github.io/blog/2012/01/postmanlib-android-and-rest-web.html">Postman Lib</a>&nbsp;. Unfortunately I never had time to polish it and it&#8217;s still an unfinished product. Moreover, the guys from Octo made a better job under every aspect of object reusing and performance, dealing with issues I would have never fix even if I took the library to a decent state. I am quite curious to dig into their code just for the fun of it :-)</div><div><br /></div><h3>OpenCv:</h3><div>Erik Hellman from Sony introduced how opencv library for computer vision can be (almost) easily integrated into an android app. Still, something I would always loved to play with, maybe I will if I get some extra spare time.</div><br /><br /><h3>NetMera (<a href="http://www.netmera.com/pages/web/home">link</a>):</h3>Well, this is not a real library, but it&#8217;s a brand new concept (at least, new to me) for a platform as an sdk. &nbsp;It was introduced by Friedger Muffke during his talk&nbsp;<a href="https://docs.google.com/presentation/d/1GjAWqrB-OrEtsoudPLMq1KUEwjSuPygHmNBjv1FEq0A/edit">&#8220;Serverless Android Applications&#8221;</a>. They provide a full remote backend without having you bother at all for it. Sounds like the holy grail for&nbsp;<i>developers with no time(tm)&nbsp;</i>but I don&#8217;t like the idea of having my code bound to a specific service.<br /><br /><br /><h2>Talks I missed:</h2><div>I was told that this talks were excellent:</div><div>- <a href="http://prezi.com/fh2uslbr1xs3/the-fragment-transition/">The fragment transition</a>&nbsp;by Corey Latislaw</div><div>- <a href="https://docs.google.com/presentation/d/1OcGVS5bci9jaYiI7uvXFf9asj5TS4xZa72LX-i8lEcs/present#slide=id.p25">Writing games for an Android video game console</a>&nbsp;by Al Sutton</div><div>- Proguard by Eric Lafortune</div><div>-&nbsp;Dynamic animations with custom views by Anders Ericsson</div><br /><br /><h2>Epilogue:</h2>I had a great time at droidcon, I really enjoyed it under every aspect (even though I suspect I still have to digest an hotdog of two from the dinner of Thursday). It really boosted my hunger for learning new things. As an immediate effect I decided to polish my old apps, those I developed three years ago which now look ugly and old (the code as well).<br /><br />See you next year, DroidConUk!<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-yzyd64vYHrA/UI7eL43qhqI/AAAAAAAAJCI/Ua-AJTnGAu8/s1600/IMG_20121027_072842.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/-yzyd64vYHrA/UI7eL43qhqI/AAAAAAAAJCI/Ua-AJTnGAu8/s320/IMG_20121027_072842.jpg" width="240" /></a></div><span style="font-size: x-small;">(This picture was taken at Liverpool Street while waiting for the bus to Stanstead Airport). Way too early for a Saturday morning.</span><br /><br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gridlayout Support Library With Maven]]></title>
    <link href="http://fedepaol.github.io/blog/2012/09/15/gridlayout-support-library-with-maven/"/>
    <updated>2012-09-15T00:00:00+02:00</updated>
    <id>http://fedepaol.github.io/blog/2012/09/15/gridlayout-support-library-with-maven</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><span style="font-size: x-large;">EDIT 17/10/2012:</span><br />Gridlayout support is now working natively with maven android deployer. I strongly suggest to use it instead of my method.<br /><span style="font-size: x-large;"><br /></span><span style="font-size: x-large;">&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</span><br /><span style="font-size: x-large;"><br /></span><br /><a href="http://developer.android.com/reference/android/widget/GridLayout.html">Gridlayout</a> has been introduced since api level 14, and is being suggested layout as a more efficient alternative over nested linear layouts and relative layout.<br /><br />It has also been recently added as part of the android support library, in order to have it available on older devices.<br /><br />Trying to use it in a maven setup is a bit tricky.<br />At the time of writing, the version added by <a href="https://github.com/mosabua/maven-android-sdk-deployer">maven android deployer</a> won&#8217;t work because of this <a href="https://github.com/mosabua/maven-android-sdk-deployer/issues/50">issue</a>&nbsp;.<br />The problem is, you can&#8217;t just add the jar because the library is intended to be an android project library, which means that brings with itself a couple of resources.<br /><br /><br />The error you might get is<br /><br /><b><span style="font-size: large;">java.lang.NoClassDefFoundError: android/support/v7/gridlayout/R$dimen</span></b><br /><br />I don&#8217;t know if the following is the best &#8220;mavenic&#8221; way to solve the problem, however it worked for me and I am sharing it here.<br /><br />What you need to do is to build your own apk lib to add to your maven repo to link against.<br /><br /><h3>Step 1: building an apk lib</h3><div>The information you can find on android maven plugin <a href="http://code.google.com/p/maven-android-plugin/wiki/ApkLib">website</a>&nbsp;wasn&#8217;t very clear to me. However they ship a couple of <a href="https://github.com/jayway/maven-android-plugin-samples/archives/stable">examples</a> you can take inspiration from.</div><div><br /></div><div><br /></div><div>Assuming that you have a proper ANDROID_HOME variable set up, and you already used maven android deployer to have a working setup, the first thing you have to do is to download the support library.&nbsp;</div><div>You will find it under $ANDROID_HOME/extras/android/support/v7/gridlayout</div><div><br /></div><div>Make your own copy somewhere else in your hard disk.</div><div><br /></div><div><br /></div><div>Now copy my pom.xml file:</div><!-- HTML generated using hilite.me --><br /><div style="background: #ffffff; background: white; border-width: .1em .1em .1em .8em; border: solid gray; color: black; overflow: auto; padding: .2em .6em; width: auto;"><pre style="line-height: 125%; margin: 0;"><span style="color: #507090;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br /><span style="color: #007000;">&lt;project</span> <span style="color: #0000c0;">xmlns=</span><span style="background-color: #fff0f0;">"http://maven.apache.org/POM/4.0.0"</span> <span style="color: #0000c0;">xmlns:xsi=</span><span style="background-color: #fff0f0;">"http://www.w3.org/2001/XMLSchema-instance"</span><br />         <span style="color: #0000c0;">xsi:schemaLocation=</span><span style="background-color: #fff0f0;">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span><span style="color: #007000;">&gt;</span><br />    <span style="color: #007000;">&lt;modelVersion&gt;</span>4.0.0<span style="color: #007000;">&lt;/modelVersion&gt;</span><br /><br /><br />    <span style="color: #007000;">&lt;version&gt;</span>1.0.0-SNAPSHOT<span style="color: #007000;">&lt;/version&gt;</span><br />    <span style="color: #007000;">&lt;groupId&gt;</span>com.support.gridlayout<span style="color: #007000;">&lt;/groupId&gt;</span><br />    <span style="color: #007000;">&lt;artifactId&gt;</span>gridlayout_compat<span style="color: #007000;">&lt;/artifactId&gt;</span><br />    <span style="color: #007000;">&lt;packaging&gt;</span>apklib<span style="color: #007000;">&lt;/packaging&gt;</span><br />    <span style="color: #007000;">&lt;name&gt;</span>Gridlayout compatibility library<span style="color: #007000;">&lt;/name&gt;</span><br /><br />    <span style="color: #007000;">&lt;dependencies&gt;</span><br />        <span style="color: #007000;">&lt;dependency&gt;</span><br />            <span style="color: #007000;">&lt;groupId&gt;</span>android<span style="color: #007000;">&lt;/groupId&gt;</span><br />            <span style="color: #007000;">&lt;artifactId&gt;</span>android<span style="color: #007000;">&lt;/artifactId&gt;</span><br />            <span style="color: #007000;">&lt;scope&gt;</span>provided<span style="color: #007000;">&lt;/scope&gt;</span><br />            <span style="color: #007000;">&lt;version&gt;</span>4.0.3_r3<span style="color: #007000;">&lt;/version&gt;</span><br />        <span style="color: #007000;">&lt;/dependency&gt;</span><br /><br />        <span style="color: #007000;">&lt;dependency&gt;</span><br />            <span style="color: #007000;">&lt;groupId&gt;</span>com.grid<span style="color: #007000;">&lt;/groupId&gt;</span><br />            <span style="color: #007000;">&lt;artifactId&gt;</span>gridlayout<span style="color: #007000;">&lt;/artifactId&gt;</span><br />            <span style="color: #007000;">&lt;version&gt;</span>1.0<span style="color: #007000;">&lt;/version&gt;</span><br />        <span style="color: #007000;">&lt;/dependency&gt;</span><br />    <span style="color: #007000;">&lt;/dependencies&gt;</span><br /><br />    <span style="color: #007000;">&lt;build&gt;</span><br />        <span style="color: #007000;">&lt;plugins&gt;</span><br />            <span style="color: #007000;">&lt;plugin&gt;</span><br />                <span style="color: #007000;">&lt;groupId&gt;</span>com.jayway.maven.plugins.android.generation2<span style="color: #007000;">&lt;/groupId&gt;</span><br />                <span style="color: #007000;">&lt;version&gt;</span>3.1.1<span style="color: #007000;">&lt;/version&gt;</span><br />                <span style="color: #007000;">&lt;artifactId&gt;</span>android-maven-plugin<span style="color: #007000;">&lt;/artifactId&gt;</span><br />                <span style="color: #007000;">&lt;extensions&gt;</span>true<span style="color: #007000;">&lt;/extensions&gt;</span><br />            <span style="color: #007000;">&lt;/plugin&gt;</span><br />        <span style="color: #007000;">&lt;/plugins&gt;</span><br />    <span style="color: #007000;">&lt;/build&gt;</span><br />    <span style="color: #007000;">&lt;repositories&gt;</span><br />        <span style="color: #007000;">&lt;repository&gt;</span><br />            <span style="color: #007000;">&lt;id&gt;</span>repo<span style="color: #007000;">&lt;/id&gt;</span><br />            <span style="color: #007000;">&lt;releases&gt;</span><br />                <span style="color: #007000;">&lt;enabled&gt;</span>true<span style="color: #007000;">&lt;/enabled&gt;</span><br />                <span style="color: #007000;">&lt;checksumPolicy&gt;</span>ignore<span style="color: #007000;">&lt;/checksumPolicy&gt;</span><br />            <span style="color: #007000;">&lt;/releases&gt;</span><br />            <span style="color: #007000;">&lt;snapshots&gt;</span><br />                <span style="color: #007000;">&lt;enabled&gt;</span>false<span style="color: #007000;">&lt;/enabled&gt;</span><br />            <span style="color: #007000;">&lt;/snapshots&gt;</span><br />            <span style="color: #007000;">&lt;url&gt;</span>file://${project.basedir}/repo<span style="color: #007000;">&lt;/url&gt;</span><br />        <span style="color: #007000;">&lt;/repository&gt;</span><br />    <span style="color: #007000;">&lt;/repositories&gt;</span><br /><br /><span style="color: #007000;">&lt;/project&gt;</span><br /></pre></div><div><br /></div><div><br /></div><div>You will have another thing to do. Since you cannot include jar files directly but you have to specify them as depedencies, you can:</div><div><ul><li>refer to the jar provided by maven android deployer</li><li>have a dependency pointing a local repo, as described <a href="http://stackoverflow.com/questions/364114/can-i-add-jars-to-maven-2-build-classpath-without-installing-them">here</a></li></ul><div><br /></div></div><div>I chose the second approach.<br /><br />As you can see in the lower part of the pom file, I add a local repository.<br />You need to put the jar file in that repository. As suggested by the stackoverflow answer, you can let maven build it for you with<br /><!-- HTML generated using hilite.me --><br /><div style="background: #ffffff; background: white; border-width: .1em .1em .1em .8em; border: solid gray; color: black; overflow: auto; padding: .2em .6em; width: auto;"><pre style="line-height: 125%; margin: 0;">mvn install:install-file -DlocalRepositoryPath=repo -DcreateChecksum=true -Dpackaging=jar -Dfile=libs/android-support-v7-gridlayout.jar -DgroupId=com.grid -DartifactId=gridlayout -Dversion=1.0<br /></pre></div><br /><h3>Step 2: Including the apklib to your project</h3><br />Now you have your apklib ready to use. You can add it as a dependency in the pom.xml of your app<br /><br /><!-- HTML generated using hilite.me --><br /><div style="background: #ffffff; background: white; border-width: .1em .1em .1em .8em; border: solid gray; color: black; overflow: auto; padding: .2em .6em; width: auto;"><pre style="line-height: 125%; margin: 0;">       <span style="color: #007000;">&lt;dependency&gt;</span><br />          <span style="color: #007000;">&lt;groupId&gt;</span>com.support.gridlayout<span style="color: #007000;">&lt;/groupId&gt;</span><br />          <span style="color: #007000;">&lt;artifactId&gt;</span>gridlayout_compat<span style="color: #007000;">&lt;/artifactId&gt;</span><br />          <span style="color: #007000;">&lt;version&gt;</span>1.0.0-SNAPSHOT<span style="color: #007000;">&lt;/version&gt;</span><br />          <span style="color: #007000;">&lt;type&gt;</span>apklib<span style="color: #007000;">&lt;/type&gt;</span><br />        <span style="color: #007000;">&lt;/dependency&gt;</span><br /></pre></div><br /><br /><br />This costed me a couple of sleepless nights figuring out why it was not working&#8230;<br /><br /><h3>Edit:</h3><div>As markus pointed out in his comment, I forgot the last trivial step which is to run</div><div><i>mvn install&nbsp;</i><br /><i><br /></i><i><br /></i><i><br /></i><i><br /></i></div><h4>Epilogue:</h4><div>Please read the README file included in the gridlayout support library BEFORE trying to use it. It will save you a bit of extra headache.</div><div><br /></div><br />If you liked this post, you might be interested in following me on twitter <a href="https://twitter.com/fedepaol">@fedepaol</a><br /><br /><br /><br /></div><div><br /></div></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Markus</div>
<div class='content'>
Last Step is mvn install.</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellij, Robolectric and Android]]></title>
    <link href="http://fedepaol.github.io/blog/2012/07/23/intellij-robolectric-and-android/"/>
    <updated>2012-07-23T00:00:00+02:00</updated>
    <id>http://fedepaol.github.io/blog/2012/07/23/intellij-robolectric-and-android</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br />I have been curious about intellij since droicon uk 2011, where I noticed that some of the speakers were using IntelliJ instead of eclipse.<br /><br />A <a href="https://plus.google.com/115995639636688350464/posts/CgPZkFGvbm3">post</a> from Richard Hyndman, who is a developer advocate from Google, was the final straw that pushed me to download IntelliJ and give it a try.<br /><br />The first thing an eclipse user will notice in intellij is how slick and fast compares to the behemoth which is eclipse. On the other hand, an you can feel a bit disoriented at first.<br /><br /><br />Setting up a new android project using IntelliJ is pretty straightforward. You can follow the nice tutorial from jetbrains website http://wiki.jetbrains.net/intellij/Android.<br />For this reason, I will not write about how to set up an Android project in intellij here.<br /><br /><br />What I am going to write about is how to setup an <b>android project with intellij and integrate robolectric</b> with it.<br /><br />I really like robolectric. It makes unit testing for android a lot faster as it would be on the emulator. What&#8217;s more, you can use mockito with it.<br />Mockito is a mocking framework that makes a lot easier to mock your java objects.<br />Mockito does not work with dalvik jvm, but robolectric makes your tests run on your pc&#8217;s jvm.<br /><br /><br />Despite robolectric provides instruction on how to setup an intellij project manually, I have tried that process a lot of times, carefully checking if I was missing a step.<br />However, I did not manage to get it working. The guys from Pivotal provide also an intellij starter project, which you can configure to point a git repository https://github.com/pivotal/AndroidIntelliJStarter<br /><br /><br />However, I was not either satisfied with this solution and, inspired by this <a href="https://groups.google.com/forum/?fromgroups#!topic/robolectric/QN6dskFjrHc">post</a>&nbsp;,&nbsp;I tried to setup a maven solution and to import it in intellij afterwards.<br /><br />This provides another great benefit, which is the fact that I can import the same project in my linux netbook without bothering for relative paths in eclipse projects.<br /><br />So, here are the steps I had to follow in order to get it working:<br /><br />- Install the android sdk. This is trivial, I assume you are comfortable with that<br />- Let the ANDROID_HOME environment variable point the path where you uncompressed the android sdk<br />- You need to have at least one version of the sdk installed, so if you haven&#8217;t yet, you should launch the sdk manager that is the &#8220;android&#8221; executable on ANDROID_HOME/tools/android. Install also the extras, such as the compatibility library, admob stuff and all the libraries you find at the bottom<br /><br /><br />- install the maven android sdk deployer you can find at <a href="https://github.com/mosabua/maven-android-sdk-deployer">https://github.com/mosabua/maven-android-sdk-deployer </a>and then install it.<br /><br />I read somewhere that you can get android jar without relying on it, but in any case, if you need google maps or other private apis like that you still need to use this tool.<br />&nbsp;I use the latest (almost) version which is 4.0.3, so I run mvn install -P 4.0.3<br /><br /><br />- Install maven android plugin. The easiest way is to use android archetypes from here:<br />https://github.com/akquinet/android-archetypes<br /><br /><br />Finally, you are now ready to generate your first maven android project:<br /><br /><br /><br /><br /><br />mvn archetype:generate \<br />&nbsp; -DarchetypeArtifactId=android-quickstart \<br />&nbsp; -DarchetypeGroupId=de.akquinet.android.archetypes \<br />&nbsp; -DarchetypeVersion=1.0.8 \<br />&nbsp; -DgroupId=your.company \<br />&nbsp; -DartifactId=my-android-application<br /><br /><br /><br />You <i>could</i> find an issue. &nbsp;Recently the tree of the android sdk folders has been slightly changed. Maven android plugin expects them to be in the updated version (I don&#8217;t remember what the differences where). However, if maven complains it cannot find android related stuff, and your sdk has been installed for some time, a good option would be to remove the sdk and reinstall it from scratch (at least the part you download with the sdk manager).<br /><br /><br /><br />At this point, you have a working maven project, which you could already open with intellij. What is still missing is the robolectric dependencies.<br />Nothing more easy, all you have to do is to add<br /><br /><br /><br /><br /><script src="https://gist.github.com/3165830.js?file=aaa.xml"></script> right below android dependencies.  You should also create the test folder, under <i>src/test/your/package/ </i><br /><br />Now, a problem I had was that I had to change the pointer of the repository in order to have robolectric 1.2 working.<br /><div><br /></div><div><br /></div><div><br /></div><br /><script src="https://gist.github.com/3165854.js?file=bbb.xml"></script><br /><br /><br /><br /><br />At this point, you should be able to open the pom.xml with intellij.<br /><br /><br />Now, to have robolectric working from intellij, you still need to make a couple of changes:<br />- the order of include of jars does not respect the one you specified. What&#8217;s more, you will likely to get the STUB! error because android jar is included before junit and robolectric.<br />All you need to do is to move the android jar below junit and robolectric<br /><br />- you need to manually specify the javadocs for android. You do this by highlighting android jar, pressing the little edit in the lower left corner.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-Cix5eHOX7ik/UA2uDjBWp2I/AAAAAAAAHso/ctXgbFyx8Tg/s1600/intellij1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="200" src="http://3.bp.blogspot.com/-Cix5eHOX7ik/UA2uDjBWp2I/AAAAAAAAHso/ctXgbFyx8Tg/s320/intellij1.png" width="320" /></a></div><br /><br /><br />and pressing the plus sign. Then you choose &#8220;Attach files or directories&#8221;, point the path related to your android docs,<br />which is /docs/references under your ANDROID_HOME. Finally, you declare that it&#8217;s related to javadoc.<br /><br /><br /><br /><br />Now you are _almost_ ready to start. You made all this mess because you want to have robolectric working with intellij.<br /><br />You need to create, right under src/ folder, the following path:<br /><i>src/test/java/ YOUR_PACKAGE&nbsp;</i><br /><i><br /></i><br />where you are going to include your unit tests, and you are done!<br /><br /><br />If you liked this post, please consider following me @fedepaol .<br /><br /><br /><br /><br /><div><br /></div><br /><div><br /></div></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
I added here https://dl.dropbox.com/u/3092639/pom.xml a working pom.xml I am currently using. I just tried to mvn clean install from a clean checkout and it looks to be finding robolectric. I hope you are missing something which you can correct using this example. Ping me if you can&#39;t</div>
</div>
<div class='comment'>
<div class='author'>Christopher Perry</div>
<div class='content'>
I added the sonatype repository stuff, and it&#39;s not finding robolectric. Not sure why.</div>
</div>
<div class='comment'>
<div class='author'>Christopher Perry</div>
<div class='content'>
This comment has been removed by the author.</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tcp Connections in Android]]></title>
    <link href="http://fedepaol.github.io/blog/2012/05/01/tcp-connections-in-android/"/>
    <updated>2012-05-01T00:00:00+02:00</updated>
    <id>http://fedepaol.github.io/blog/2012/05/01/tcp-connections-in-android</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="font-size: large;">Or how to keep your app connected and stop worrying.&nbsp;</span><br /><br /><i>Disclaimer</i>:<br />This is not another place where you can find java code snippet to open a socket and read and write to some server.<br />If you need that, go back to your favorite search engine and look for another result. <u>But be careful</u>: while looking for &#8220;inspiration&#8221; I found a lot of examples where the connection was held inside the UI thread. Please, don&#8217;t do that. At least use an asynctask.<br /><br /><br /><span style="font-size: large;"><i>Short version of this post (spolier warning):</i></span><br /><br /><ul><li>If you need to interact with a tcp server, use a singleton object that contains the socket&nbsp;</li><li>You can access it from all the activities of your app</li><li>If you want to be connected only while in foreground, have a counter that gets incremented on onStart() and gets decremented on onStop() of any client activity. Connect when the counter is &gt; 0, disconnect when the counter is &lt; 0<br /><div><br /></div></li></ul><br /><br /><br /><span style="font-size: large;">Background:</span><br />As a side project, I am developing a simple turn based multiplayer game, with a tcp server as backend (python twisted).<br /><br />In order to make my life easier, I wanted the interaction with the server to work as follows:<br /><br /><br /><ul><li>if the player gets disconnected while playing, it can&#8217;t reconnect and he is out of the current game</li><li>if the app goes background for any reason, it will disconnect from the server</li></ul><div><br /></div><div>The way the app interacts with the server is not the subject of the current post (hint: a thread for sending, one for receiving AND google protobuf for serialization), but it will probably be the subject for some code on github and another blogpost.</div><div><br /></div><div>What I am writing about is <b>how to share a tcp connection between several android activities.</b></div><div><b><br /></b></div><div><br /></div><div><span style="font-size: large;">Using a service to share the socket between android activities:</span></div><div><br /></div><div><ul><li>if you think about something that needs to survive between activities transition, a service is the first&nbsp;thing you think about</li><li>the code to interact with the server was self contained, so in every activity I had to bind to the service, wait for the bind to be done, call the service that called my code</li><li>because of the constraint I imposed to make the tcp server easier, I had to stop the service and restart it whenever my app went background</li><li>I was risking to keep the service around, consuming resources with no reason</li></ul><div>So, use a service ONLY if you really need to keep the connection even if your app is no longer visible.</div></div><div>If you need to do periodical tasks, or if you need to perform one shot operations, please consider using intent services.&nbsp;</div><div>Be kind and let your users know that you are draining their battery, using a notification icon when the service is alive and your app gets backgrounded.</div><div><br /></div><div><span style="font-size: large;">Using a singleton to share the tcp socket:</span></div><div><ul><li>A singleton object resides in your process, and so once started it&#8217;s accessible from all the activities</li><li>You can even run one or more threads inside of it, and they will be running no matter which activity is visible</li><li>Not using a service, you authorize the os to suspend your application (or even to kill it) when it runs out of resources.</li><li>There is no need to have the service layer to bind from the activity, you can access directly your singleton object</li></ul><div>So, this is the BEST WAY to share a tcp connection between activities.</div></div><div><br /></div><div>But what if you want to connect only when the application is foregrounded?</div><div><br /></div><div><span style="font-size: large;">How to check when your application is active:</span></div><div>Have a global counter (a good place might be the singleton itself) that gets incremented every time an onStart() is called from one of your activities, and decremented when onStop() gets called.&nbsp;</div><div><br /></div><div>If that counter is &gt; 0, that means the (at least) one activity is active and then the socket must be connected.</div><div>On the other hand, if the counter gets to 0, no activity is visible and so you need to disconnect.</div><div><br /></div><div>If you are afraid that the counter might go to 0 only because an activity is starting another one and so its onStop() gets called before onStart of the next one, please note that the official android documentation assures us that when starting one activity from another, &nbsp;onStop gets called AFTER onStart() of the started activity <a href="http://developer.android.com/guide/topics/fundamentals/activities.html">http://developer.android.com/guide/topics/fundamentals/activities.html</a>.</div><div><br /></div><div>With that in mind, we are sure that the only time the counter will get to 0 is when the ALL the activities are stopped.</div><div><br /></div><div><br /></div><div>If you liked this post, please consider following me on twitter @fedepaol .</div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div></div>
]]></content>
  </entry>
  
</feed>
