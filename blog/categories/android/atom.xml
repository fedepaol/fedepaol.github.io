<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | My little Android warehouse]]></title>
  <link href="http://fedepaol.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://fedepaol.github.io/"/>
  <updated>2016-04-21T23:48:19+02:00</updated>
  <id>http://fedepaol.github.io/</id>
  <author>
    <name><![CDATA[Federico Paolinelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Happiness Is (a) Relative (Layout)]]></title>
    <link href="http://fedepaol.github.io/blog/2016/04/20/happines-is-relative/"/>
    <updated>2016-04-20T06:34:46+02:00</updated>
    <id>http://fedepaol.github.io/blog/2016/04/20/happines-is-relative</id>
    <content type="html"><![CDATA[<h4>Using relative layout is bad</h4>

<p>.. or at least they say so.
The truth is, it is <em>relatively</em> easy to build complex layouts using RelativeLayouts, but this ease of use comes with a cost: in order to provide that kind of flexibility, RelativeLayout does two measurement passes.</p>

<p>There are a lot of talks and <a href="https://medium.com/google-developers/developing-for-android-iii-2efc140167fd#.wpqgdu3xs">posts</a> explaining that if you have nested relative layouts, you&rsquo;ll end up with many measurement passes that will consume your cpu and will contribute to miss the dreaded 16 ms threshold. The higher the RelativeLayouts are placed in your view hierarchy, the more will be the number of measurements.</p>

<p><strong>It&rsquo;s easier than you think</strong>: let&rsquo;s pretend you have a RelativeLayout as the root of your activity view (because hey, it&rsquo;s what Android Studio sets as default from the BlankActivity template).</p>

<p>Then you have a fragment, and for some reason you have a list you want to place aside a button and you need a RelativeLayout over there.</p>

<p>Finally, you&rsquo;ll have to place an image and a text inside the list elements, isn&rsquo;t there an easier way than RelativeLayout? (Actually, <a href="http://antonioleiva.com/textview_power_drawables/">there is and it&rsquo;s much more efficient</a>)</p>

<p><img class="center" src="/images/relative_hierarchy.png" width="300"></p>

<p>What will happen here is that with this unharmful scenario the <code>onMeasure()</code> method of each children of the list <strong>will be called 8 times</strong> each frame.</p>

<h3>But why does RelativeLayout need two passes?</h3>

<p>Given that Android is an open source framework, I could satisfy my curiosity by digging into the source code. Here I will try to provide a high level explanation of my understanding on how it works, without going too much into the details.</p>

<p>Let&rsquo;s pretend you want four children (A, B, C, D) for your layout, and the rules are the following:</p>

<ul>
<li>A is above C</li>
<li>B is to right of A</li>
<li>D is below B and its right margin is aligned to B</li>
<li>C is to left of D and its top is aligned to D</li>
</ul>


<p><img class="center" src="/images/relative_sample.png" width="200"></p>

<p>The concept behind RelativeLayout is fairly simple. <strong>In order to measure (and place) a certain child, you need to measure (and place) all the views that child depends on</strong> in term of relationship. For this reason, the first thing RelativeLayout does is to build a graph of dependencies between the children. Those dependencies determine the order in which the children are measured (i.e. first the views with no dependencies, then the views that depend only from the root, etc).</p>

<p>This explains the need for two measurement passes: <strong>the order the views need to be measured horizontally can be different from the order the views need to be measured vertically</strong>. In my example, A does not have any <em>horizontal</em> dependency but <em>vertically</em> it depends on the size and the position of C.</p>

<p>In the example, the sequence of measurement are:</p>

<p>Horizontal dimension:
A -> B -> D -> C</p>

<p><img src="/images/relative_horizontal.png" width="800"></p>

<p>Note that given the vertical size is not calculated yet, the views are temporarly assigned with the height of the parent view while measuring the horizontal sizes.</p>

<p>Vertical dimension:
B -> D -> C -> A</p>

<p><img src="/images/relative_vertical.png" width="800"></p>

<p>Other than these two passes, RelativeLayout can also loop its children up to three other times to finalize their placement (for example for those that are aligned to the bottom of the parent in case of wrap content).</p>

<p>The position of the views is calculated during the measurement double pass. For this reason the <code>onLayout()</code> implementation is pretty trivial.</p>

<p>Finally, the dependency lists are cached, but those cached elements are invalidated whenever a <code>requestLayout()</code> happens. This, together with the fact that <code>requestLayout()</code> goes up to the root and is called on all the children is another reason for not having deep view hierarchy especially with RelativeLayouts.</p>

<h3>Optimizing RelativeLayout</h3>

<p>First of all, remember that you don&rsquo;t always need to. If you are in the early stage of the development or under strict time constraints and you prefer the simplicity of use of <code>RelativeLayout</code> against performance then use it, <strong>just be aware of the implications</strong>. This small piece of technical debt might come back in the future to claim its price.</p>

<p><strong>Measure twice and cut once</strong> (but remember to do that from time to time). Hierarchy Viewer is a convenient way to understand if your hierarchy is too complex and to see at glance what&rsquo;s costing too much:</p>

<p><img class="center" src="/images/hierarchy.png" width="700"></p>

<p><a href="https://github.com/lucasr/probe">Probe</a> by Lucas Rocha is also an effective tool to check if your views are getting measured too many times.</p>

<p>After that, if you realize that your view groups suffer from performance issues, the most efficient way to optimize is to write a custom viewgroup. It might look scary at first, but it&rsquo;s just a matter of measuring and placing boxes <strong>knowing exactly where you want to place them and how their container looks like</strong>. This will flat your hierarchy and make it a lot more efficient.</p>

<p>I don&rsquo;t want to write (yet another) tutorial on building custom viewgroups here since it will double the lenght of this post, but some good starting points are:</p>

<ul>
<li><a href="https://newcircle.com/s/post/1663/tutorial_enhancing_android_ui_with_custom_views_dave_smith_video">Dave Smith&rsquo;s post on custom views</a></li>
<li><a href="https://sriramramani.wordpress.com/2015/05/06/custom-viewgroups/">Sriram Ramani&rsquo;s post on custom viewgroups</a></li>
<li><a href="https://www.youtube.com/watch?v=NYtB6mlu7vA">This talk from google io 2013</a></li>
<li><a href="https://www.youtube.com/watch?v=-xAdDqwaWJk">Loving lean layouts from Droidcon SF</a></li>
</ul>


<h3>What&rsquo;s the take home lesson</h3>

<p>RelativeLayout is an awesome piece of software. It makes it super easy to describe complex scenarios without needing to do nasty nested linear layouts.</p>

<p><strong>However</strong> from today, before placing it inside a view I will start thinking not only about the two passes, but also to all the hard work this complex piece of software needs to do behind the scene in order to offer me the flexibility I am used to.</p>

<p>The two measurement passes can be the biggest source of problems because of the risk of exponential explosion, but <strong>other than that there are a lot of computation and additional data structures involved</strong> in building (and maintain) those dependency lists, and a good amount of extra loops through the children needed to place them correctly.</p>

<p>Thanks to Riccardo Ciovati and Fabio Collini for proofreading this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subscribe It While It's Hot: Cached Rest Requests With RxJava]]></title>
    <link href="http://fedepaol.github.io/blog/2016/01/01/cached-rest-requests-with-rxjava/"/>
    <updated>2016-01-01T17:54:21+01:00</updated>
    <id>http://fedepaol.github.io/blog/2016/01/01/cached-rest-requests-with-rxjava</id>
    <content type="html"><![CDATA[<h4>Disclaimer:</h4>

<p>In this post I am trying to cover a proper approach to a common problem. I am still in the process of wrapping my head around RxJava so what I write here might not be the best way to solve the problem.</p>

<h1>Cached requests with RxJava</h1>

<p>Lately I&rsquo;ve been trying to develop a rest backed app using RxJava. I must admit that once you get in the proper mental mood, RxJava almost feels like cheating. Everything looks cleaner, multiple requests can be composed and manipulated easily, the StrictMode gets satisfied by observing on the ui thread and subscribing on a different thread, and all the nice things that can be read about how cool is RxJava with Android.
What I could not find easily, was how to store the result of a request and be sure that even in case of no network, a cached content was available for the user, while still handling everything in a reactive fashion.</p>

<h3>Caching vs non caching</h3>

<p>Going straight from rest result to the UI is appropriate in many cases, for example when displaying the result of a search whose arguments are not predictable (think about Ebay, or Amazon where the user is looking for something different every time).</p>

<p><em>However</em>, there are cases when the results fetched earlier are still significant and displaying them can improve the user experience significantly, compared to a spinning wheel or a white page. Those cases include your twitter feed, a local weather forecast that was fetched just 5 minutes before, or the list of the github repos of a given user.</p>

<p>Here you can see the difference between a non cached version and a cached version of the same activity:</p>

<p><img src="/images/uncached.gif" width="300">      <img src="/images/cached.gif" width="300"></p>

<p>For this reason I tried to figure out what could have been a clean way to cache the results of a request while keeping the flow in a reactive fashion.</p>

<h3>The storage as the unique source of the truth</h3>

<h4>All reactive</h4>

<p>If we want to cache the data while keeping everything inside the same subscription, things get a bit messy. The result of the request is thrown at the UI and the response is also stored in the storage. The UI subscribes from the storage too but checks which result came first and if the data is too old.</p>

<p><img src="/images/messy.jpg" width="500"></p>

<h4>Cached</h4>

<p>In this <em>hybrid</em> variant, the UI subscribes only to the storage, and a facade class wraps the storage and the subscription to the retrofit client that feeds the storage. Once the storage is filled with new data, the UI thread is automatically notified of every change.
<img src="/images/clean.jpg" width="500"></p>

<p>In this scenario the observable acts as a <em>hot</em> observable, the first time it gets subscribed it emits the content of the storage, and any other change it might happen to it.</p>

<h3>Talk is cheap, show me the code</h3>

<p>A working example of the following code can be found <a href="https://github.com/fedepaol/RxRestSample">in my github repo here</a>
To write this sample, I started from the abused Github apis which seems to power the 99% of the rest related examples. Sorry about that.</p>

<p>First there is the storage. I wrapped a SQLite helper (which I happily generated with <a href="https://github.com/fedepaol/Android-sql-lite-helper">my handy script</a>) with a class that contains a <a href="http://reactivex.io/RxJava/javadoc/rx/subjects/PublishSubject.html">PublishSubject</a> which can be subscribed to and which we will notify when the insertion methods are called:</p>

<pre><code class="Java">public class ObservableRepoDb {
    private PublishSubject&lt;List&lt;Repo&gt;&gt; mSubject = PublishSubject.create();
    private RepoDbHelper mDbHelper;

    private List&lt;Repo&gt; getAllReposFromDb() {
        List&lt;Repo&gt; repos = new ArrayList&lt;&gt;();
        // .. performs the query and fills the result
        return repos;
    }

    public Observable&lt;List&lt;Repo&gt;&gt; getObservable() {
        Observable&lt;List&lt;Repo&gt;&gt; firstTimeObservable =
                Observable.fromCallable(this::getAllReposFromDb);

        return firstTimeObservable.concatWith(mSubject);
    }

    public void insertRepo(Repo r) {
        // ...
        // performs the insertion on the SQLite helper
        // ...
        List&lt;Repo&gt; result = getAllReposFromDb();
        mSubject.onNext(result);
    }
}
</code></pre>

<p>What we have here is the first piece of the puzzle: a storage that can be subscribed to. The concatenation is needed because we want it to emit the content of the storage as soon as it gets subscribed.</p>

<p>Then there is the facade class, where we get the observable from and to which we start a new update:</p>

<pre><code class="Java">public class ObservableGithubRepos {
    ObservableRepoDb mDatabase;
    private BehaviorSubject&lt;String&gt; mRestSubject;

    // ...
    public Observable&lt;List&lt;Repo&gt;&gt; getDbObservable() {
        return mDatabase.getObservable();
    }

    public void updateRepo(String userName) {
        Observable&lt;List&lt;Repo&gt;&gt; observable = mClient.getRepos(userName);
        observable.subscribeOn(Schedulers.io())
                  .observeOn(Schedulers.io())
                  .subscribe(l -&gt; mDatabase.insertRepoList(l));
    }
} 
</code></pre>

<p>Note that everything happens far from the UI thread. This is because we are going to subscribe to the database observable as the unique source of truth.</p>

<p>Now, given that the observable is now <em>hot</em>, we can&rsquo;t listen for its <em>onComplete</em> in order to stop any progress indicators we might put in place.
What we need is another subject that can be bound to the update request, so here it is the new facade class:</p>

<pre><code class="Java ">public class ObservableGithubRepos {
    // ...

    public Observable&lt;List&lt;Repo&gt;&gt; getDbObservable() {
        return mDatabase.getObservable();
    }

    public Observable&lt;String&gt; updateRepo(String userName) {
        BehaviorSubject&lt;String&gt; requestSubject = BehaviorSubject.create();

        Observable&lt;List&lt;Repo&gt;&gt; observable = mClient.getRepos(userName);
        observable.subscribeOn(Schedulers.io())
                  .observeOn(Schedulers.io())
                  .subscribe(l -&gt; {
                                    mDatabase.insertRepoList(l);
                                    requestSubject.onNext(userName);},
                             e -&gt; requestSubject.onError(e),
                             () -&gt; requestSubject.onCompleted());
        return requestSubject;
    }
}
</code></pre>

<p>In the UI client (activity or fragment) we&rsquo;ll need to subscribe to the storage in order to get the data and to the request observable in order to stop the progress indicators. An observable that emits the state of the pending request is returned every time an update is being requested.</p>

<pre><code class="Java">    mObservable = mRepo.getDbObservable();
    mProgressObservable = mRepo.getProgressObservable()

    mObservable.subscribeOn(Schedulers.io())
                   .observeOn(AndroidSchedulers.mainThread()).subscribe(l -&gt; {
                    mAdapter.updateData(l);
                });

    Observable&lt;List&lt;Repo&gt;&gt; progressObservable = mRepo.updateRepo("fedepaol");
    progressObservable.subscribeOn(Schedulers.io())
                           .observeOn(AndroidSchedulers.mainThread())
                           .subscribe(s -&gt; {},
                                      e -&gt; { Log.d("RX", "There has been an error");
                                            mSwipeLayout.setRefreshing(false);
                                      },
                                      () -&gt; mSwipeLayout.setRefreshing(false));
</code></pre>

<p>Please remember that the DbObservable is a hot one, so every time a call to updateRepo happens, the db will be fed with the result of the query and the ui will get subsequently notified.</p>

<h3>SqlBrite</h3>

<p>If all this wrapping seems too laboruous, the prolific guys from Square wrote <a href="https://github.com/square/sqlbrite">SqlBrite</a> which is a super generic database wrapper that was written for this same purpouse. I am sure it&rsquo;s better and more battle field tested than the poor man&rsquo;s version we can write by ourselves.</p>

<h2>Conclusion</h2>

<p>I don&rsquo;t know if this is an healthy way to use RxJava. Maybe I ended up with this scenario only because I am not 100% confident with RxJava and I am putting some non rx-ness in the middle to better control it.
Here we need to choose where to place the operators, since we can modify the flow that feeds the storage from the http client, or the flow that comes out of the storage itself.</p>

<p>In any case, having an unique source of truth seems more clear, and I feel that in this way it would be a lot easier to do stuff like prefetching, scheduling updates so the user is presented with fresh data (remember having your <a href="https://www.youtube.com/watch?v=GcNNx2zdXN4">app work like magic?</a>), checking if an update is worth to be done at all (such as displaying a 5 minutes old weather forecast) and stuff like that.</p>

<p>Thanks to Fabio Collini for spotting a lot of mistakes in the first draft of this posts, and to Riccardo Ciovati for proof reading it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing RxJava Observables and Subscriptions]]></title>
    <link href="http://fedepaol.github.io/blog/2015/09/13/testing-rxjava-observables-subscriptions/"/>
    <updated>2015-09-13T21:26:15+02:00</updated>
    <id>http://fedepaol.github.io/blog/2015/09/13/testing-rxjava-observables-subscriptions</id>
    <content type="html"><![CDATA[<h2>Testing RxJava</h2>

<p>While catching up with the latest Android novelties I could not ignore RxJava, which seems to grow in popularity between android developers.</p>

<p>If you just heard about it, and you want to get your feet wet, I really recommend Dan Lew&rsquo;s <a href="http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/">Grokking with RxJava</a> series as a starting point.</p>

<p><strong>RxJava is asynchronous by nature</strong>, so unit testing it might seem a daunting at first, especially if you use that asynchronous interaction to test stuff. Luckily, RxJava (and RxAndroid) come with a couple of tools that will make our life a lot easier.</p>

<h2>What to (unit) test</h2>

<p>There are at least a couple of things you&rsquo;ll want to test:</p>

<ol>
<li>You will want to test the <strong>observables</strong>, meaning not only the observables you built, but also the resulting composition of the various operators you may want to apply to them.</li>
<li>Given a certain observable (or its mock), you will want to test <strong>how the rest of your application behaves while triggered by the subscription</strong>.</li>
</ol>


<h2>Testing the observables</h2>

<p>Despite the fact that a subscription is asynchronous, there are (at least) a couple of ways to make the stream of your observable synchronous.</p>

<p>The first way is by using
<code>Java
ResultToCheck res = myObservable.toBlocking().first();
</code></p>

<p>This works because <a href="http://reactivex.io/RxJava/javadoc/rx/Observable.html#toBlocking%28%29">toBlocking</a> converts the observable to a blocking one, while <a href="http://reactivex.io/documentation/operators/first.html">first</a> returns the first emitted element.
The calling code will wait synchronously until the observer calls onCompleted().</p>

<p><strong>The official way to test an observable</strong> is by using a <a href="http://reactivex.io/RxJava/javadoc/rx/observers/TestSubscriber.html">TestSubscriber</a>, an helper subscriber provided directly by the RxJava library.
As with toBlocking, a test subscription is synchronous.
Here you can find an example:</p>

<pre><code class="Java">Observable&lt;RubberChicken&gt; obs = obsFactory.getObservable();
TestSubscriber&lt;RubberChicken&gt; testSubscriber = new TestSubscriber&lt;&gt;();
obs.subscribe(testSubscriber);

testSubscriber.assertNoErrors();
List&lt;RubberChicken&gt; chickens = testSubscriber.getOnNextEvents();
// Assert your chickens integrity here
</code></pre>

<p><code>TestSubscriber</code> comes with a bunch of helper methods for testing, like specific assertions and other stuff. On top of that, its <code>getOnNextEvents()</code> method is blocking and  will return all the emitted items as elements of a list.
This is a neat way to test not only your observers, but also to check if the compositions you put in place are working as expected. That makes testing observables super easy.</p>

<h2>Testing the subscription</h2>

<p>Once your observables are in place, you will likely to be observing them on some thread, and subscribing them on some other thread. This will make it harder for us to test how our activity (or fragment) reacts to a triggered subscription.</p>

<p>RxJava (and RxAndroid) provide a way to override the schedulers exposed when <code>Schedulers.io()</code> or <code>AndroidSchedulers.mainThread()</code> are called. By replacing them with <code>Schedulers.immediate()</code>, your code will run immediately and you&rsquo;ll be able to see its results.</p>

<p>The solution is a bit hacky, since we need to call <code>reset()</code> method before overriding RxJava&rsquo;s schedulers, which is package protected. I <em>took inspiration</em> from Alexis Mas&#8217; <a href="http://alexismas.com/blog/2015/05/20/unit-testing-rxjava/">blogpost</a> extending RxJavaPlugins class (there no need for that with RxAndroid):
&#8220;`Java
package rx.plugins;</p>

<p>public class RxJavaTestPlugins extends RxJavaPlugins {
    RxJavaTestPlugins() {
        super();
    }</p>

<pre><code>public static void resetPlugins(){
    getInstance().reset();
}
</code></pre>

<p>}</p>

<pre><code>
Registering a scheduler hook that provides a custom implemetation (Schedulers.immediate()) will end up in overriding the schedulers we are using.

As pointed out by [Patrik Åkerfeldt](https://twitter.com/pakerfeldt) in the comments, since the hooks are asked to provide a scheduler implementation during the initialization of the Schedulers class, we have only one chance to override the default schedulers. For this reason, there is no point in setting them up in the `setup` phases of all our tests.

The best place to override them once seems to be the `TestRunner`'s constructor. 

The custom `TestRunner` will look like this:
</code></pre>

<p>public class RxJavaTestRunner extends RobolectricGradleTestRunner {
    public RxJavaTestRunner(Class&lt;?> testClass) throws InitializationError {
        super(testClass);</p>

<pre><code>    RxJavaTestPlugins.resetPlugins();
    RxJavaPlugins.getInstance().registerSchedulersHook(new RxJavaSchedulersHook() {
        @Override
        public Scheduler getIOScheduler() {
            return Schedulers.immediate();
        }
    });
}
</code></pre>

<p>}
&#8220;`</p>

<p>And this is how the <code>setup()</code> and <code>teardown()</code> methods will look like (here I am using robolectric but it makes no difference with AndroidTests):</p>

<pre><code class="Java">@RunWith(RxJavaTestRunner.class)
@Config(constants = BuildConfig.class,
application = TestRobolectricApplication.class)
public class SubscriberTest {
    @Before
    public void setup() {
        RxAndroidPlugins.getInstance().registerSchedulersHook(new RxAndroidSchedulersHook() {
            @Override
            public Scheduler getMainThreadScheduler() {
                return Schedulers.immediate();
            }
        });
    }

    @After
    public void tearDown() {
        RxAndroidPlugins.getInstance().reset();
    }}

    /* Your tests here */
}
</code></pre>

<p>As I already mentioned, you can inject the custom schedulers only once per test session. On the other hand, RxAndroidPlugins come with a reset method that will allow us to hook in different schedulers in different threads.</p>

<p>This, together with a non blocking observable (for instance by replacing your long taking observable with a mocked <code>Observable.just()</code>) will make our test synchronous.</p>

<p>In order to inject a mocked observable, we can override the Application object used by Robolectric,  as described in my <a href="http://fedepaol.github.io/blog/2015/09/05/mocking-with-robolectric-and-dagger-2/">previous post here</a> .</p>

<h2>Bonus point: debugging</h2>

<p>If the unit tests are not enough, and you want to check what is happening inside the chaining / transformation of the stream, you can set an <code>ObservableExecutionHook</code> that will be triggered when observables are being called:</p>

<pre><code class="Java">   private void enableRxTrack() {
        RxJavaPlugins.getInstance().registerObservableExecutionHook(new DebugHook(new DebugNotificationListener() {
            final String TAG = "RXDEBUG";
            public Object onNext(DebugNotification n) {
                Log.v(TAG, "onNext on " + n);
                return super.onNext(n);
            }


            public Object start(DebugNotification n) {
                Log.v(TAG,"start on "+n);
                return super.start(n);
            }


            public void complete(Object context) {
                super.complete(context);
                Log.v(TAG,"oncomplete n "+context);
            }

            public void error(Object context, Throwable e) {
                super.error(context, e);
                Log.e(TAG,"error on "+context);
            }
        }));
    }
</code></pre>

<h1>TL;DR:</h1>

<ul>
<li>Use TestSubscriber when testing how an observable (or a composition of observables) behaves</li>
<li>Mock your observable and override the default schedulers to test how the subscribing class works</li>
<li>Enable the tracking of your observables by registering an observable execution hook</li>
</ul>


<p>A working example (rubber chickens included) can be found on my <a href="https://github.com/fedepaol/TestingRxJava">github repo</a>.</p>

<h3>References</h3>

<ul>
<li><a href="https://medium.com/ribot-labs/unit-testing-rxjava-6e9540d4a329">Unit testing rxjava (observables)</a> by Iván Carballo</li>
<li><a href="http://alexismas.com/blog/2015/05/20/unit-testing-rxjava/">Unit testing rxjava (subscription)</a> by Alexis Mas</li>
<li><a href="http://fragmentedpodcast.com/episodes/3/">This</a> and <a href="http://fragmentedpodcast.com/episodes/4/">this</a> episodes of <a href="http://fragmentedpodcast.com">Fragmented Podcast</a> where Dan Lew gave some insights about RxJava, where I heard about the scheduler overriding trick</li>
<li>Patrik Åkerfeldt&rsquo;s example that demonstrates how the scheduler injection works only before Scheduler class initialization</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking With Robolectric and Dagger 2]]></title>
    <link href="http://fedepaol.github.io/blog/2015/09/05/mocking-with-robolectric-and-dagger-2/"/>
    <updated>2015-09-05T08:22:47+02:00</updated>
    <id>http://fedepaol.github.io/blog/2015/09/05/mocking-with-robolectric-and-dagger-2</id>
    <content type="html"><![CDATA[<h2>Why robolectric</h2>

<p>I&rsquo;ve been a fan of robolectric since the old days, since <a href="http://fedepaol.github.io/blog/2012/07/23/intellij-robolectric-and-android/">when Android Studio was not an option and few developers embraced IntelliJ</a>. I left it a bit behind after the introduction of Android Studio, since its support was far from optimal.</p>

<p>Things have changed, and after listening Corey Latislaw advocating its usage during <a href="http://fragmentedpodcast.com/episodes/13/">this fragmented podcast episode</a> I wanted to give it a spin. Even if there is a bit of debate over its usage, mainly because tests are performed against mocked objects instead of the real framework code, it is the fastest lane to your tdd cycle because tests are run on the local jvm instead of being packed in an apk, deployed on a device and run over there.</p>

<h2>Dependency Injection</h2>

<p>One really cool thing about robolectric 3.0 is the fact that you can override the Application object declared in your manifest with a custom one (which can inherit from your application&rsquo;s one).</p>

<p>If you are using dagger (or dagger 2) and you are using the application as the source of dependency injection for your classes, this allow to easily replace your injected objects with mocks. You can even choose which mocks inject in the setup phase of your tests.</p>

<h2>Let&rsquo;s see an example:</h2>

<p>Let&rsquo;s say you have your application class that exposes all the injected objects in a Dagger 2 fashion, and that you are using it to inject classes in your activities:</p>

<pre><code class="java">    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // stuff 
        ((MyApplication) getApplication()).getComponent().inject(this);
    }
</code></pre>

<p>Now, if we can drive the component injected within our tests, the rest of the app would use them and (hopefully) behave in a way we expect, depending on our mocks instead of the real objects.</p>

<p>The dependencies are provided by a module:</p>

<pre><code class="java">@Module
public class ApplicationModule {
    // stuff

    @Provides
    @Singleton
    GitHubClient provideClient() {
        return new GitHubClient(mApp.getApplicationContext());
    }
    // .. Provides other stuff
}
</code></pre>

<p><code>GitHubClient</code> is a Retrofit (2) powered client that helps to retrieve all the repos for a given user.</p>

<p>By using a test only application, we can provide a module from our tests.</p>

<p>Let&rsquo;s see ApplicationModule&rsquo;s mocked alter ego. Note that we can override only the dependencies that we want to mock:</p>

<pre><code class="java">public class MockApplicationModule extends ApplicationModule {
    List&lt;Repo&gt; result;
    // stuff

    @Override
    GitHubClient provideClient() {
        GitHubClient client = mock(GitHubClient.class);
        // mock behaviour
        return client;
    }

    public void setResult(List&lt;Repo&gt; result) {
        this.result = result;
    }
}
</code></pre>

<p>Now that everything is in place, we can use the mocked objects in our tests:</p>

<pre><code class="java">@RunWith(RobolectricGradleTestRunner.class)
@Config(constants = BuildConfig.class,
        application = TestApplication.class)
public class SampleTest {
    @Before
    public void setup() {
        TestApplication app = (TestApplication) RuntimeEnvironment.application;
        // Setting up the mock module
        MockApplicationModule module = new MockApplicationModule(app);
        module.setResult(mockedResult);
        app.setApplicationModule(module);
    }
}
</code></pre>

<p>From now on, the our tested activities will be injected with our mocked github client and we will be able to test their behaviour.</p>

<h2>Quirks</h2>

<p>Since the Test Application object is created before running the tests, a default application module must be provided, otherwise you&rsquo;ll get a dreaded NPE while running your tests.</p>

<pre><code class="java">public class TestApplication extends MyApplication {
    @Override
    ApplicationModule getApplicationModule() {
        if (mApplicationModule == null) {
            return super.getApplicationModule();
        }
        return mApplicationModule;
    }}
</code></pre>

<p>moreover, the dependency graph is generally built inside the Application&rsquo;s onCreate method. Given that we want to recreate it with our mocked module, I had to add a method for that:</p>

<pre><code class="java">public class MyApplication extends Application {
    // Stuff 
    @Override
    public void onCreate() {
        super.onCreate();
        initComponent();
    }

    void initComponent() {
        mComponent = DaggerRoboSampleComponent.builder()
                .applicationModule(getApplicationModule())
                .build();
    }
}
</code></pre>

<h2>Conclusion</h2>

<p>The fact that robolectric allows you to use a custom test application object (even a different one for different tests) together with dagger is an easy way to inject mock object without having to rely on ugly setters.</p>

<p>Robolectric is a fast and effective way to speed up your tdd process. All the time spent to set the tests and the mocks app is well repaid in code coverage and writing and debugging speed afterwards.</p>

<h2>See it in action (and have something to copy from)</h2>

<p><a href="https://github.com/fedepaol/RobolectricDependenyInjection">Here on github</a> I put a working example that demonstrates how to inject a mocked module using robolectring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dragging With ViewDragHelper]]></title>
    <link href="http://fedepaol.github.io/blog/2014/09/01/dragging-with-viewdraghelper/"/>
    <updated>2014-09-01T20:48:20+02:00</updated>
    <id>http://fedepaol.github.io/blog/2014/09/01/dragging-with-viewdraghelper</id>
    <content type="html"><![CDATA[<p>While working on my <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=909434">last side gig</a>, a patch to Firefox for Android to allow the urlbar to be dragged in order to show content hidden behind the main view, I had to deal with ViewDragHelper and understand how it works.</p>

<p>The final result (please note that the patch is still under review) is something like this:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/rKRIZB6nQfg" allowfullscreen></iframe></div></p>

<p>It caused me more than one headache, and for this reason I am writing this post hoping it might be helpful to anybody wanting to tinker with it.</p>

<p>ViewDragHelper&rsquo;s usage is not well documented, but <a href="http://flavienlaurent.com/blog/2013/08/28/each-navigation-drawer-hides-a-viewdraghelper">this post</a> by Flavien Laurent is the best place you could start from.</p>

<p>In order to provide a simpler example for this post, I&rsquo;ll introduce a simplified version of what I have done on Firefox, without all the extra code needed to interact with the rest of the app.</p>

<p>Let&rsquo;s start with..</p>

<h2>How touch events are handled</h2>

<p>A good source of information is the <a href="http://developer.android.com/training/gestures/viewgroup.html">official documentation</a>. However, I&rsquo;ll write a short introduction here.</p>

<p>Whenever a touch event happens, the parent view is being asked if it wants to handle that event in place of its children. This is done by calling its <code>onInterceptTouchEvent()</code> method, which should return true if the parent view wants to handle the event.</p>

<p>In case the event is trapped by the parent, its <code>onTouchEvent()</code> method gets called and it must return true if the event is handled.</p>

<p>Children view can also rebel against their parent tiranny, and disable this mechanism by calling <code>requestDisallowInterceptTouchEvent()</code>. By doing that, they ensure that the touch event wont be passed to the parent view.</p>

<p><img src="/images/touches.png" width="350" height="350" title="&lsquo;touches&rsquo; &lsquo;images&rsquo;" ></p>

<h2>How ViewDragHelper works</h2>

<p>The idea behind it is pretty simple. You register a draghelper on a container view</p>

<pre><code class="java">    mDragHelper = ViewDragHelper.create(this, 1.0f, new DragHelperCallback());
</code></pre>

<p>and then you set a couple of entry points, one to listen if a drag is being started (or is in progress), the other to handle the motion events and perform the dragging when the event is being passed to the view it registered against:
&#8220;`java
    @Override
    public boolean onInterceptTouchEvent(MotionEvent event) {
        if (mDragHelper.shouldInterceptTouchEvent(event)) {
                return true;
        }
        return super.onInterceptTouchEvent(event);
    }</p>

<pre><code>@Override
public boolean onTouchEvent(MotionEvent event) {
    mDragHelper.processTouchEvent(event);
    return true;
}
</code></pre>

<pre><code>
ViewDragHelper will be asked to check if a motion event is part of a dragging process. The behaviour of the whole dragging process is ruled by a `DragHelperCallback` instance passed on creation.
`DragHelperCallback` has method that need to be implemented to be notified of particular evens, such as:

* a change in the dragging state
* a change in the dragged view location
* when and where the dragged view was released

It also has methods used to influence the dragging behaviour:  

* clamp the position of the view / the range it can be dragged within
* check whether a particular subview can be dragged

A whole drag process is intended a sequence of `Down` / `Move` / `Up` events over a particular target view.
Whenever a drag process starts, ViewDragHelper finds the topmost child that contains the location of the motion event, and asks us if that particular view can be dragged or not in `tryToCaptureView()` method.  
This is *more or less* the theory involved in the dragging process. On top of that, ViewDragHelper offers also `settleAt` methods to let the views settle to their rest location gracefully.

Since explaining in words it's not the easiest thing (nor I am particularly good to explain), I'll introduce the simplified app I used to understand (a bit) how ViewDragHelper works.

#Enters DragQueen

<img src="https://farm6.staticflickr.com/5128/5356147569_686637006e.jpg" width="350" height="350" title="dragqueen" alt="images"> [Licensed under commons creative](https://www.flickr.com/photos/kbyte/5356147569/in/photolist-9aiE4T-oZtA-6YfGh-ebJmp8-jCeRGT-7xRKgx-7csUvo-nFTXP8-nFTXNg-9DAWnB-dbWyHz-m2FLMf-6x5QY2-5vkGLh-9jwh4a-KCBSK-dJTFb-4XRtDY-ouiHNw-od7U9J-oiKnUm-6DTq9a-6d1uXV-ocLauF-7VXBD4-n4y95v-ouj2w5-oaD6SK-owCHq3-6xQaS8-je4k6-ng25wJ-oDWV9V-os7FZk-8oeWRF-oRT83M-2PtLZZ-6x5Pkt-49vCUN-49rtdk-S9buU-f5Wr7L-49vCQw-nVMgN7-6wABHo-fX91x-6x5PQH-51DtKg-7mVAco-miQ2Q/)

(Just kidding). DragQueen is a (ultra) simplified version of what I implemented on fennec with a button named queen that you can drag. 

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Vo4381SSNn0" allowfullscreen></iframe></div> 

It consists of:

+ OuterLayout (the root element of our activity, the one that contains the views we want to drag)
+ a front panel which can be dragged

<img src="/images/draghelper.png" width="350" height="350" title="draghelper" alt="images">

To make the things a bit more complex we want to enable the dragging only from a particular subview, Queen. To make the things even more complex, we want to be also able to interact with Queen button while the dragging is not happening.

We also allow only two rest locations, so if the view is released mid-way it will settle to its open / close location depending on the speed and the location of when the view is released.
Finally, note that OuterLayout contains also a button that is hidden when main layout is in its closed state.

### OuterLayout
Outerlayout is a ViewGroup that extends a RelativeLayout.  
As I wrote before, the two methods ViewDragHelper needs to hook into are
</code></pre>

<pre><code>@Override
public boolean onInterceptTouchEvent(MotionEvent event) {
    if (isQueenTarget(event) &amp;&amp; mDragHelper.shouldInterceptTouchEvent(event)) {
            return true;
    } else {
        return false;
    }
}

@Override
public boolean onTouchEvent(MotionEvent event) {
    if (isQueenTarget(event) || isMoving()) {
        mDragHelper.processTouchEvent(event);
        return true;
    } else {
        return super.onTouchEvent(event);
    }
}
</code></pre>

<pre><code>
You may notice that `onInterceptTouchEvent` if has another condition. This is because we want to drag mainlayout only if the touch targets the Queen (it would not be drag-queen otherwise). This is a simplified version of what happens in Fennec, where we want to intercept the drag only if it starts from the toolbar to avoid to interfere with the web content.

In any case, checking if Queen is targeted is quite easy:
</code></pre>

<pre><code>private boolean isQueenTarget(MotionEvent event) {
    int[] queenLocation = new int[2];
    mQueenButton.getLocationOnScreen(queenLocation);
    int upperLimit = queenLocation[1] + mQueenButton.getMeasuredHeight();
    int lowerLimit = queenLocation[1];
    int y = (int) event.getRawY();
    return (y &gt; lowerLimit &amp;&amp; y &lt; upperLimit);
}
</code></pre>

<pre><code>
##Other methods that influence the behaviour of the dragging are:
####tryCaptureView
</code></pre>

<pre><code>@Override
    public boolean tryCaptureView(View view, int i) {
        return (view.getId() == R.id.main_layout);
    }
</code></pre>

<pre><code>
which gives draghelper the permission to drag main layout). You *must* return true up there for the view you want to be dragged.

####getViewVerticalDragRange &amp;&amp; clampViewPositionVertical (there are *Horizontal* flavours too)
</code></pre>

<pre><code>    public int getViewVerticalDragRange(View child) {
        return mVerticalRange;
    }

    @Override
    public int clampViewPositionVertical(View child, int top, int dy) {
        final int topBound = getPaddingTop();
        final int bottomBound = mVerticalRange;
        return Math.min(Math.max(top, topBound), bottomBound);
    }
</code></pre>

<pre><code>which do what you expect them to do, setting limit for the dragging. In this particular case, vertical range is set to half the size of screen.

### DragQueen 

Note also how ```mMainLayout``` is set as clickable with ```android:clickable="true"```. This prevents touch events to be passed down to the view below when it is closed..

---

## Callbacks
There are several callbacks you will want to implement in order to react to the events related to the dragging:

####onViewDragStateChanged
</code></pre>

<pre><code>@Override
    public void onViewDragStateChanged(int state) {
        if (state == mDraggingState) { // no change
            return;
        }
        if ((mDraggingState == ViewDragHelper.STATE_DRAGGING || mDraggingState == ViewDragHelper.STATE_SETTLING) &amp;&amp;
             state == ViewDragHelper.STATE_IDLE) {
            // the view stopped from moving.

            if (mDraggingBorder == 0) {
                onStopDraggingToClosed();
            } else if (mDraggingBorder == mVerticalRange) {
                mIsOpen = true;
            }
        }
        if (state == ViewDragHelper.STATE_DRAGGING) {
            onStartDragging();
        }
        mDraggingState = state;
    }
</code></pre>

<pre><code>notifies the state transitions of DragHelper between `DRAGGING`, `IDLE` or `SETTLING` state.


####onViewPositionChanged
</code></pre>

<pre><code>public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy) {
</code></pre>

<pre><code>whose purpouse is pretty clear.

####onViewReleased
</code></pre>

<pre><code>    @Override
    public void onViewReleased(View releasedChild, float xvel, float yvel) {
        final float rangeToCheck = mVerticalRange;
        if (mDraggingBorder == 0) {
            mIsOpen = false;
            return;
        }
        if (mDraggingBorder == rangeToCheck) {
            mIsOpen = true;
            return;
        }
        boolean settleToOpen = false;
        if (yvel &gt; AUTO_OPEN_SPEED_LIMIT) { // speed has priority over position
            settleToOpen = true;
        } else if (yvel &lt; -AUTO_OPEN_SPEED_LIMIT) {
            settleToOpen = false;
        } else if (mDraggingBorder &gt; rangeToCheck / 2) {
            settleToOpen = true;
        } else if (mDraggingBorder &lt; rangeToCheck / 2) {
            settleToOpen = false;
        }

        final int settleDestY = settleToOpen ? mVerticalRange : 0;

        if(mDragHelper.settleCapturedViewAt(0, settleDestY)) {
            ViewCompat.postInvalidateOnAnimation(OuterLayout.this);
        }
    }
</code></pre>

<pre><code>is where you (_might_) want to let the view go into its rest place. I made it behave in such way that dragging speed (and direction) is more important than the place you are releasing the view.

---

## Bonus methods
</code></pre>

<pre><code>mDragHelper.settleCapturedViewAt(0, settleDestY))
</code></pre>

<pre><code>
is a helper method that will make your view smoothly settle at the given destination.

---

## Quirks and reasons for headaches

#### ViewDragHelper sets the offset of the target view ..
  .. by calling ``offsetTopAndBottom``, which is ok *but* you have to remember that a layout round called by any of the children of outerLayout (or the parent view you are passing to the draghelper) will reset that offset. What you are going to see in that case is your dragged view getting back at its rest position.

A possibile solution to this is to force back the parent where it was before:
</code></pre>

<pre><code>mMainLayout.addOnLayoutChangeListener(new View.OnLayoutChangeListener() {
        @Override
        public void onLayoutChange(View v, int left, int top, int right, int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom) {
            if (mOuterLayout.isMoving()) {
                v.setTop(oldTop);
                v.setBottom(oldBottom);
                v.setLeft(oldLeft);
                v.setRight(oldRight);
            }
        }
    });
</code></pre>

<pre><code>
#### ViewDragHelper always want to intercept the top most child in z order
If you have some view in between, but you want to be able to drag a lower one, you have to let ViewDragHelper think that your view is the topmost one.
</code></pre>

<pre><code>    @Override
    public int getOrderedChildIndex(int index) {
        int mainLayoutIndex = indexOfChild(mMainLayout);
        if (index &gt; mainLayoutIndex) {
            return mainLayoutIndex;
        } else {
            return index;
        }
    }
</code></pre>

<pre><code>
---


#What's more

ViewDragHelper offers a lot more features than those I just presented. *DragQueen* implements only vertical dragging, but you can drag your views horizontally too. Again, refer to the excellent post by Flavien for more details.

Moreover, ViewDragHelper allows you to intercept drag events that start from the edge of the screen, which is the way its used in the `NavigationDrawer`.

All it needs to enable it is to call 
</code></pre>

<p>mDragHelper.setEdgeTrackingEnabled(ViewDragHelper.EDGE_LEFT);
<code>
and to implement
</code>java
@Override
public void onEdgeDragStarted(int edgeFlags, int pointerId) {
    mDragHelper.captureChildView(mMainLayout, pointerId);
}
&#8220;`</p>

<h1>TL;DR</h1>

<p>ViewDragHelper is a bit complex and as I said before not well documented. However it allows you to drag views around with very little code, and it can be used to implement nice effects. In any case you can <del>unrestrainedly copy</del> <em>take inspiration</em> from DragQueen source code on <a href="https://github.com/fedepaol/dragqueen">GitHub</a> (it seems to work).
I really hope this post does not contain too many errors and that you enjoyed reading it as much as I did writing.</p>

<p>If you liked this post, consider following me on twitter <a href="https://twitter.com/fedepaol">@fedepaol</a></p>
]]></content>
  </entry>
  
</feed>
