<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | My little Android warehouse]]></title>
  <link href="http://fedepaol.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://fedepaol.github.io/"/>
  <updated>2014-08-24T19:07:02+02:00</updated>
  <id>http://fedepaol.github.io/</id>
  <author>
    <name><![CDATA[Federico Paolinelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rest Interaction in Android]]></title>
    <link href="http://fedepaol.github.io/blog/2014/02/20/rest-interaction-in-android/"/>
    <updated>2014-02-20T00:00:00+01:00</updated>
    <id>http://fedepaol.github.io/blog/2014/02/20/rest-interaction-in-android</id>
    <content type="html"><![CDATA[<div class='post'>
<div style="text-align: justify;">In last December (&#8216;13) I was asked to submit a talk proposal for the first <a href="http://it.droidcon.com/2014/lineup/">Italian Droidcon</a>, which I did. It got accepted, so in Febraury I gave my first public speech speaking of &#8220;(O)Authenticated Rest Interaction in Android&#8221; in front of real people. <br /><br />This post is meant to be a follow up with the information that can&#8217;t be found in the slides<br /><br /></div><script async="" class="speakerdeck-embed" data-id="ddbb3d50725001312be21e64c86b5257" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script> <br /><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">I hoped to sum all the talk up in a post, but it got too long so I am going to split it in several pieces. This one will cover the asynchronous interaction with a remote webservice.&nbsp; </div><div style="text-align: justify;"><br /><br /></div><div style="text-align: justify;"><span style="font-size: small;">Disclaimer: I am not inventing anything new here, most of the content can be found on the internet. A great source of inspiration is <a href="http://www.youtube.com/watch?v=xHXn3Kg2IQE">this talk</a>, from where I took the inspiration for the approach I am going to explain, probably in a worse way. </span></div><div style="text-align: justify;"><br /><br /></div><h2 style="text-align: justify;"><span style="font-size: x-large;">Rule #1: decouple the interaction with the web service from UI components (activities / fragment)</span></h2><div style="text-align: justify;"><br /></div><div style="text-align: justify;">This means that <b><i>cut and past</i>ing that <i>AsyncTask that contains an HttpUrlConnection</i> code you found on google directly inside your activity is a bad idea</b> (I don&#8217;t even want to remind you that you should NOT host the HttpUrlConnection directly inside your activity, if you are doing that you probably won&#8217;t understand the rest of this post and you should restart your android journey <a href="http://developer.android.com/guide/index.html">here</a>).</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="font-size: large;">There are several reasons for that.&nbsp;</span></div><div style="text-align: justify;">You should start thinking that any network operation has a cost, in terms of bandwith and cpu power. Every time you turn the radio on involves consuming (a lot of) battery power, performing the request and parsing the result involves cpu (and therefore) battery power, <b>so any network operation is precious and you do not want to waste any performed request result</b>.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Said that, you should (must?) be aware that your activity might be killed at any time.. well, not at any time but as soon as it&#8217;s not foregrounded anymore, which is something that is likely to happen if your beloved user chooses to leave your application in favour of candy crush, or if he receives an incoming phone call. </div><div style="text-align: justify;">BUT, the <b>result of a request started inside that activity might still be useful for a latter use</b>, so you do not want your request to be killed together with the activity that hosted it.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Moreover, you should be aware that every time a &#8220;configuration change&#8221; occurs, which is what commonly happens when the device gets rotated, the current activity gets killed and recreated.&nbsp;</div><div style="text-align: justify;">Well, guess what? <b>That ongoing request that costed you a lot of power / cpu is lost, and its result with that</b>. Even worse, it&#8217;s not completely lost, but it might be notified to a leaked activity that nobody will look at anymore because the current one is the one which was recreated. There are ways to circumvent this, like hosting the components that you want to survive to a configuration change inside a <a href="http://www.vogella.com/tutorials/AndroidFragments/article.html#headlessfragments">headless fragment</a>, but again, you should be very careful.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Finally, given that you want to host the interaction with the service inside the activity, and because the activity is guaranteed to be active only as long as it is in foreground, it is obvious that in this way <b>is impossible to schedule requests</b> to be performed while the application is not being used.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Malus point: if you have a <i>god activity</i> that handles the UI interaction, a component like a AsyncTask or a Thread that is in charge of performing the request, the real interaction with the service AND the interaction with the activity in order to update the UI, well, you are likely to have a poor encapsulation of your code and you might have some issues while testing your code.</div><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-uv98YZgJtOA/UwZwlqMlBKI/AAAAAAAAMWY/i68I8z_M-uE/s1600/fry.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-uv98YZgJtOA/UwZwlqMlBKI/AAAAAAAAMWY/i68I8z_M-uE/s1600/fry.png" height="240" width="320" /></a></div><h2 style="text-align: center;"><span style="font-size: large;">So where am I supposed to perform the calls?</span></h2><h3 style="text-align: center;">&nbsp;</h3><div style="text-align: justify;">The answer is pretty simple. Use a Service, which is <i>&#8220;is an application component that can perform long-running operations in the background and does not provide a user interface&#8221;</i>, so it&#8217;s just right for our purpouse. The idea here is to host that <b>rest call inside a service</b>, so it can survive to any activity lifecycle event. </div><div style="text-align: justify;">There are a couple of ways to interact with a service, you can throw intents at it, or you can bind your activities to it. In the latter case, you&#8217;ll get back a reference to the whole service object, and so you are able to implement a rich api your activity can interact with.</div><div style="text-align: justify;">On the other hand, you should be careful and stop your service when you do not need it anymore (ie when all the requests are satisfied), and you should also remember that you (still) need to host your asynchronous interaction inside of some kind of threaded component.&nbsp;</div><div style="text-align: justify;"><br /></div><h3 style="text-align: justify;"><span style="font-size: large;">IntentService!</span></h3><div style="text-align: justify;">Are my favourite flavour of services when speaking of rest interaction. Why is that?</div><ul><li>IntentService(s) provide only a <i>onHandleIntent</i> method, which is performed inside a different thread. No need to spawn an asynctask</li><li>IntentService(s) get destroyed as soon as <i>onHandleIntent</i> returns. No need to understand (or risk to forget) when the service needs to be shut down.</li></ul>Have you ever heard of <a href="http://en.wikipedia.org/wiki/Command_pattern">Command Pattern</a> ? You can just embed your requests parameter inside the intent, parse them in <i>onHandleIntent</i> and let the <i>intentservice</i> execute the request for you. Isn&#8217;t that cool?<br /><br /><br /><h2><span style="font-size: large;">Cool! Now I have the data I retrieved from the service, what should I do with that?</span></h2><div style="text-align: center;"><br /></div><div style="text-align: justify;"><span style="font-size: large;">Store it!</span> The two most common alternatives are <b>plain sqllite or using a content provider</b>. The first benefit of using some kind of persistant storage is that <b>you don&#8217;t want to perform the same costly request twice in order to retrieve the same data</b>.</div><div style="text-align: justify;">Moreover, storing the data enforces the decoupling of your service with the activity, since the activity will fetch the data from the storage, regarless of when the storage was filled. This is also better in terms of user experience, because it&#8217;s better to find some kind of data instead of an empty listview if the device is offline.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Bonus point! If you want to perform the inserts a bit faster, check if you can fetch only new data, if the apis you are consuming are offering any kind of timestamp parameter. Plus, remember to use transactions and bulkinserts in order to speed up your inserts.</div><h2 style="text-align: justify;"></h2><h2 style="text-align: justify;"><span style="font-size: large;">Anything missing?</span></h2><div style="text-align: justify;">Ok, your activity asked to the service to perform the request, the request was performed, the result parsed and stored in your content provider. You should now notify the activity that the storage contains something new.&nbsp;</div><div style="text-align: justify;">You have some options:</div><ul><li>Bind the activity to the service and pass a callback</li><li>Use <a href="http://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager.html">(local) broadcasts </a></li><li>Use a message bus (<a href="http://square.github.io/otto/">Otto</a>, <a href="https://github.com/greenrobot/EventBus">eventbus</a>)</li></ul>Or if you are using a content provider, you could take advantage of CursorLoader / <a href="http://www.grokkingandroid.com/use-contentobserver-to-listen-to-changes/">Observers </a>, which I think are the less error prone way to feed a listview out of a content provider&#8217;s data.<br /><br />You just need to remember to add a couple of lines of code:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-hX1BW7VBeHo/UwZ43lS-BBI/AAAAAAAAMWo/N5b4R1G8AGM/s1600/DroidconIt.034.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-hX1BW7VBeHo/UwZ43lS-BBI/AAAAAAAAMWo/N5b4R1G8AGM/s1600/DroidconIt.034.jpg" height="480" width="640" /></a></div><br /><h2><span style="font-size: large;">Final result:</span></h2><br />The final picture of this kind of architecture is the following (please forgive my extremely bad design skills):<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-GZBxeNRISk0/UwZ5O3Q8D0I/AAAAAAAAMWw/JzGE9krKL88/s1600/DroidconIt.035.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-GZBxeNRISk0/UwZ5O3Q8D0I/AAAAAAAAMWw/JzGE9krKL88/s1600/DroidconIt.035.jpg" height="480" width="640" /></a></div><br />Please note how the the activity asks the Service to perform the request with the webservice and then forgets about it. Any time the data needs to be displayed, it&#8217;s always fetched from the storage.<br />The only other interaction happens when the service tells the activity it needs to reload the data.<br />In this way, any ongoing request will survive even if the activity gets killed. When the user will return to your application, the newly created activity will load the latest fetched data from the storage.<br /><br /><br />This was the first post related to the <b>Rest Interaction in Android</b>. I really hope I did not say too many wrong things&#8230;<br /><br />If you liked this post, consider following me on twitter @fedepaol. <br /><br /><br /><br /></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>kalyanblog</div>
<div class='content'>
HI<br />Nice article.<br />I got a question about one of the common situations, when you get some data from server, that is already sorted on the server, and we don&#39;t have enough fields to sort it on the client. Should we persist this data? And what should we do on another request? Clear table?<br />Thanks</div>
</div>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
@Michal:<br />Let&#39;s distinguish between notifying the activity and then having it update itself. ContentProviders plus loaders offer a full solution via observers, so you don&#39;t have to worry about anything.<br /><br />On the other hand, if you want to notify the activity in some other way, you can:<br />- use a messagebus<br />- use (local) broadcasts<br /><br />Once the activity knows that the underlying storage has new content, again, you have a lot of ways depending on how you stored the data. <br />Again, you can use custom loaders (my favourite one is https://github.com/commonsguy/cwac-loaderex . Alternatively, you can use asynctask, native threads or any async way to interact with your storage.</div>
</div>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
@CristianC:<br />Gave a quick look at your groundy lib, it looks like it&#39;s a slick way to perform async interaction inside a service. My only concern is about passing a callback object instead of registering / unregistering a listener. By doing that, you can only return the result to the calling activity. Worse than that, it looks like (if I understood correctly, sorry it&#39;s a bit late here) you are not using weak references, so you might leak the activity in case the reference is being held but the activity is not active anymore.</div>
</div>
<div class='comment'>
<div class='author'>Michal Kejzlar</div>
<div class='content'>
Thank you for your post, good points there. What would you recommend for observing changes in storage without having Content Provider and loaders? E.g. storing data via dao objects telling to activity via EventBus and then what? Having ugly AsyncTask for querying the database?</div>
</div>
<div class='comment'>
<div class='author'>Cristian C</div>
<div class='content'>
Hi Federico.<br /><br />Have you taken a look at github.com/telly/groundy ?<br /><br />It makes interaction between Service and Activity easier.<br /><br />Disclamer: I wrote the library.</div>
</div>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
@Andy Res:<br /><br />I don&#39;t think you can &quot;natively&quot; stop an intentservice once you launched it. However, what you can do is letting it discover that you are not interested in it anymore. This http://stackoverflow.com/a/7893398/504596 sounds like a reasonable solution. However, despite being a big fan of them, I admit that this is a big limit of IntentService. Another limitation is that you cannot prioritize requests. This is because you are implicitly relying on the Intent queue instead of explicitly using one (or a library that use a queue). In any case, I would also say that in most common use cases, once you start a request you are unlikely to want to delete it. Still, think about updating your twitter feed. If you launch an update, you want the request to be completed even if the user leaves the application.<br />Hope my reply makes sense :-)</div>
</div>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
@Vang:<br /><br />I assume you are talking about how to handle the endless data, not how to display it by using some kind of endless listview. In any case, I&#39;d say that how you want to handle it depends on the data you want to display and on the kind of your application. If you really have an &quot;endless&quot; == almost infinite amount of content, what you can do is just provide a &quot;window&quot; on the data that is held on the server, the same way any twitter client does by showing only the latest tweets and by performing a new get whenever you approach the end of the list. If, on the other hand, you have a HUGE amount of content you always want to be synched on your device, this is a more complex topic to discuss. The &quot;easiest&quot; way would be letting the remote server be the master of your data, and perform a full delete before you download all the new data. From that, several optimizations can be implemented. One can be having a timestamp related to the whole resource, and not performing the sync if your device already has the latest version. More complex optimizations are harder to implement by using a restful interface, because you can&#39;t tell it &quot;just send me the data changed since xxx or even the data deleted since xxx&quot; in order to allow you to apply those differences (at least, not that I am aware of). Sorry for the delay in the reply, but I have been a bit busy in the latest couple of days.<br /><br /></div>
</div>
<div class='comment'>
<div class='author'>Andy Res</div>
<div class='content'>
Thank you for the very useful info.<br /><br />What could you tell in regards to requests cancelation while using IntentService?<br /><br /><br /><br /></div>
</div>
<div class='comment'>
<div class='author'>Vang</div>
<div class='content'>
Hello, Federico. Could you explain how can we handle a case with endless list of content? As i understand we should download all content and find changes to persist. In general the main question is: How to maintain consistency beetween remote and local database? Thank you.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contributing to Firefox for Android]]></title>
    <link href="http://fedepaol.github.io/blog/2013/07/29/contributing-to-firefox-for-android/"/>
    <updated>2013-07-29T00:00:00+02:00</updated>
    <id>http://fedepaol.github.io/blog/2013/07/29/contributing-to-firefox-for-android</id>
    <content type="html"><![CDATA[<div class='post'>
<br />In the past two / three years I have been (mostly) developing Android code, <a href="http://fedepaol.github.io/blog/2010/11/10/something-more-about-me">even before it was cool</a>(tm), as a way to do something different from what I do during my day time job.<br /><br />I wrote some <a href="https://play.google.com/store/search?q=federico+paolinelli&amp;c=apps">apps</a>, a couple of <a href="https://github.com/fedepaol">libraries</a>, and some 80% finished projects I really hope I will finish some day.<br /><br />Recently I thought that joining some big android related open source project could have been interesting, and I went for them.<br /><br /><br />That&#8217;s <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=731491">when</a> I found <a href="https://play.google.com/store/apps/details?id=org.mozilla.firefox">Firefox for Android</a> (code name fennec). There are several reasons why I choose it. It&#8217;s one of the most complex / active open source projects, I <a href="http://www.joshmatthews.net/fosdem/">spotted these slides</a> on my g+ stream and I decided to give it a spin.<br /><br /><a href="http://www.flickr.com/photos/tambako/5964400251/"><img src="http://farm7.staticflickr.com/6126/5964400251_8dd37a206a.jpg" /></a><br /><br /><span style="font-size: xx-small;">(Some rights reserved, cc licenze by &#8220;Tambako the Jaguar&#8221;)</span><br /><br /><br /> I must admit that I was not using fennec as my primary browser on android.<br /><br />This is my first experience in a (quite) big open source software project, and now I spend on fennec all of the free time I devote to developing (and I really like it).<br /><br /> <br /><h3> What was *totally* a surprise,</h3>&nbsp; is the fact that fennec is very far from a &#8220;plain android&#8221; project. When I first started, I (wrongly) expected to find an android project where I could reuse the stuff I knew from before, and I ended up working on a lot of javascript (which I never used before).  The project is various and I like the mixture of js, c++ and regular android, and I find this challenging, even if the code read / written ratio has become really huge. Hope this will get better with time.<br /><br /><br /><br /><h3> Working on it is harder than a regular android project.</h3>&nbsp; Forget intellij, eclipse or android studio. Forget debugging, or at least expect attaching a command line debugger to your code to be tricky. Slow build time (a full build takes something like 2 hour and half on my laptop).<br />Incremental builds time and upload to the device may take up to 2-3 minutes. I got back to the really old times when I wrote most of my code using vim and figuring out what was happening through logs.<br /><br /><br /><h3> You can get a lot of help from the mobile team,</h3>&nbsp; but you need to ask. A lot. Think of your average day. A lot of work to be done. Bugs coming, code to be written. Now think about some guy, who never wrote a line of code on the project you are working on, coming and asking some dumb or obvious questions. You are that guy.<br />That&#8217;s what must be their point of view (hope I am making less dumb questions). But they are helpful, even on monday mornings. You just have to ping <a href="https://wiki.mozilla.org/IRC">them on irc.</a><br /><br /><br /><h3> Did I say it is hard at first?</h3>&nbsp; The <a href="http://www.joshmatthews.net/bugsahoy/?mobile=1">bugs ahoy page</a> makes it quite easy to find a bug to start with, and the <a href="https://wiki.mozilla.org/Mobile/Fennec/Android">build instructions</a> are dumb proof. But then, it feels like being thrown in the middle of the jungle with a pocket knife. A huge codebase, xul interfaces, javascript, C++ code, Xpcom interfaces, no idea of which function is calling what. <br />The documentation is there, but it&#8217;s hard to figure out where to start from.<br />But if you are not worried about pinging and pinging people on irc, you will be given all the answers you need in order to get better and go ahead, and you will learn about all the tools at your disposal that help a distributed team to work better, such as <a href="http://mxr.mozilla.org/">mxr</a>, <a href="http://pastebin.mozilla.org/">pastebin</a> and <a href="https://etherpad.mozilla.org/">mopad</a>, or <a href="https://developer.mozilla.org/en-US/docs/Developer_Guide/How_to_Submit_a_Patch">how to submit a patch</a>&nbsp;using <a href="https://developer.mozilla.org/en-US/docs/Mercurial_Queues">hg queues</a>.<br /><br /><br /><h3> Is it worth it?</h3><b>&nbsp; Definetely</b>. As I wrote before, I am currently spending all the spare time I devote to side projects writing code for Fennec. Or I should say, reading a lot of code and writing some code. The &#8220;aha&#8221; moment when you realize that you understand how things work after grepping and digging into interfaces and callbacks has no price and it&#8217;s something I haven&#8217;t experienced for a long time.<br />Moreover, it&#8217;s exciting to interact with the mobile team, they all are passionate about what they are doing and very capable, not to mention that you will be forced to produce high quality code in order to pass the reviews.<br /><b>&nbsp; Finally</b>, the fact that you are contributing something bigger than that <a href="https://play.google.com/store/apps/details?id=com.whiterabbit.pastimer.lite">pasta cooking timer app</a> , and that your code will run in the hands of a lot of users is huge. I am not an opensource software integralist, despite having written a decent amount of it, but the <b>freedom message shared by the mozilla foundation is something it feels nice to be part of.</b><br /><br /><br /> <br /> Not to mention the tshirt I received and the &#8221;<a href="https://badges.mozilla.org/en-US/badges/badge/Friends-of-the-Mobile-Team/awards/1002">friend of mobile team</a>&#8221; badge I was awarded :-)<br /><br /><a href="http://1.bp.blogspot.com/-Qrsy0iSfC-w/UfbaCd153iI/AAAAAAAAMCA/iW7Pa0xXMFI/s1600/IMG_20130729_224220.jpg"><img border="0" src="http://1.bp.blogspot.com/-Qrsy0iSfC-w/UfbaCd153iI/AAAAAAAAMCA/iW7Pa0xXMFI/s320/IMG_20130729_224220.jpg" /></a><br /><br /><br /><br /><br /></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
Thanks mrlachatte. Did not realize that my first contribution was getting live until now!</div>
</div>
<div class='comment'>
<div class='author'>mrlachatte</div>
<div class='content'>
It&#39;s FF 23 release day, and I saw your name in the list on https://blog.mozilla.org/community/2013/08/05/firefox-23-new-contributors/. Congratulations on having your first contribution be released to our many users!</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DroidAlone - Reloaded]]></title>
    <link href="http://fedepaol.github.io/blog/2012/11/25/droidalone-reloaded/"/>
    <updated>2012-11-25T00:00:00+01:00</updated>
    <id>http://fedepaol.github.io/blog/2012/11/25/droidalone-reloaded</id>
    <content type="html"><![CDATA[<div class='post'>
Whenever I speak with another android developer, the occasional chat goes to &#8220;what did you develop?&#8221; question.<br />Last time it happened at droidcon uk, and for the first time I felt something wasn&#8217;t completely right when I showed my DroidAlone app.<br /><br />DroidAlone is a useful app (so they say) that comes into play whenever you forget your phone at home. With a simple sms protected by a password choosen by the user, it can be activated. From that moment, it will start notifying you of any missed calls and sms. It also ships a lot of other nice features, such as phone location retrieval and auto reply via sms (if you want to inform the caller that he can reach you to another number).<br />The full description of DroidAlone can be found at&nbsp;<a href="http://www.fedepaolapps.com/app/droidalone/">Missed Calls for Android</a>&nbsp;.<br /><br />Everything seems to work well, it has a lot of good reviews and the few users are happy.<br />Except one thing. It looks (looked) like this:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://www.fedepaolapps.com/wp-content/uploads/2012/09/main_screen1.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://www.fedepaolapps.com/wp-content/uploads/2012/09/main_screen1.jpg" width="213" /></a></div><a href="http://www.blogger.com/"></a><span id="goog_1451563458"></span><span id="goog_1451563459"></span><br />It also had another view with the list of events. The other developer&#8217;s reaction was &#8220;ugh&#8221;. And then I realized that I can&#8217;t keep producing new stuff ignoring what I have around, especially if this is the case of the only app I manage to sell a bit.<br /><br />So, when I got home I decided to change the ui &#8220;just to make it more pleasant&#8221;. &nbsp;Then I opened the code, and I realized that my two year&#8217;s old code needed a bit more than a refresh.<br /><br />Here what was wrong:<br /><br /><ul><li>it used tabactivity, which is very old fashioned. I decided to add the actionbar.</li><li>from the event list view, you had to click on the item to see the details of the event. The details where shown into a dialog. Ugh (again). In the new version I wanted all the details to be visible since they are not so long.</li><li>All the properties of the views in the layouts where explicit. No styles anywhere. The color resources where &#8220;background_color&#8221;, or &#8220;title_color&#8221; instead of some name that remind you the color. I had to put a heavy hand on that.</li><li>I tried to use gridlayout a lot since it seem to be the more efficient way to dispose a layout.</li><li>There was no empty list information.</li><li>A lot of calls where deprecated. I switched to the most modern versions.</li><li>All the data was contained in a sqllite storage without using a content provider. I switched to using a content provider and a cursorloader, which ended up in a more compact code. I didn&#8217;t need anymore to use a broadcast to notify the ui that the data was changed.</li><li>DroidAlone uses broadcast receivers to be notified of incoming calls / sms. Even tough the sms receiver must be enabled because an activation sms can be received at anytime, the call receiver is needed only when the app is active. I then used the package manager to disable it when not needed.</li><li>I wanted to refactor a lot of code. A lot of brackets where on the new line instead of the same line of the method (a la C), and it bothered me a lot. I also trusted lint and changed a lot here and there.&nbsp;</li></ul><div><br /></div><div>Other than these things, I redraw (by my self) a lot of the assets using inkscape. Because I soon got bored to export the resources in 4 different resolutions folders, I wrote a simple python script to do that for me. You can find it <a href="https://gist.github.com/4127778">here</a>&nbsp;.</div><div><br /></div><div>More than that, I got REALLY REALLY bored while writing the content provider, so I ended up writing another python script to automatically generate the content provider for me, as described in my previous <a href="http://fedepaol.github.io/blog/2012/11/11/android-content-providers-generator">post</a>. You can find the <a href="https://github.com/fedepaol/Android-sql-lite-helper">android content provider generator here</a>.&nbsp;</div><div><br /></div><div>Finally, I switched the project to maven because I am getting used to that solution, especially in case I want to add robolectric tests and keep working with intellij.</div><div><br /></div><div>The new version of the app hasn&#8217;t been released yet (I want to have it running for a while on my phone before releasing it, just to be sure that I didn&#8217;t break anything).</div><div><br /></div><div>This is how the new version will look like&nbsp;</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-KFbMTLsxs5w/ULKCXaGOnLI/AAAAAAAAJS4/CVeElRWX6wA/s1600/screen3.tiff" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-KFbMTLsxs5w/ULKCXaGOnLI/AAAAAAAAJS4/CVeElRWX6wA/s320/screen3.tiff" width="194" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">So, this is how a &#8220;little ui polishing&#8221; ended lasting more than two weeks (of my spare time). I am also glad that I think my old code is not that good. I like to think that I am better than two years ago.</div><div><br /></div><br /><div class="separator" style="clear: both; text-align: center;"><br /></div><br /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Content Providers Generator]]></title>
    <link href="http://fedepaol.github.io/blog/2012/11/11/android-content-providers-generator/"/>
    <updated>2012-11-11T00:00:00+01:00</updated>
    <id>http://fedepaol.github.io/blog/2012/11/11/android-content-providers-generator</id>
    <content type="html"><![CDATA[<div class='post'>
During the refactoring of my two years old app DroidAlone, I decided to try to access to the storage through a ContentProvider.<br /><br />Even if the official documentation warns that there is no need to use content providers if your app does not want to export it&#8217;s data against other apps, there are a bunch of advantages in using a content provider in your app.<br /><br />The main and more obvious advantage is that you can use a Loader with your data. Using loaders relieve you from managing the cursor, forgetting open cursors here and there and most of all, makes a lot easier for your ui to react to changes in your model. Well, more than easier, you don&#8217;t have to do anything.<br /><br />However, I am not writing this post to describe how to interact with an android content provider, nor how to implement a content provider. There are a lot of content provider tutorials out there that probably can explain how them work better than I could possibly ever do (and in a better English).<br /><br />I am writing this post because while writing the content provider, I got bored.<br />It&#8217;s a lot of code, always the same, that cannot be avoided, and you don&#8217;t have to add any value to it. The best thing you can do is not getting distracted and write it with no errors. And it&#8217;s loong (ok, not that long).<br /><br />Given the &#8220;boilerplateness&#8221; of this problem, I thought I could take off some dust from my old <a href="http://fedepaol.github.io/blog/2010/11/18/my-sqllite-helper-builder">SqliteHelper builder script</a>&nbsp;and maybe make it able to generate the content provider class for me. And that&#8217;s what I did.<br /><br /><h3>Android Content Provider Generator</h3><br /><a href="https://github.com/fedepaol/Android-sql-lite-helper">https://github.com/fedepaol/Android-sql-lite-helper</a><br /><br />I added a couple of options to it, and now it can generate automatically for you (no more cut/paste, no more forgotten columns) the content provider class AND a client class with a bunch of methods you can use to add / update / delete / query your data.<br />A sample of the generated code is already included in the beta of my app and it seems to work properly.<br /><br />I won&#8217;t write any instructions or examples here, they are already in the github repo.<br /><b>All you need to know is that with a 10 rows text file that describes your data, you can generate the whole content provider</b>.<br /><br />As <a href="https://plus.google.com/105096943850026101634/posts/RTbp2zVPZQq">I wrote on G+</a>, it&#8217;s certainly not the most elegant piece of python I wrote, but it makes it&#8217;s job.<br /><br /><br /><br />If you liked this post (or my script), consider following me on twitter @fedepaol<br /><br /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DroidconUk 2012]]></title>
    <link href="http://fedepaol.github.io/blog/2012/10/29/droidconuk-2012/"/>
    <updated>2012-10-29T00:00:00+01:00</updated>
    <id>http://fedepaol.github.io/blog/2012/10/29/droidconuk-2012</id>
    <content type="html"><![CDATA[<div class='post'>
Here I am, back again from my third DroidconUk experience.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-dfNEw8CwymY/UI7dRBZVlzI/AAAAAAAAJBw/JqUhyGTyHZE/s1600/IMG_20121029_204517.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="http://1.bp.blogspot.com/-dfNEw8CwymY/UI7dRBZVlzI/AAAAAAAAJBw/JqUhyGTyHZE/s320/IMG_20121029_204517.jpg" width="320" /></a></div><br /><br />I can still remember explaining to my non tech friends what Android was the evening of the 1st droidcon, and since then it became a sort of ritual, a couple of days when I can take some rest from my day time job and take part to the community of some of the best android developers coming from all over the Europe.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-YsYHqWhHMHk/UI7eDIWeCqI/AAAAAAAAJCA/b3Dv80SwVLk/s1600/IMG_20121026_190855.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="http://1.bp.blogspot.com/-YsYHqWhHMHk/UI7eDIWeCqI/AAAAAAAAJCA/b3Dv80SwVLk/s320/IMG_20121026_190855.jpg" width="320" /></a></div><br /><br /><br />It&#8217;s an (almost) cheap to flight from Pisa (IT) where I live to London, and I can always count on my architect friends from <a href="http://www.marcelmauer.eu/">Marcel Mauer</a> for accommodation.<br /><br /><br />My overall impression is that droidcon is getting better and better. It&#8217;s growing as much as the Android &nbsp;platform itself, and despite all the interesting talks the better part is still the people you can meet there BETWEEN the talks. Even if you are as shy and sociopath as I am.<br /><br /><br />Most of the talks where very instructive and I heard about a lot of new stuff I can reuse on my side projects.<br /><br /><br /><br />Here I will put a short list of what are the things I liked most (as a kind reminder for me but also for any occasional reader that lands on this page by chance).<br /><br /><br /><br /><h2>The talks:</h2><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-cJwI92KmcAA/UI7hSI-I9wI/AAAAAAAAJDY/PcojASjug88/s1600/IMG_20121025_142744.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="http://1.bp.blogspot.com/-cJwI92KmcAA/UI7hSI-I9wI/AAAAAAAAJDY/PcojASjug88/s320/IMG_20121025_142744.jpg" width="320" /></a></div><div><br /></div><div class="separator" style="clear: both; text-align: center;"></div><div><br /></div><div>I am not following a proper order if not the chronological one. I really enjoyed all the talks.</div><h3>The keynotes:</h3>It&#8217;s official. They are putting Android everywhere. Three keynotes for three Android related product which where not phones nor tablets.<br />- Ouya, the famous kickstarter funded android gaming console<br />- Vendscreen, an android based vending machine (!)<br />- Parrot android based car stereos.<br /><br /><h3>Building songkick for Android&nbsp;(<a href="https://speakerdeck.com/jdamcd/building-songkick-on-android">slides</a>):</h3>Askay and Jamie from Novoda show their professional approach to build the songkick app. A lot of interesting tips and best practices from them. Really liked the &#8220;writing good code is always faster than writing bad code&#8221; approach.<br /><br /><h3>Overcoming device fragmentation:</h3>Jan and Jon from SoundCloud had a bad time dealing with sound infrastructure in Android, especially from a multi device perspective.<br />It&#8217;s not an aspect of the platform I have never addressed that much, but I really enjoyed their story about going from the simple system call up to get the hands dirty with bringing on board ogg library through ndk. I also liked the fact that at first they tried to deal with java version, because it&#8217;s something I would do as well.<br /><br /><h3>The fly in app menu for designers and developers (<a href="https://speakerdeck.com/cyrilmottier/the-fly-in-app-menu-for-designers-and-developers">slides</a>):</h3>Cyril Mottier (&nbsp;we may remember him for Greendroid) made a gorgeous presentation on this navigation pattern which is getting more and more popular (but don&#8217;t use it just because it&#8217;s à la mode).<br />The presentation was a proper walkthrough on why and when one should use the new pattern (and when one shouldn&#8217;t). During the talk he gave a lot of tips on how the correct user experience should be. Very inspiring.<br />If you want to bring this pattern in your app and you can&#8217;t affort to develop it &#8220;in house&#8221; as Cyril did, there are a couple of libraries that implement it for us:<br /><a href="https://github.com/eddieringle/android-undergarment">https://github.com/eddieringle/android-undergarment</a><br /><a href="https://github.com/jfeinstein10/SlidingMenu">https://github.com/jfeinstein10/SlidingMenu</a><br /><a href="https://github.com/SimonVT/android-menudrawer">https://github.com/SimonVT/android-menudrawer</a><br /><br /><br /><h3>Beaming data to devices with nfc (<a href="http://www.slideshare.net/commonsguy/beaming-data-to-devices-with-nfc">slides</a>):</h3>Mark Murphy from CommonsWare introduced what (and how) can be done with an nfc enabled phone through a royalty free spy story. Interesting and funny as always, the talk of Mark is worth the ticket by itself (well, his talk and the free beers I had).<br />It&#8217;s a good starting point when I will look into nfc, which might be very soon.<br /><br /><br /><h3>Fast, user friendly and power efficient network communication with android (<a href="http://developer.sonymobile.com/downloads/documentation/fast-user-friendly-and-power-efficient-network-communication-on-android/">slides</a>):&nbsp;</h3>Another series of super tips from Erik Hellman on how you should perform networking in a proper manner.<br />Still, stuff I read here and there but still useful.<br />He also mentioned <a href="http://netty.io/">netty.io</a> library, which is something I should definitely check, since my current project involves plain socket operation and I implemented it my self (the android way).<br /><br /><br /><h3>Introduction to Google Tv (<a href="http://www.slideshare.net/OpenWorldForum/owf12paug-conf-days-google-tv-part-1-introduction-matt-gaunt-advocate-at-google">slides</a>):</h3><div>Google Tv looks to be the next big thing. I have never dig into the docs but it really looks like a new whole world. Apart from the different challenges that we can have developing a tv ui, I really like the idea of having it interact with our personal devices.</div><br /><br /><br /><h2>The libraries:</h2><br /><h3>Polaris (<a href="https://github.com/cyrilmottier/Polaris">link</a>):</h3><a href="http://android.cyrilmottier.com/">Cyril Mottier</a>&nbsp;(yes, still him) delighted us with Polaris, his map library to enhance the poor experience available from standard map apis.<br /><br /><h3>RoboSpice (<a href="https://github.com/octo-online/robospice">link</a>):</h3><div>The french guys from Octo (sorry I can&#8217;t remember the name of the speaker) presented their awesome RoboSpice library, a library to perform asynchronous jobs (and a lot more) on steroids.&nbsp;</div><div>I was really interested in this talk because of my previous attempt to build something (barely) similar with&nbsp;<a href="http://fedepaol.github.io/blog/2012/01/postmanlib-android-and-rest-web.html">Postman Lib</a>&nbsp;. Unfortunately I never had time to polish it and it&#8217;s still an unfinished product. Moreover, the guys from Octo made a better job under every aspect of object reusing and performance, dealing with issues I would have never fix even if I took the library to a decent state. I am quite curious to dig into their code just for the fun of it :-)</div><div><br /></div><h3>OpenCv:</h3><div>Erik Hellman from Sony introduced how opencv library for computer vision can be (almost) easily integrated into an android app. Still, something I would always loved to play with, maybe I will if I get some extra spare time.</div><br /><br /><h3>NetMera (<a href="http://www.netmera.com/pages/web/home">link</a>):</h3>Well, this is not a real library, but it&#8217;s a brand new concept (at least, new to me) for a platform as an sdk. &nbsp;It was introduced by Friedger Muffke during his talk&nbsp;<a href="https://docs.google.com/presentation/d/1GjAWqrB-OrEtsoudPLMq1KUEwjSuPygHmNBjv1FEq0A/edit">&#8220;Serverless Android Applications&#8221;</a>. They provide a full remote backend without having you bother at all for it. Sounds like the holy grail for&nbsp;<i>developers with no time(tm)&nbsp;</i>but I don&#8217;t like the idea of having my code bound to a specific service.<br /><br /><br /><h2>Talks I missed:</h2><div>I was told that this talks were excellent:</div><div>- <a href="http://prezi.com/fh2uslbr1xs3/the-fragment-transition/">The fragment transition</a>&nbsp;by Corey Latislaw</div><div>- <a href="https://docs.google.com/presentation/d/1OcGVS5bci9jaYiI7uvXFf9asj5TS4xZa72LX-i8lEcs/present#slide=id.p25">Writing games for an Android video game console</a>&nbsp;by Al Sutton</div><div>- Proguard by Eric Lafortune</div><div>-&nbsp;Dynamic animations with custom views by Anders Ericsson</div><br /><br /><h2>Epilogue:</h2>I had a great time at droidcon, I really enjoyed it under every aspect (even though I suspect I still have to digest an hotdog of two from the dinner of Thursday). It really boosted my hunger for learning new things. As an immediate effect I decided to polish my old apps, those I developed three years ago which now look ugly and old (the code as well).<br /><br />See you next year, DroidConUk!<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-yzyd64vYHrA/UI7eL43qhqI/AAAAAAAAJCI/Ua-AJTnGAu8/s1600/IMG_20121027_072842.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/-yzyd64vYHrA/UI7eL43qhqI/AAAAAAAAJCI/Ua-AJTnGAu8/s320/IMG_20121027_072842.jpg" width="240" /></a></div><span style="font-size: x-small;">(This picture was taken at Liverpool Street while waiting for the bus to Stanstead Airport). Way too early for a Saturday morning.</span><br /><br /><br /></div>

]]></content>
  </entry>
  
</feed>
