<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | My little Android warehouse]]></title>
  <link href="http://fedepaol.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://fedepaol.github.io/"/>
  <updated>2015-09-13T22:05:05+02:00</updated>
  <id>http://fedepaol.github.io/</id>
  <author>
    <name><![CDATA[Federico Paolinelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unit Testing RxJava Observables and Subscriptions]]></title>
    <link href="http://fedepaol.github.io/blog/2015/09/13/testing-rxjava-with-robolectric-and-dagger-2/"/>
    <updated>2015-09-13T21:26:15+02:00</updated>
    <id>http://fedepaol.github.io/blog/2015/09/13/testing-rxjava-with-robolectric-and-dagger-2</id>
    <content type="html"><![CDATA[<h2>Testing RxJava</h2>

<p>While catching up with the latest Android novelties I could not ignore RxJava, which seems to grow in popularity between android developers.</p>

<p>If you just heard about it, and you want to get your feet wet, I really recommend Dan Lew&rsquo;s <a href="http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/">Grokking with RxJava</a> series as a starting point.</p>

<p><strong>RxJava is asynchronous by nature</strong>, so unit testing it might seem a daunting at first, especially if you use that asynchronous interaction to test stuff. Luckily, RxJava (and RxAndroid) come with a couple of tools that will make our life a lot easier.</p>

<h2>What to (unit) test</h2>

<p>There are at least a couple of things you&rsquo;ll want to test:</p>

<ol>
<li>You will want to test the <strong>observables</strong>, meaning not only the observables you built, but also the resulting composition of the various operators you may want to apply to them.</li>
<li>Given a certain observable (or its mock), you will want to test <strong>how the rest of your application behaves while triggered by the subscription</strong>.</li>
</ol>


<h2>Testing the observables</h2>

<p>Despite the fact that a subscription is asynchronous, there are (at least) a couple of ways to make the stream of your observable synchronous.</p>

<p>The first way is by using
<code>Java
ResultToCheck res = myObservable.toBlocking().first();
</code></p>

<p>This works because <a href="http://reactivex.io/RxJava/javadoc/rx/Observable.html#toBlocking%28%29">toBlocking</a> converts the observable to a blocking one, while <a href="http://reactivex.io/documentation/operators/first.html">first</a> returns the first emitted element.
The calling code will wait synchronously until the observer calls onCompleted().</p>

<p><strong>The official way to test an observable</strong> is by using a <a href="http://reactivex.io/RxJava/javadoc/rx/observers/TestSubscriber.html">TestSubscriber</a>, an helper subscriber provided directly by the RxJava framework.
As with toBlocking, a test subscription is synchronous.
Here you can find an example:</p>

<pre><code class="Java">Observable&lt;RubberChicken&gt; obs = obsFactory.getObservable();
TestSubscriber&lt;RubberChicken&gt; testSubscriber = new TestSubscriber&lt;&gt;();
obs.subscribe(testSubscriber);

testSubscriber.assertNoErrors();
List&lt;RubberChicken&gt; chickens = testSubscriber.getOnNextEvents();
// Assert your chickens integrity here
</code></pre>

<p><code>TestSubscriber</code> comes with a bunch of helper methods for testing, like specific assertions and other stuff. On top of that, its <code>getOnNextEvents()</code> method is blocking and  will return all the emitted items as elements of a list.
This is a neat way to test not only your observers, but also to check if the compositions you put in place are working as expected. That makes testing observables super easy.</p>

<h2>Testing the subscription</h2>

<p>Once your observables are in place, you will likely to be observing them on some thread, and subscribing them on some other thread. This will make it harder for us to test how our activity (or fragment) reacts to a triggered subscription.</p>

<p>RxJava (and RxAndroid) provide a way to override the schedulers exposed when <code>Schedulers.io()</code> or <code>AndroidSchedulers.mainThread()</code> are called. By replacing them with <code>Schedulers.immediate()</code>, your code will run immediately and you&rsquo;ll be able to see its results.</p>

<p>The solution is a bit hacky, since we need to call <code>reset()</code> method before overriding RxJava&rsquo;s schedulers, which is package protected. I <em>took inspiration</em> from Alexis Mas&#8217; <a href="http://alexismas.com/blog/2015/05/20/unit-testing-rxjava/">blogpost</a> extending RxJavaPlugins class (there no need for that with RxAndroid):
&#8220;`Java
package rx.plugins;</p>

<p>public class RxJavaTestPlugins extends RxJavaPlugins {
    RxJavaTestPlugins() {
        super();
    }</p>

<pre><code>public static void resetPlugins(){
    getInstance().reset();
}
</code></pre>

<p>}</p>

<pre><code>
Registering a scheduler hook that provides a custom implemetation (Schedulers.immediate()) will end up in overriding the schedulers we are using.
This is how the `setup()` and `teardown()` methods will look like (here I am using robolectric but it makes no difference with AndroidTests):
</code></pre>

<p>@RunWith(RobolectricGradleTestRunner.class)
@Config(constants = BuildConfig.class,
application = TestRobolectricApplication.class)
public class SubscriberTest {
    private void forceImmediateScheduler() {
        RxJavaTestPlugins.resetPlugins();
        RxAndroidPlugins.getInstance().registerSchedulersHook(new RxAndroidSchedulersHook() {
            @Override
            public Scheduler getMainThreadScheduler() {
                return Schedulers.immediate();
            }
        });</p>

<pre><code>    RxJavaPlugins.getInstance().registerSchedulersHook(new RxJavaSchedulersHook() {

        @Override
        public Scheduler getIOScheduler() {
            return Schedulers.immediate();
        }
    });
}

@Before
public void setUp() {
    forceImmediateScheduler();
}

@After
public void tearDown() {
    RxJavaTestPlugins.resetPlugins();
}}
/* Your tests here */
</code></pre>

<p>}
&#8220;`</p>

<p>This, together with a non blocking observable (for instance by replacing your long taking observable with a mocked <code>Observable.just()</code>) will make our test synchronous.</p>

<p>In order to inject a mocked observable, we can override the Application object used by Robolectric,  as described in my <a href="http://fedepaol.github.io/blog/2015/09/05/mocking-with-robolectric-and-dagger-2/">previous post here</a> .</p>

<h2>Bonus point: debugging</h2>

<p>If the unit tests are not enough, and you want to check what is happening inside the chaining / transformation of the stream, you can set an <code>ObservableExecutionHook</code> that will be triggered when observables are being called:</p>

<pre><code class="Java">   private void enableRxTrack() {
        RxJavaPlugins.getInstance().registerObservableExecutionHook(new DebugHook(new DebugNotificationListener() {
            final String TAG = "RXDEBUG";
            public Object onNext(DebugNotification n) {
                Log.v(TAG, "onNext on " + n);
                return super.onNext(n);
            }


            public Object start(DebugNotification n) {
                Log.v(TAG,"start on "+n);
                return super.start(n);
            }


            public void complete(Object context) {
                super.complete(context);
                Log.v(TAG,"oncomplete n "+context);
            }

            public void error(Object context, Throwable e) {
                super.error(context, e);
                Log.e(TAG,"error on "+context);
            }
        }));
    }
</code></pre>

<h1>TL;DR:</h1>

<ul>
<li>Use TestSubscriber when testing how an observable (or a composition of observables) behaves</li>
<li>Mock your observable and override the default schedulers to test how the subscribing class works</li>
<li>Enable the tracking of your observables by registering an observable execution hook</li>
</ul>


<p>A working example (rubber chickens included) can be found on my <a href="https://github.com/fedepaol/TestingRxJava">github repo</a>.</p>

<h3>References</h3>

<ul>
<li><a href="https://medium.com/ribot-labs/unit-testing-rxjava-6e9540d4a329">Unit testing rxjava (observables)</a> by Iv√°n Carballo</li>
<li><a href="http://alexismas.com/blog/2015/05/20/unit-testing-rxjava/">Unit testing rxjava (subscription)</a> by Alexis Mas</li>
<li><a href="http://fragmentedpodcast.com/episodes/3/">This</a> and <a href="http://fragmentedpodcast.com/episodes/4/">this</a> episodes of <a href="http://fragmentedpodcast.com">Fragmented Podcast</a> where Dan Lew gave some insights about RxJava, where I heard about the scheduler overriding trick</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking With Robolectric and Dagger 2]]></title>
    <link href="http://fedepaol.github.io/blog/2015/09/05/mocking-with-robolectric-and-dagger-2/"/>
    <updated>2015-09-05T08:22:47+02:00</updated>
    <id>http://fedepaol.github.io/blog/2015/09/05/mocking-with-robolectric-and-dagger-2</id>
    <content type="html"><![CDATA[<h2>Why robolectric</h2>

<p>I&rsquo;ve been a fan of robolectric since the old days, since <a href="http://fedepaol.github.io/blog/2012/07/23/intellij-robolectric-and-android/">when Android Studio was not an option and few developers embraced IntelliJ</a>. I left it a bit behind after the introduction of Android Studio, since its support was far from optimal.</p>

<p>Things have changed, and after listening Corey Latislaw advocating its usage during <a href="http://fragmentedpodcast.com/episodes/13/">this fragmented podcast episode</a> I wanted to give it a spin. Even if there is a bit of debate over its usage, mainly because tests are performed against mocked objects instead of the real framework code, it is the fastest lane to your tdd cycle because tests are run on the local jvm instead of being packed in an apk, deployed on a device and run over there.</p>

<h2>Dependency Injection</h2>

<p>One really cool thing about robolectric 3.0 is the fact that you can override the Application object declared in your manifest with a custom one (which can inherit from your application&rsquo;s one).</p>

<p>If you are using dagger (or dagger 2) and you are using the application as the source of dependency injection for your classes, this allow to easily replace your injected objects with mocks. You can even choose which mocks inject in the setup phase of your tests.</p>

<h2>Let&rsquo;s see an example:</h2>

<p>Let&rsquo;s say you have your application class that exposes all the injected objects in a Dagger 2 fashion, and that you are using it to inject classes in your activities:</p>

<pre><code class="java">    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // stuff 
        ((MyApplication) getApplication()).getComponent().inject(this);
    }
</code></pre>

<p>Now, if we can drive the component injected within our tests, the rest of the app would use them and (hopefully) behave in a way we expect, depending on our mocks instead of the real objects.</p>

<p>The dependencies are provided by a module:</p>

<pre><code class="java">@Module
public class ApplicationModule {
    // stuff

    @Provides
    @Singleton
    GitHubClient provideClient() {
        return new GitHubClient(mApp.getApplicationContext());
    }
    // .. Provides other stuff
}
</code></pre>

<p><code>GitHubClient</code> is a Retrofit (2) powered client that helps to retrieve all the repos for a given user.</p>

<p>By using a test only application, we can provide a module from our tests.</p>

<p>Let&rsquo;s see ApplicationModule&rsquo;s mocked alter ego. Note that we can override only the dependencies that we want to mock:</p>

<pre><code class="java">public class MockApplicationModule extends ApplicationModule {
    List&lt;Repo&gt; result;
    // stuff

    @Override
    GitHubClient provideClient() {
        GitHubClient client = mock(GitHubClient.class);
        // mock behaviour
        return client;
    }

    public void setResult(List&lt;Repo&gt; result) {
        this.result = result;
    }
}
</code></pre>

<p>Now that everything is in place, we can use the mocked objects in our tests:</p>

<pre><code class="java">@RunWith(RobolectricGradleTestRunner.class)
@Config(constants = BuildConfig.class,
        application = TestApplication.class)
public class SampleTest {
    @Before
    public void setup() {
        TestApplication app = (TestApplication) RuntimeEnvironment.application;
        // Setting up the mock module
        MockApplicationModule module = new MockApplicationModule(app);
        module.setResult(mockedResult);
        app.setApplicationModule(module);
    }
}
</code></pre>

<p>From now on, the our tested activities will be injected with our mocked github client and we will be able to test their behaviour.</p>

<h2>Quirks</h2>

<p>Since the Test Application object is created before running the tests, a default application module must be provided, otherwise you&rsquo;ll get a dreaded NPE while running your tests.</p>

<pre><code class="java">public class TestApplication extends MyApplication {
    @Override
    ApplicationModule getApplicationModule() {
        if (mApplicationModule == null) {
            return super.getApplicationModule();
        }
        return mApplicationModule;
    }}
</code></pre>

<p>moreover, the dependency graph is generally built inside the Application&rsquo;s onCreate method. Given that we want to recreate it with our mocked module, I had to add a method for that:</p>

<pre><code class="java">public class MyApplication extends Application {
    // Stuff 
    @Override
    public void onCreate() {
        super.onCreate();
        initComponent();
    }

    void initComponent() {
        mComponent = DaggerRoboSampleComponent.builder()
                .applicationModule(getApplicationModule())
                .build();
    }
}
</code></pre>

<h2>Conclusion</h2>

<p>The fact that robolectric allows you to use a custom test application object (even a different one for different tests) together with dagger is an easy way to inject mock object without having to rely on ugly setters.</p>

<p>Robolectric is a fast and effective way to speed up your tdd process. All the time spent to set the tests and the mocks app is well repaid in code coverage and writing and debugging speed afterwards.</p>

<h2>See it in action (and have something to copy from)</h2>

<p><a href="https://github.com/fedepaol/RobolectricDependenyInjection">Here on github</a> I put a working example that demonstrates how to inject a mocked module using robolectring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dragging With ViewDragHelper]]></title>
    <link href="http://fedepaol.github.io/blog/2014/09/01/dragging-with-viewdraghelper/"/>
    <updated>2014-09-01T20:48:20+02:00</updated>
    <id>http://fedepaol.github.io/blog/2014/09/01/dragging-with-viewdraghelper</id>
    <content type="html"><![CDATA[<p>While working on my <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=909434">last side gig</a>, a patch to Firefox for Android to allow the urlbar to be dragged in order to show content hidden behind the main view, I had to deal with ViewDragHelper and understand how it works.</p>

<p>The final result (please note that the patch is still under review) is something like this:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/rKRIZB6nQfg" allowfullscreen></iframe></div></p>

<p>It caused me more than one headache, and for this reason I am writing this post hoping it might be helpful to anybody wanting to tinker with it.</p>

<p>ViewDragHelper&rsquo;s usage is not well documented, but <a href="http://flavienlaurent.com/blog/2013/08/28/each-navigation-drawer-hides-a-viewdraghelper">this post</a> by Flavien Laurent is the best place you could start from.</p>

<p>In order to provide a simpler example for this post, I&rsquo;ll introduce a simplified version of what I have done on Firefox, without all the extra code needed to interact with the rest of the app.</p>

<p>Let&rsquo;s start with..</p>

<h2>How touch events are handled</h2>

<p>A good source of information is the <a href="http://developer.android.com/training/gestures/viewgroup.html">official documentation</a>. However, I&rsquo;ll write a short introduction here.</p>

<p>Whenever a touch event happens, the parent view is being asked if it wants to handle that event in place of its children. This is done by calling its <code>onInterceptTouchEvent()</code> method, which should return true if the parent view wants to handle the event.</p>

<p>In case the event is trapped by the parent, its <code>onTouchEvent()</code> method gets called and it must return true if the event is handled.</p>

<p>Children view can also rebel against their parent tiranny, and disable this mechanism by calling <code>requestDisallowInterceptTouchEvent()</code>. By doing that, they ensure that the touch event wont be passed to the parent view.</p>

<p><img src="/images/touches.png" width="350" height="350" title="&lsquo;touches&rsquo; &lsquo;images&rsquo;" ></p>

<h2>How ViewDragHelper works</h2>

<p>The idea behind it is pretty simple. You register a draghelper on a container view</p>

<pre><code class="java">    mDragHelper = ViewDragHelper.create(this, 1.0f, new DragHelperCallback());
</code></pre>

<p>and then you set a couple of entry points, one to listen if a drag is being started (or is in progress), the other to handle the motion events and perform the dragging when the event is being passed to the view it registered against:
&#8220;`java
    @Override
    public boolean onInterceptTouchEvent(MotionEvent event) {
        if (mDragHelper.shouldInterceptTouchEvent(event)) {
                return true;
        }
        return super.onInterceptTouchEvent(event);
    }</p>

<pre><code>@Override
public boolean onTouchEvent(MotionEvent event) {
    mDragHelper.processTouchEvent(event);
    return true;
}
</code></pre>

<pre><code>
ViewDragHelper will be asked to check if a motion event is part of a dragging process. The behaviour of the whole dragging process is ruled by a `DragHelperCallback` instance passed on creation.
`DragHelperCallback` has method that need to be implemented to be notified of particular evens, such as:

* a change in the dragging state
* a change in the dragged view location
* when and where the dragged view was released

It also has methods used to influence the dragging behaviour:  

* clamp the position of the view / the range it can be dragged within
* check whether a particular subview can be dragged

A whole drag process is intended a sequence of `Down` / `Move` / `Up` events over a particular target view.
Whenever a drag process starts, ViewDragHelper finds the topmost child that contains the location of the motion event, and asks us if that particular view can be dragged or not in `tryToCaptureView()` method.  
This is *more or less* the theory involved in the dragging process. On top of that, ViewDragHelper offers also `settleAt` methods to let the views settle to their rest location gracefully.

Since explaining in words it's not the easiest thing (nor I am particularly good to explain), I'll introduce the simplified app I used to understand (a bit) how ViewDragHelper works.

#Enters DragQueen

<img src="https://farm6.staticflickr.com/5128/5356147569_686637006e.jpg" width="350" height="350" title="dragqueen" alt="images"> [Licensed under commons creative](https://www.flickr.com/photos/kbyte/5356147569/in/photolist-9aiE4T-oZtA-6YfGh-ebJmp8-jCeRGT-7xRKgx-7csUvo-nFTXP8-nFTXNg-9DAWnB-dbWyHz-m2FLMf-6x5QY2-5vkGLh-9jwh4a-KCBSK-dJTFb-4XRtDY-ouiHNw-od7U9J-oiKnUm-6DTq9a-6d1uXV-ocLauF-7VXBD4-n4y95v-ouj2w5-oaD6SK-owCHq3-6xQaS8-je4k6-ng25wJ-oDWV9V-os7FZk-8oeWRF-oRT83M-2PtLZZ-6x5Pkt-49vCUN-49rtdk-S9buU-f5Wr7L-49vCQw-nVMgN7-6wABHo-fX91x-6x5PQH-51DtKg-7mVAco-miQ2Q/)

(Just kidding). DragQueen is a (ultra) simplified version of what I implemented on fennec with a button named queen that you can drag. 

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Vo4381SSNn0" allowfullscreen></iframe></div> 

It consists of:

+ OuterLayout (the root element of our activity, the one that contains the views we want to drag)
+ a front panel which can be dragged

<img src="/images/draghelper.png" width="350" height="350" title="draghelper" alt="images">

To make the things a bit more complex we want to enable the dragging only from a particular subview, Queen. To make the things even more complex, we want to be also able to interact with Queen button while the dragging is not happening.

We also allow only two rest locations, so if the view is released mid-way it will settle to its open / close location depending on the speed and the location of when the view is released.
Finally, note that OuterLayout contains also a button that is hidden when main layout is in its closed state.

### OuterLayout
Outerlayout is a ViewGroup that extends a RelativeLayout.  
As I wrote before, the two methods ViewDragHelper needs to hook into are
</code></pre>

<pre><code>@Override
public boolean onInterceptTouchEvent(MotionEvent event) {
    if (isQueenTarget(event) &amp;&amp; mDragHelper.shouldInterceptTouchEvent(event)) {
            return true;
    } else {
        return false;
    }
}

@Override
public boolean onTouchEvent(MotionEvent event) {
    if (isQueenTarget(event) || isMoving()) {
        mDragHelper.processTouchEvent(event);
        return true;
    } else {
        return super.onTouchEvent(event);
    }
}
</code></pre>

<pre><code>
You may notice that `onInterceptTouchEvent` if has another condition. This is because we want to drag mainlayout only if the touch targets the Queen (it would not be drag-queen otherwise). This is a simplified version of what happens in Fennec, where we want to intercept the drag only if it starts from the toolbar to avoid to interfere with the web content.

In any case, checking if Queen is targeted is quite easy:
</code></pre>

<pre><code>private boolean isQueenTarget(MotionEvent event) {
    int[] queenLocation = new int[2];
    mQueenButton.getLocationOnScreen(queenLocation);
    int upperLimit = queenLocation[1] + mQueenButton.getMeasuredHeight();
    int lowerLimit = queenLocation[1];
    int y = (int) event.getRawY();
    return (y &gt; lowerLimit &amp;&amp; y &lt; upperLimit);
}
</code></pre>

<pre><code>
##Other methods that influence the behaviour of the dragging are:
####tryCaptureView
</code></pre>

<pre><code>@Override
    public boolean tryCaptureView(View view, int i) {
        return (view.getId() == R.id.main_layout);
    }
</code></pre>

<pre><code>
which gives draghelper the permission to drag main layout). You *must* return true up there for the view you want to be dragged.

####getViewVerticalDragRange &amp;&amp; clampViewPositionVertical (there are *Horizontal* flavours too)
</code></pre>

<pre><code>    public int getViewVerticalDragRange(View child) {
        return mVerticalRange;
    }

    @Override
    public int clampViewPositionVertical(View child, int top, int dy) {
        final int topBound = getPaddingTop();
        final int bottomBound = mVerticalRange;
        return Math.min(Math.max(top, topBound), bottomBound);
    }
</code></pre>

<pre><code>which do what you expect them to do, setting limit for the dragging. In this particular case, vertical range is set to half the size of screen.

### DragQueen 

Note also how ```mMainLayout``` is set as clickable with ```android:clickable="true"```. This prevents touch events to be passed down to the view below when it is closed..

---

## Callbacks
There are several callbacks you will want to implement in order to react to the events related to the dragging:

####onViewDragStateChanged
</code></pre>

<pre><code>@Override
    public void onViewDragStateChanged(int state) {
        if (state == mDraggingState) { // no change
            return;
        }
        if ((mDraggingState == ViewDragHelper.STATE_DRAGGING || mDraggingState == ViewDragHelper.STATE_SETTLING) &amp;&amp;
             state == ViewDragHelper.STATE_IDLE) {
            // the view stopped from moving.

            if (mDraggingBorder == 0) {
                onStopDraggingToClosed();
            } else if (mDraggingBorder == mVerticalRange) {
                mIsOpen = true;
            }
        }
        if (state == ViewDragHelper.STATE_DRAGGING) {
            onStartDragging();
        }
        mDraggingState = state;
    }
</code></pre>

<pre><code>notifies the state transitions of DragHelper between `DRAGGING`, `IDLE` or `SETTLING` state.


####onViewPositionChanged
</code></pre>

<pre><code>public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy) {
</code></pre>

<pre><code>whose purpouse is pretty clear.

####onViewReleased
</code></pre>

<pre><code>    @Override
    public void onViewReleased(View releasedChild, float xvel, float yvel) {
        final float rangeToCheck = mVerticalRange;
        if (mDraggingBorder == 0) {
            mIsOpen = false;
            return;
        }
        if (mDraggingBorder == rangeToCheck) {
            mIsOpen = true;
            return;
        }
        boolean settleToOpen = false;
        if (yvel &gt; AUTO_OPEN_SPEED_LIMIT) { // speed has priority over position
            settleToOpen = true;
        } else if (yvel &lt; -AUTO_OPEN_SPEED_LIMIT) {
            settleToOpen = false;
        } else if (mDraggingBorder &gt; rangeToCheck / 2) {
            settleToOpen = true;
        } else if (mDraggingBorder &lt; rangeToCheck / 2) {
            settleToOpen = false;
        }

        final int settleDestY = settleToOpen ? mVerticalRange : 0;

        if(mDragHelper.settleCapturedViewAt(0, settleDestY)) {
            ViewCompat.postInvalidateOnAnimation(OuterLayout.this);
        }
    }
</code></pre>

<pre><code>is where you (_might_) want to let the view go into its rest place. I made it behave in such way that dragging speed (and direction) is more important than the place you are releasing the view.

---

## Bonus methods
</code></pre>

<pre><code>mDragHelper.settleCapturedViewAt(0, settleDestY))
</code></pre>

<pre><code>
is a helper method that will make your view smoothly settle at the given destination.

---

## Quirks and reasons for headaches

#### ViewDragHelper sets the offset of the target view ..
  .. by calling ``offsetTopAndBottom``, which is ok *but* you have to remember that a layout round called by any of the children of outerLayout (or the parent view you are passing to the draghelper) will reset that offset. What you are going to see in that case is your dragged view getting back at its rest position.

A possibile solution to this is to force back the parent where it was before:
</code></pre>

<pre><code>mMainLayout.addOnLayoutChangeListener(new View.OnLayoutChangeListener() {
        @Override
        public void onLayoutChange(View v, int left, int top, int right, int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom) {
            if (mOuterLayout.isMoving()) {
                v.setTop(oldTop);
                v.setBottom(oldBottom);
                v.setLeft(oldLeft);
                v.setRight(oldRight);
            }
        }
    });
</code></pre>

<pre><code>
#### ViewDragHelper always want to intercept the top most child in z order
If you have some view in between, but you want to be able to drag a lower one, you have to let ViewDragHelper think that your view is the topmost one.
</code></pre>

<pre><code>    @Override
    public int getOrderedChildIndex(int index) {
        int mainLayoutIndex = indexOfChild(mMainLayout);
        if (index &gt; mainLayoutIndex) {
            return mainLayoutIndex;
        } else {
            return index;
        }
    }
</code></pre>

<pre><code>
---


#What's more

ViewDragHelper offers a lot more features than those I just presented. *DragQueen* implements only vertical dragging, but you can drag your views horizontally too. Again, refer to the excellent post by Flavien for more details.

Moreover, ViewDragHelper allows you to intercept drag events that start from the edge of the screen, which is the way its used in the `NavigationDrawer`.

All it needs to enable it is to call 
</code></pre>

<p>mDragHelper.setEdgeTrackingEnabled(ViewDragHelper.EDGE_LEFT);
<code>
and to implement
</code>java
@Override
public void onEdgeDragStarted(int edgeFlags, int pointerId) {
    mDragHelper.captureChildView(mMainLayout, pointerId);
}
&#8220;`</p>

<h1>TL;DR</h1>

<p>ViewDragHelper is a bit complex and as I said before not well documented. However it allows you to drag views around with very little code, and it can be used to implement nice effects. In any case you can <del>unrestrainedly copy</del> <em>take inspiration</em> from DragQueen source code on <a href="https://github.com/fedepaol/dragqueen">GitHub</a> (it seems to work).
I really hope this post does not contain too many errors and that you enjoyed reading it as much as I did writing.</p>

<p>If you liked this post, consider following me on twitter <a href="https://twitter.com/fedepaol">@fedepaol</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rest Interaction in Android]]></title>
    <link href="http://fedepaol.github.io/blog/2014/02/20/rest-interaction-in-android/"/>
    <updated>2014-02-20T00:00:00+01:00</updated>
    <id>http://fedepaol.github.io/blog/2014/02/20/rest-interaction-in-android</id>
    <content type="html"><![CDATA[<div class='post'>
<div style="text-align: justify;">In last December (&#8216;13) I was asked to submit a talk proposal for the first <a href="http://it.droidcon.com/2014/lineup/">Italian Droidcon</a>, which I did. It got accepted, so in Febraury I gave my first public speech speaking of &#8220;(O)Authenticated Rest Interaction in Android&#8221; in front of real people. <br /><br />This post is meant to be a follow up with the information that can&#8217;t be found in the slides<br /><br /></div><script async="" class="speakerdeck-embed" data-id="ddbb3d50725001312be21e64c86b5257" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script> <br /><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">I hoped to sum all the talk up in a post, but it got too long so I am going to split it in several pieces. This one will cover the asynchronous interaction with a remote webservice.&nbsp; </div><div style="text-align: justify;"><br /><br /></div><div style="text-align: justify;"><span style="font-size: small;">Disclaimer: I am not inventing anything new here, most of the content can be found on the internet. A great source of inspiration is <a href="http://www.youtube.com/watch?v=xHXn3Kg2IQE">this talk</a>, from where I took the inspiration for the approach I am going to explain, probably in a worse way. </span></div><div style="text-align: justify;"><br /><br /></div><h2 style="text-align: justify;"><span style="font-size: x-large;">Rule #1: decouple the interaction with the web service from UI components (activities / fragment)</span></h2><div style="text-align: justify;"><br /></div><div style="text-align: justify;">This means that <b><i>cut and past</i>ing that <i>AsyncTask that contains an HttpUrlConnection</i> code you found on google directly inside your activity is a bad idea</b> (I don&#8217;t even want to remind you that you should NOT host the HttpUrlConnection directly inside your activity, if you are doing that you probably won&#8217;t understand the rest of this post and you should restart your android journey <a href="http://developer.android.com/guide/index.html">here</a>).</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="font-size: large;">There are several reasons for that.&nbsp;</span></div><div style="text-align: justify;">You should start thinking that any network operation has a cost, in terms of bandwith and cpu power. Every time you turn the radio on involves consuming (a lot of) battery power, performing the request and parsing the result involves cpu (and therefore) battery power, <b>so any network operation is precious and you do not want to waste any performed request result</b>.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Said that, you should (must?) be aware that your activity might be killed at any time.. well, not at any time but as soon as it&#8217;s not foregrounded anymore, which is something that is likely to happen if your beloved user chooses to leave your application in favour of candy crush, or if he receives an incoming phone call. </div><div style="text-align: justify;">BUT, the <b>result of a request started inside that activity might still be useful for a latter use</b>, so you do not want your request to be killed together with the activity that hosted it.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Moreover, you should be aware that every time a &#8220;configuration change&#8221; occurs, which is what commonly happens when the device gets rotated, the current activity gets killed and recreated.&nbsp;</div><div style="text-align: justify;">Well, guess what? <b>That ongoing request that costed you a lot of power / cpu is lost, and its result with that</b>. Even worse, it&#8217;s not completely lost, but it might be notified to a leaked activity that nobody will look at anymore because the current one is the one which was recreated. There are ways to circumvent this, like hosting the components that you want to survive to a configuration change inside a <a href="http://www.vogella.com/tutorials/AndroidFragments/article.html#headlessfragments">headless fragment</a>, but again, you should be very careful.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Finally, given that you want to host the interaction with the service inside the activity, and because the activity is guaranteed to be active only as long as it is in foreground, it is obvious that in this way <b>is impossible to schedule requests</b> to be performed while the application is not being used.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Malus point: if you have a <i>god activity</i> that handles the UI interaction, a component like a AsyncTask or a Thread that is in charge of performing the request, the real interaction with the service AND the interaction with the activity in order to update the UI, well, you are likely to have a poor encapsulation of your code and you might have some issues while testing your code.</div><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-uv98YZgJtOA/UwZwlqMlBKI/AAAAAAAAMWY/i68I8z_M-uE/s1600/fry.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-uv98YZgJtOA/UwZwlqMlBKI/AAAAAAAAMWY/i68I8z_M-uE/s1600/fry.png" height="240" width="320" /></a></div><h2 style="text-align: center;"><span style="font-size: large;">So where am I supposed to perform the calls?</span></h2><h3 style="text-align: center;">&nbsp;</h3><div style="text-align: justify;">The answer is pretty simple. Use a Service, which is <i>&#8220;is an application component that can perform long-running operations in the background and does not provide a user interface&#8221;</i>, so it&#8217;s just right for our purpouse. The idea here is to host that <b>rest call inside a service</b>, so it can survive to any activity lifecycle event. </div><div style="text-align: justify;">There are a couple of ways to interact with a service, you can throw intents at it, or you can bind your activities to it. In the latter case, you&#8217;ll get back a reference to the whole service object, and so you are able to implement a rich api your activity can interact with.</div><div style="text-align: justify;">On the other hand, you should be careful and stop your service when you do not need it anymore (ie when all the requests are satisfied), and you should also remember that you (still) need to host your asynchronous interaction inside of some kind of threaded component.&nbsp;</div><div style="text-align: justify;"><br /></div><h3 style="text-align: justify;"><span style="font-size: large;">IntentService!</span></h3><div style="text-align: justify;">Are my favourite flavour of services when speaking of rest interaction. Why is that?</div><ul><li>IntentService(s) provide only a <i>onHandleIntent</i> method, which is performed inside a different thread. No need to spawn an asynctask</li><li>IntentService(s) get destroyed as soon as <i>onHandleIntent</i> returns. No need to understand (or risk to forget) when the service needs to be shut down.</li></ul>Have you ever heard of <a href="http://en.wikipedia.org/wiki/Command_pattern">Command Pattern</a> ? You can just embed your requests parameter inside the intent, parse them in <i>onHandleIntent</i> and let the <i>intentservice</i> execute the request for you. Isn&#8217;t that cool?<br /><br /><br /><h2><span style="font-size: large;">Cool! Now I have the data I retrieved from the service, what should I do with that?</span></h2><div style="text-align: center;"><br /></div><div style="text-align: justify;"><span style="font-size: large;">Store it!</span> The two most common alternatives are <b>plain sqllite or using a content provider</b>. The first benefit of using some kind of persistant storage is that <b>you don&#8217;t want to perform the same costly request twice in order to retrieve the same data</b>.</div><div style="text-align: justify;">Moreover, storing the data enforces the decoupling of your service with the activity, since the activity will fetch the data from the storage, regarless of when the storage was filled. This is also better in terms of user experience, because it&#8217;s better to find some kind of data instead of an empty listview if the device is offline.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Bonus point! If you want to perform the inserts a bit faster, check if you can fetch only new data, if the apis you are consuming are offering any kind of timestamp parameter. Plus, remember to use transactions and bulkinserts in order to speed up your inserts.</div><h2 style="text-align: justify;"></h2><h2 style="text-align: justify;"><span style="font-size: large;">Anything missing?</span></h2><div style="text-align: justify;">Ok, your activity asked to the service to perform the request, the request was performed, the result parsed and stored in your content provider. You should now notify the activity that the storage contains something new.&nbsp;</div><div style="text-align: justify;">You have some options:</div><ul><li>Bind the activity to the service and pass a callback</li><li>Use <a href="http://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager.html">(local) broadcasts </a></li><li>Use a message bus (<a href="http://square.github.io/otto/">Otto</a>, <a href="https://github.com/greenrobot/EventBus">eventbus</a>)</li></ul>Or if you are using a content provider, you could take advantage of CursorLoader / <a href="http://www.grokkingandroid.com/use-contentobserver-to-listen-to-changes/">Observers </a>, which I think are the less error prone way to feed a listview out of a content provider&#8217;s data.<br /><br />You just need to remember to add a couple of lines of code:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-hX1BW7VBeHo/UwZ43lS-BBI/AAAAAAAAMWo/N5b4R1G8AGM/s1600/DroidconIt.034.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-hX1BW7VBeHo/UwZ43lS-BBI/AAAAAAAAMWo/N5b4R1G8AGM/s1600/DroidconIt.034.jpg" height="480" width="640" /></a></div><br /><h2><span style="font-size: large;">Final result:</span></h2><br />The final picture of this kind of architecture is the following (please forgive my extremely bad design skills):<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-GZBxeNRISk0/UwZ5O3Q8D0I/AAAAAAAAMWw/JzGE9krKL88/s1600/DroidconIt.035.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-GZBxeNRISk0/UwZ5O3Q8D0I/AAAAAAAAMWw/JzGE9krKL88/s1600/DroidconIt.035.jpg" height="480" width="640" /></a></div><br />Please note how the the activity asks the Service to perform the request with the webservice and then forgets about it. Any time the data needs to be displayed, it&#8217;s always fetched from the storage.<br />The only other interaction happens when the service tells the activity it needs to reload the data.<br />In this way, any ongoing request will survive even if the activity gets killed. When the user will return to your application, the newly created activity will load the latest fetched data from the storage.<br /><br /><br />This was the first post related to the <b>Rest Interaction in Android</b>. I really hope I did not say too many wrong things&#8230;<br /><br />If you liked this post, consider following me on twitter @fedepaol. <br /><br /><br /><br /></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>kalyanblog</div>
<div class='content'>
HI<br />Nice article.<br />I got a question about one of the common situations, when you get some data from server, that is already sorted on the server, and we don&#39;t have enough fields to sort it on the client. Should we persist this data? And what should we do on another request? Clear table?<br />Thanks</div>
</div>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
@Michal:<br />Let&#39;s distinguish between notifying the activity and then having it update itself. ContentProviders plus loaders offer a full solution via observers, so you don&#39;t have to worry about anything.<br /><br />On the other hand, if you want to notify the activity in some other way, you can:<br />- use a messagebus<br />- use (local) broadcasts<br /><br />Once the activity knows that the underlying storage has new content, again, you have a lot of ways depending on how you stored the data. <br />Again, you can use custom loaders (my favourite one is https://github.com/commonsguy/cwac-loaderex . Alternatively, you can use asynctask, native threads or any async way to interact with your storage.</div>
</div>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
@CristianC:<br />Gave a quick look at your groundy lib, it looks like it&#39;s a slick way to perform async interaction inside a service. My only concern is about passing a callback object instead of registering / unregistering a listener. By doing that, you can only return the result to the calling activity. Worse than that, it looks like (if I understood correctly, sorry it&#39;s a bit late here) you are not using weak references, so you might leak the activity in case the reference is being held but the activity is not active anymore.</div>
</div>
<div class='comment'>
<div class='author'>Michal Kejzlar</div>
<div class='content'>
Thank you for your post, good points there. What would you recommend for observing changes in storage without having Content Provider and loaders? E.g. storing data via dao objects telling to activity via EventBus and then what? Having ugly AsyncTask for querying the database?</div>
</div>
<div class='comment'>
<div class='author'>Cristian C</div>
<div class='content'>
Hi Federico.<br /><br />Have you taken a look at github.com/telly/groundy ?<br /><br />It makes interaction between Service and Activity easier.<br /><br />Disclamer: I wrote the library.</div>
</div>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
@Andy Res:<br /><br />I don&#39;t think you can &quot;natively&quot; stop an intentservice once you launched it. However, what you can do is letting it discover that you are not interested in it anymore. This http://stackoverflow.com/a/7893398/504596 sounds like a reasonable solution. However, despite being a big fan of them, I admit that this is a big limit of IntentService. Another limitation is that you cannot prioritize requests. This is because you are implicitly relying on the Intent queue instead of explicitly using one (or a library that use a queue). In any case, I would also say that in most common use cases, once you start a request you are unlikely to want to delete it. Still, think about updating your twitter feed. If you launch an update, you want the request to be completed even if the user leaves the application.<br />Hope my reply makes sense :-)</div>
</div>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
@Vang:<br /><br />I assume you are talking about how to handle the endless data, not how to display it by using some kind of endless listview. In any case, I&#39;d say that how you want to handle it depends on the data you want to display and on the kind of your application. If you really have an &quot;endless&quot; == almost infinite amount of content, what you can do is just provide a &quot;window&quot; on the data that is held on the server, the same way any twitter client does by showing only the latest tweets and by performing a new get whenever you approach the end of the list. If, on the other hand, you have a HUGE amount of content you always want to be synched on your device, this is a more complex topic to discuss. The &quot;easiest&quot; way would be letting the remote server be the master of your data, and perform a full delete before you download all the new data. From that, several optimizations can be implemented. One can be having a timestamp related to the whole resource, and not performing the sync if your device already has the latest version. More complex optimizations are harder to implement by using a restful interface, because you can&#39;t tell it &quot;just send me the data changed since xxx or even the data deleted since xxx&quot; in order to allow you to apply those differences (at least, not that I am aware of). Sorry for the delay in the reply, but I have been a bit busy in the latest couple of days.<br /><br /></div>
</div>
<div class='comment'>
<div class='author'>Andy Res</div>
<div class='content'>
Thank you for the very useful info.<br /><br />What could you tell in regards to requests cancelation while using IntentService?<br /><br /><br /><br /></div>
</div>
<div class='comment'>
<div class='author'>Vang</div>
<div class='content'>
Hello, Federico. Could you explain how can we handle a case with endless list of content? As i understand we should download all content and find changes to persist. In general the main question is: How to maintain consistency beetween remote and local database? Thank you.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contributing to Firefox for Android]]></title>
    <link href="http://fedepaol.github.io/blog/2013/07/29/contributing-to-firefox-for-android/"/>
    <updated>2013-07-29T00:00:00+02:00</updated>
    <id>http://fedepaol.github.io/blog/2013/07/29/contributing-to-firefox-for-android</id>
    <content type="html"><![CDATA[<div class='post'>
<br />In the past two / three years I have been (mostly) developing Android code, <a href="http://fedepaol.github.io/blog/2010/11/10/something-more-about-me">even before it was cool</a>(tm), as a way to do something different from what I do during my day time job.<br /><br />I wrote some <a href="https://play.google.com/store/search?q=federico+paolinelli&amp;c=apps">apps</a>, a couple of <a href="https://github.com/fedepaol">libraries</a>, and some 80% finished projects I really hope I will finish some day.<br /><br />Recently I thought that joining some big android related open source project could have been interesting, and I went for them.<br /><br /><br />That&#8217;s <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=731491">when</a> I found <a href="https://play.google.com/store/apps/details?id=org.mozilla.firefox">Firefox for Android</a> (code name fennec). There are several reasons why I choose it. It&#8217;s one of the most complex / active open source projects, I <a href="http://www.joshmatthews.net/fosdem/">spotted these slides</a> on my g+ stream and I decided to give it a spin.<br /><br /><a href="http://www.flickr.com/photos/tambako/5964400251/"><img src="http://farm7.staticflickr.com/6126/5964400251_8dd37a206a.jpg" /></a><br /><br /><span style="font-size: xx-small;">(Some rights reserved, cc licenze by &#8220;Tambako the Jaguar&#8221;)</span><br /><br /><br /> I must admit that I was not using fennec as my primary browser on android.<br /><br />This is my first experience in a (quite) big open source software project, and now I spend on fennec all of the free time I devote to developing (and I really like it).<br /><br /> <br /><h3> What was *totally* a surprise,</h3>&nbsp; is the fact that fennec is very far from a &#8220;plain android&#8221; project. When I first started, I (wrongly) expected to find an android project where I could reuse the stuff I knew from before, and I ended up working on a lot of javascript (which I never used before).  The project is various and I like the mixture of js, c++ and regular android, and I find this challenging, even if the code read / written ratio has become really huge. Hope this will get better with time.<br /><br /><br /><br /><h3> Working on it is harder than a regular android project.</h3>&nbsp; Forget intellij, eclipse or android studio. Forget debugging, or at least expect attaching a command line debugger to your code to be tricky. Slow build time (a full build takes something like 2 hour and half on my laptop).<br />Incremental builds time and upload to the device may take up to 2-3 minutes. I got back to the really old times when I wrote most of my code using vim and figuring out what was happening through logs.<br /><br /><br /><h3> You can get a lot of help from the mobile team,</h3>&nbsp; but you need to ask. A lot. Think of your average day. A lot of work to be done. Bugs coming, code to be written. Now think about some guy, who never wrote a line of code on the project you are working on, coming and asking some dumb or obvious questions. You are that guy.<br />That&#8217;s what must be their point of view (hope I am making less dumb questions). But they are helpful, even on monday mornings. You just have to ping <a href="https://wiki.mozilla.org/IRC">them on irc.</a><br /><br /><br /><h3> Did I say it is hard at first?</h3>&nbsp; The <a href="http://www.joshmatthews.net/bugsahoy/?mobile=1">bugs ahoy page</a> makes it quite easy to find a bug to start with, and the <a href="https://wiki.mozilla.org/Mobile/Fennec/Android">build instructions</a> are dumb proof. But then, it feels like being thrown in the middle of the jungle with a pocket knife. A huge codebase, xul interfaces, javascript, C++ code, Xpcom interfaces, no idea of which function is calling what. <br />The documentation is there, but it&#8217;s hard to figure out where to start from.<br />But if you are not worried about pinging and pinging people on irc, you will be given all the answers you need in order to get better and go ahead, and you will learn about all the tools at your disposal that help a distributed team to work better, such as <a href="http://mxr.mozilla.org/">mxr</a>, <a href="http://pastebin.mozilla.org/">pastebin</a> and <a href="https://etherpad.mozilla.org/">mopad</a>, or <a href="https://developer.mozilla.org/en-US/docs/Developer_Guide/How_to_Submit_a_Patch">how to submit a patch</a>&nbsp;using <a href="https://developer.mozilla.org/en-US/docs/Mercurial_Queues">hg queues</a>.<br /><br /><br /><h3> Is it worth it?</h3><b>&nbsp; Definetely</b>. As I wrote before, I am currently spending all the spare time I devote to side projects writing code for Fennec. Or I should say, reading a lot of code and writing some code. The &#8220;aha&#8221; moment when you realize that you understand how things work after grepping and digging into interfaces and callbacks has no price and it&#8217;s something I haven&#8217;t experienced for a long time.<br />Moreover, it&#8217;s exciting to interact with the mobile team, they all are passionate about what they are doing and very capable, not to mention that you will be forced to produce high quality code in order to pass the reviews.<br /><b>&nbsp; Finally</b>, the fact that you are contributing something bigger than that <a href="https://play.google.com/store/apps/details?id=com.whiterabbit.pastimer.lite">pasta cooking timer app</a> , and that your code will run in the hands of a lot of users is huge. I am not an opensource software integralist, despite having written a decent amount of it, but the <b>freedom message shared by the mozilla foundation is something it feels nice to be part of.</b><br /><br /><br /> <br /> Not to mention the tshirt I received and the &#8221;<a href="https://badges.mozilla.org/en-US/badges/badge/Friends-of-the-Mobile-Team/awards/1002">friend of mobile team</a>&#8221; badge I was awarded :-)<br /><br /><a href="http://1.bp.blogspot.com/-Qrsy0iSfC-w/UfbaCd153iI/AAAAAAAAMCA/iW7Pa0xXMFI/s1600/IMG_20130729_224220.jpg"><img border="0" src="http://1.bp.blogspot.com/-Qrsy0iSfC-w/UfbaCd153iI/AAAAAAAAMCA/iW7Pa0xXMFI/s320/IMG_20130729_224220.jpg" /></a><br /><br /><br /><br /><br /></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
Thanks mrlachatte. Did not realize that my first contribution was getting live until now!</div>
</div>
<div class='comment'>
<div class='author'>mrlachatte</div>
<div class='content'>
It&#39;s FF 23 release day, and I saw your name in the list on https://blog.mozilla.org/community/2013/08/05/firefox-23-new-contributors/. Congratulations on having your first contribution be released to our many users!</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
