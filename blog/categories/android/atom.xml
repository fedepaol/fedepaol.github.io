<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | My little software store]]></title>
  <link href="http://fedepaol.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://fedepaol.github.io/"/>
  <updated>2018-12-11T23:09:55+01:00</updated>
  <id>http://fedepaol.github.io/</id>
  <author>
    <name><![CDATA[Federico Paolinelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android, Okhttp and Websockets]]></title>
    <link href="http://fedepaol.github.io/blog/2017/04/30/android-okhttp-and-websockets/"/>
    <updated>2017-04-30T23:04:19+02:00</updated>
    <id>http://fedepaol.github.io/blog/2017/04/30/android-okhttp-and-websockets</id>
    <content type="html"><![CDATA[<h2>Websockets</h2>

<p>Rest http calls are the most common interaction between Android apps and remote servers. However, there are some scenarios where the interaction is better handled via a persistent connection: think about a chat, or a multiplayer game where data flows in both directions and the server needs to push data to the clients and to be aware of which client are connected.</p>

<p>This kind of scenario can be implemented through Websockets.</p>

<h3>OkHttp and Websockets</h3>

<p>Given the quality of the libraries offered by Square, OkHttp was the first library I checked when I recently had to deal with websockets. Luckily, <a href="https://medium.com/square-corner-blog/web-sockets-now-shipping-in-okhttp-3-5-463a9eec82d1">WebSocket support was introduced in December, 2016</a>. In this post I will try to describe how to use it, and to show how it is different from using it with regular http calls.</p>

<h3>Establishing the connection</h3>

<p>Establishing the connection is pretty straightforward. You declare the OkHttp client as always:</p>

<pre><code class="java">
    client = new OkHttpClient.Builder()
                .readTimeout(3,  TimeUnit.SECONDS)
                .build();
</code></pre>

<p>and then take a websocket object out of it:</p>

<pre><code class="java">    Request request = new Request.Builder()
                .url(serverUrl)
                .build();
        webSocket = client.newWebSocket(request, new WebSocketListener() {
                            ...
                        });
</code></pre>

<p>Please note that by creating the websocket, OkHttp will try to establish the connection with the server. The second parameter of the <code>newWebSocket</code> factory method needs to implement the <code>WebSocketListener</code> interface, in order to get asynchronously notified of the various events occurred to the socket (such as an incoming message, or the disconnection of the socket, or a failure).</p>

<h3>Sending a message</h3>

<p>Sending a message is easy. Just call <code>send</code> with a <em>String</em> or a <em>ByteString</em> as an argument. Since OkHttp will send the data using its own background thread, <code>send</code> can be called from any thread without worrying of blocking the current thread (and risking to get a NetworkOnMainThreadException).</p>

<p>The only caveat here is that a positive result only indicates that the message was enqueued, but it does not reflect the result of the trasmission. From my understanding, the user of the library is notified only in case of failure via the <code>onFailure</code> callback, so an optimistic approach must be taken in place.</p>

<h3>The callbacks</h3>

<p>The <a href="https://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/WebSocketListener.java">WebSocketListener</a> interface provides callbacks to handle the asynchronous events related to the socket. Those includes the fact that the socket was opened (or closed), or that a new message was received.</p>

<p>Unlike the trasmission of the data, the interaction between the callbacks and the main Android thread needs to be implemented carefully, since <code>WebSocketListener</code>&rsquo;s method will be executed inside a background thread. Using a <code>handler</code> is the &ldquo;vanilla Android&rdquo; approach to let a background thread interact with a thread associated to a looper (such as Android&rsquo;s main thread).</p>

<pre><code class="java">    @Override
    public void onMessage(WebSocket webSocket, String text) {
    ...
        handler.sendMessage(..);
    }
</code></pre>

<p>Another way to achieve the same result would be to go reactive and expose observables to publish this events.</p>

<h3>Closing the connection</h3>

<p>OkHttp provides two methods to close the connection:</p>

<h2>Close</h2>

<p><code>webSocket.close(0, "Bye");</code> asks the server to gracefully close the connection and waits for confirmation.
All the queued messages are trasmitted <strong>before</strong> closing the connection.</p>

<p>Since some interaction is involved, the socket might not be immediately closed. If the initialization and the closure of the connection are bound to the lifecycle of the activity (i.e. in onPause / onResume), what could happen is that some messages are received <strong>after</strong> close was invoked, so this needs to be handled carefully.</p>

<h2>Cancel</h2>

<p>Cancel is more brutal: it just discards all the queued messages and brutally closes the socket. This has the advantage of not having to wait for the housekeeping and the trasmission of enqueued messages. However, choosing <code>cancel</code> over <code>close</code> really depends on the use case.</p>

<h1>Talk is cheap, show me the code</h1>

<p><a href="https://github.com/fedepaol/websocket-sample">Here</a> I pushed a simple example that allows an app to open the websocket when the app goes in foreground and shuts the websocket down when the app goes on background. This is the suggested approach for persistent connections. Using a service to hold the persisten connection is considered a misbehaviour and doze mode will make your app&rsquo;s life really hard.</p>

<p>The example has some weak point that could be improved:</p>

<h4>Cancel is invoked when the app goes in background.</h4>

<p>This means that some messages could eventually get discarded. A better approach would be to invoke close and wait the connection to be gracefully closed and all the messages sent. Since in <code>onPause</code> the activity disposes the subscriptions, no leaking is happening. We can just hope that the application process will live long enough to let OkHttp thread to do what it needs to do in order to gracefully close the connection. A more complex approach could involve a Service or using the JobScheduler.</p>

<h4>No failure of trasmission is taken into account</h4>

<p>onFailure should listen for failures and notify the user of the failure (or even retry to send failed messages) while in the sample it just forces the disconnection.</p>

<h4>No RxJava!</h4>

<p>I wanted to keep the app simple and to avoid to introduce extra complexity, but handlers are so 2013. A better solution would have used RxJava (and probably there are many cool libraries that support that out of the box). Using RxJava would make super easy to use and transform the incoming messages and / or implement smart reconnection policies such as exponential backoff.</p>

<h1>Conclusion</h1>

<p>Using websockets is a completely different beast from getting / posting to http endpoints where you fetch (or post) and forget about the call, however the OkHttp implementation is really easy to use.</p>

<p>On your side, you&rsquo;ll have not only to handle the trasmission / reception of the messages, but you will also need to monitor the state of the connection and behave accordingly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android, MVP, Dagger and Testing]]></title>
    <link href="http://fedepaol.github.io/blog/2016/08/27/android-mvp-testing/"/>
    <updated>2016-08-27T22:52:07+02:00</updated>
    <id>http://fedepaol.github.io/blog/2016/08/27/android-mvp-testing</id>
    <content type="html"><![CDATA[<h3>MVP is Model View Presenter</h3>

<p>.. which is a pattern that is very popular among Android developers nowdays.</p>

<p>I don&rsquo;t intend to write (yet) another guide about MVP in Android, because others have done a better job, for example:</p>

<ul>
<li><a href="http://antonioleiva.com/MVP-android/">Antonio Leiva&rsquo;s introduction to MVP</a></li>
<li><a href="http://hannesdorfmann.com/mosby/MVP/">Hannes Dorfmann&rsquo;s introduction to Mosby</a></li>
<li><a href="http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/">Fernando Cejas&#8217; post on clean architecture</a></li>
</ul>


<p>A lot have been said about MVP (and other similar patterns), like:</p>

<ul>
<li>it isolates the business logic from the UI</li>
<li>it makes faster and easier to unit test the business logic</li>
<li>it avoids having a god Fragment or Activity class that manages everything</li>
<li>it makes it easier to maintain the app</li>
</ul>


<p>However, the first thing you notice while switching into &ldquo;MVP mode&rdquo;, <em>is a great sense of order</em>.</p>

<p>In all the (few) apps I wrote before, I ended up with the well known hodgepodgey fragment or activity that contained both the UI logic and the business logic.</p>

<p>By defining the responsabilities of the view and of the presenter with MVP, you implicitly define the interfaces between those two components (and the model), <strong>and everything fits its place</strong>.</p>

<p>Every touch, drag, and eventyally lifecycle events are just events that are reported back to the presenter, which then chooses what to do with them. This is powerful.</p>

<h2>This post is about my experience with the MVP pattern, Dagger (2) and testing.</h2>

<p>Given the definition of the interface between the view and the presenter, <strong>I ingenuosly expected that testing of both (using unit tests and Espresso tests) would have been super smooth</strong>. As it often happens, the reality is quite different from what one expects and reads from blogs. In this post I will try to sum up all the issues I had during that process and the solutions I tried to put in place.</p>

<p>In order to better illustrate the concepts, I wrote a little example that can be found on my <a href="https://github.com/fedepaol/MVPtesting">github repo</a></p>

<p>The structure of the app is the same one the can be found googling for Dagger / MVP , for example <a href="https://github.com/antoniolg/androidMVP">here</a>.</p>

<p>The only thing I added is a local component / module that I use in order to inject the stuff needed only by that particular set of classes.</p>

<p>This means that in addition to the global Component / Module classes, used to inject stuff like the storage, there will be a <em>local</em> Component / Module used, for example, to inject the presenter into the View.</p>

<h3>The easy part: testing the presenter</h3>

<p>The dependencies are resolved by passing what it needs as constructor parameters:</p>

<pre><code class="java">    @Before
    public void setup() {
        mMockView = mock(MainView.class);
        mMockStorage = mock(KeyValueStorage.class);
        mToTest = new MainPresenterImpl(mMockView, mMockStorage);
    }
</code></pre>

<p>Since no injection magic is involved here, we can just mock the view and all the other stuff the presenter needs and easily write unit tests for a Presenter instance.</p>

<p>Moreover, all the dependencies with external models / sources of data like retrofit can be tested by testing the behaviour of the presenter.</p>

<h3>The &ldquo;I expected it to be easier part&rdquo;: testing the view</h3>

<p>A common approach I heard around is to test the view not against a mock presenter, but against a presenter injected with mocked &ldquo;external components&rdquo;, such as api client and storage.</p>

<p>What I wanted to achieve here on the other hand, is to test the view driving the behaviour of the presenter it interacts with.</p>

<p>With this strong separation of roles, I expected it to be easy to mock the presenter and test the view with Espresso.</p>

<h4>Injecting a mock presenter</h4>

<p>Since the presenter is provided by the local module and injected into the view by Dagger, I had to find a way to override the Module in order to provide the mock presenter that could drive the tests.</p>

<p>By using the common method to inject the view</p>

<pre><code class="java">    DaggerMainComponent.builder()
                .applicationComponent(app.getComponent())
                .mainModule(new MainModule(this))
                .build().inject(this);
</code></pre>

<p>the only way to override the presenter since it is provided by the &ldquo;real&rdquo; MainModule is to use build flavours, as shown in <a href="https://codelabs.developers.google.com/codelabs/android-testing/#0">Android testing codelab</a>.</p>

<p><strong>However, I wanted to take advantage of Dagger 2 injecting a mock presenter.</strong></p>

<h3>The key of replacing a dependency is by overriding the Application object</h3>

<p>By adding a factory method that returns an istance of the module in the Application class</p>

<pre><code class="java">DaggerMainComponent.builder()
                .applicationComponent(app.getComponent())
                .mainModule(app.getMainModule(this))
                .build().inject(this);
</code></pre>

<p>Then we can be use a custom test runner that provides a subclass of that application object declared in the Manifest.</p>

<pre><code class="java">public class EspressoTestRunner extends AndroidJUnitRunner {
    @Override
    public Application newApplication(ClassLoader cl, String className, Context context) throws
            IllegalAccessException, ClassNotFoundException, InstantiationException {
        return super.newApplication(cl, TestMvpApplication.class.getName(), context);
    }
}
</code></pre>

<p>and declare it in our gradle file</p>

<pre><code class="groovy">
android {
    ... 
    defaultConfig {
    ...
        testInstrumentationRunner 'com.whiterabbit.windlocator.EspressoTestRunner'
    ...
    }
}
</code></pre>

<p>The Application object (and its test variant) is the one responsible of providing all the modules, so by subclassing it we can drive what is provided to be injected:</p>

<pre><code class="java">
public class TestMvpApplication extends MvpApplication {
    private MainModule mMainModule;

    // By usint this two method we can drive whatever module we want during the tests
    // (and with that, drive what classes inject)
    @Override
    public MainModule getMainModule(MainView view) {
        return mMainModule;
    }

    public void setMainModule(MainModule m) {
        mMainModule = m;
    }
}
</code></pre>

<p>This is what the setup method would look like:</p>

<pre><code class="java">@Before
public void setUp() throws Exception {
    // a mock module with the mock presenter to be injected..
    MainModule m = mock(MainModule.class);
    mMockPresenter = mock(MainPresenter.class);

    when(m.provideMainView()).thenReturn(mock(MainView.class)); // this is needed to fool dagger
    when(m.provideMainPresenter(any(MainView.class), any(KeyValueStorage.class)))
        .thenReturn(mMockPresenter);

    Instrumentation instrumentation = InstrumentationRegistry.getInstrumentation();
    TestMvpApplication app
        = (TestMvpApplication) instrumentation.getTargetContext().getApplicationContext();

    // forced to the application object
    app.setMainModule(m);
}
</code></pre>

<p>A mock module is needed to provide a mock presenter. Then the mock module is passed to the application object.
Please note that in order to have Dagger 2 working, the mock module needs to provide a view instance (even a mock one) that will never be used.</p>

<p>Now we can finally write a test method:</p>

<pre><code class="java">    @Test
    public void testButtonClick() {
        activity.launchActivity(new Intent());
        onView(withId(R.id.main_button)).perform(click());
        verify(mMockPresenter).onButtonClicked();
    }
</code></pre>

<p>After all this struggling, we can &ldquo;just test the view&rdquo;, meaning that we do not need to test if the mocked rest end point was called, nor if the storage was asked to write something.
<strong>We just test the view against the presenter interface</strong></p>

<p>One piece is still missing: what if we want to test the behaviour of the view when one of its methods gets called by the presenter? In the example, the view interface offers a method to set the text displayed.</p>

<p>Again, one could naively think that it would be sufficient to call the method with something like</p>

<pre><code class="java">activity.getActivity().showValue("23");
</code></pre>

<p>The truth is, espresso tests run in a thread different from the UI thread. By doing that, it would result in</p>

<pre><code>Only the original thread that created a view hierarchy can touch its views
</code></pre>

<p>One way to overcome this, is to call the methods in the ui thread</p>

<pre><code class="java">activity.getActivity().runOnUiThread(new Runnable() { // fancy using a lambda here?
                                                 @Override
                                                 public void run() {
                                                     activity.getActivity().showValue("23");
                                                 }
                                             });
</code></pre>

<h4>Why I did not use the <code>@UiThreadTest</code> annotation?</h4>

<p>Simply because it would have ended with another exception since startactivity cannot be called directly from the ui thread.</p>

<h3>To sum up</h3>

<ul>
<li>Make the application provide the Module that provides the presenter(s)</li>
<li>Change the testrunner in order to provide a different application</li>
<li>Let the &ldquo;test&rdquo; application provide a mock module that provides a mock presenter</li>
<li>Test!</li>
</ul>


<h2>Conclusion</h2>

<p>The Mvp pattern isolates the view (which needs to be as dumb as it can) from the presenter.
By instrumenting the view with a mocked presenter, you will drain those tests from any kind of logic we expect to be in the presenter. You just test that the interface between the presenter and the view is working as expected.</p>

<p>By doing this, you can focus on testing the business logic inside the presenter with vanilla unit tests. Your tdd loop will definetely be faster.</p>

<p><em>A big thank as always to my proofreaders Fabio Collini &amp; Riccardo Ciovati</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactive Android Timers, Countdowns and Lifecycle]]></title>
    <link href="http://fedepaol.github.io/blog/2016/06/20/how-to-a-timer/"/>
    <updated>2016-06-20T23:06:59+02:00</updated>
    <id>http://fedepaol.github.io/blog/2016/06/20/how-to-a-timer</id>
    <content type="html"><![CDATA[<h4>Ok, I must confess</h4>

<p>the title is built to draw people&rsquo;s attention, because you know, nowdays everything is done in a reactive fashion. RxJava is superhelpful, but <strong>if we forget the ecosystem our apps are running into</strong>, we risk to forget the <em>proper</em> way to implement certain tasks in Android.</p>

<h4>Why do we need a whole post about timers?</h4>

<p>Recently, I had to implement a countdown timer in Android.</p>

<p>If you google for <del>code to cut and paste</del> <em>inspiration</em>, you&rsquo;ll get a lot of results like:</p>

<ul>
<li>use a <a href="https://developer.android.com/reference/android/os/CountDownTimer.html">countdown timer</a></li>
<li>use a dyi implementation using handlers</li>
<li>be <em>a la mode</em> and use <a href="http://reactivex.io/documentation/operators/timer.html">RxJava&rsquo;s timer</a></li>
</ul>


<p>There is even a <a href="https://androidcookbook.com/Recipe.seam;jsessionid=DF53064E03C7505C4EBF727E56E0728E?recipeId=1205">cookbook recipe</a> that shows how to implement it.</p>

<p>That might work if you had to measure the cooking time of a <a href="http://www.bettycrocker.com/how-to/tipslibrary/charts-timetables-measuring/timetable-cooking-pasta">portion of capellini</a> (the fastest cooking pasta I could think of).</p>

<h3>But wait, what if I had to bake a plum cake?</h3>

<p>Baking a plum cake takes longer than an hour. All the solutions I just mentioned rely on the fact that your application is running <strong>for the whole lenght of the timer</strong>.</p>

<p>This could be acceptable in the desktop / server world, but it&rsquo;s far from acceptable in the Android context: if the app goes in background because the user wants to check his email, answer to a phone call or play a game, <strong>the operating system is likely to reclaim the resources and shutdown the app itself</strong>. In any case, the device will turn off after a short time. If you think that using a <a href="https://developer.android.com/training/scheduling/wakelock.html">wakelock</a> will solve the problem&hellip; it will, but the user won&rsquo;t be happy of all the battery wasted by the screen.</p>

<h3>I can use a foreground service!</h3>

<p>So one can start looking for a way to keep the app running in background. A <a href="https://developer.android.com/guide/components/services.html">Service</a> is an Android component made specifically for this purpose.</p>

<p>By using a Service with the <a href="https://developer.android.com/guide/components/services.html#Foreground">startForeground</a> option, your app will stay alive through the whole lenght of the timer. When the timer is finished, it just has to throw a notification and a broadcast so the user will know that the timer expired.</p>

<p><img class="center" src="/images/soareyoutelling_timer.jpg" width="300"></p>

<p>This approach will work, but it has a drawback. Your app (or let&rsquo;s say at least the service) needs to be running for the whole length of the timer. This is a waste of memory and cpu.</p>

<h3>The right way</h3>

<p>The right way is to take advantage of what the OS offers. The idea here is to run the countdown timer as long as the app is foregrounded, showing the progress to the user <em>one second at the time</em>, but set a system alarm whenever the app goes in background. Whenever the user gets back to the app, you&rsquo;ll cancel the system alarm and restart the timer from where it is supposed to start.</p>

<p>Here what it would look like when the user gets back to the app before the timer is expired (on the left) and when the timer expires while the app is in background (on the right):</p>

<p><img src="/images/timer_resume.png" width="300"> <img src="/images/timer_pause.png" width="300"></p>

<p>From the user&rsquo;s perspective, the timer is running even if the app is in background, because whenever he returns to the app he sees what he is expecting to see (the time passed). On the other hand, if the timer expires when the app is in background, a friendly notification will remind him that he has to take the plum cake out of the oven.</p>

<p>Inside the app however, the timer will run <strong>only when the app is in foreground</strong> and has all the rights to consume cpu because the user is using the app.</p>

<h3>Some code</h3>

<p>A simplified version of what I am describing can be found in my <a href="https://github.com/fedepaol/AndroidTimerSample">github repo</a></p>

<p>There are three things you have to take into account:</p>

<h2>Running the timer in the app</h2>

<p>This is the easiest part: you can use a countdown timer, a handler, rxjava or whatever you want to <del>copy and paste</del> take inspiration from.
In my example I&rsquo;ll use a countdown timer since it&rsquo;s simple to use and serves the purpouse.</p>

<pre><code class="java">    private void startTimer() {
        mCountDownTimer = new CountDownTimer(mTimeToGo * 1000, 1000) {
        public void onTick(long millisUntilFinished) {
        mTimeToGo -= 1000;
        updateTimeUi();
        }
        public void onFinish() {
        mState = TimerState.STOPPED;
        onTimerFinish();
        updateTimeUi();
    }
        }.start();
    }
</code></pre>

<h2>Remembering when the timer was started / how long it was supposed to run</h2>

<p>This is the trickiest part.
In the example I store the starting time inside the shared preferences storage. It will persist even if the app is killed.</p>

<pre><code class="java">    mPreferences.setStartedTime(getNow());
</code></pre>

<p>That value is used when resuming the app in order to check how long the timer has to run (or if the time did expire):</p>

<pre><code class="java">    private void initTimer() {
        long startTime = mPreferences.getStartedTime();
        mTimeToGo = (TIMER_LENGHT - (getNow() - startTime));
        if (mTimeToGo &lt;= 0) { // TIMER EXPIRED
            mTimeToGo = TIMER_LENGHT;
            onTimerFinish();
        } else {
            startTimer();
        }
    }
</code></pre>

<p>The app tries to retrieve the start time value. If there still is  some time to run, the countdown restarts for the remaining length of time. Otherwise the timer is reset and the user is notified of the timer expiration.</p>

<p>Please note that this is a ultra simplified version that assumes that <em>the timer is running</em>. The <a href="https://github.com/fedepaol/AndroidTimerSample">github sample</a> checks also if the timer was started or not.</p>

<h2>Handling the alarm</h2>

<p>This is simple. You should set the alarm that triggers a broadcast receiver through the alarm manager:</p>

<pre><code class="java">    @Override
    protected void onPause() {
        super.onPause();
        long wakeUpTime = (mPreferences.getStartedTime() + TIMER_LENGHT) * 1000;
        AlarmManager am = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        Intent intent = new Intent(this, TimerExpiredReceiver.class);
        PendingIntent sender = PendingIntent.getBroadcast(this, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
            am.setAlarmClock(new AlarmManager.AlarmClockInfo(wakeUpTime, sender), sender);
        } else {
            am.set(AlarmManager.RTC_WAKEUP, wakeUpTime, sender);
        }
    }
</code></pre>

<p>and cancel it in onResume:</p>

<pre><code class="java">    @Override
    protected void onResume() {
        super.onResume();
        Intent intent = new Intent(this, TimerExpiredReceiver.class);
        PendingIntent sender = PendingIntent.getBroadcast(this, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);
        AlarmManager am = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        am.cancel(sender);
   }
</code></pre>

<p>Launching a system notification that brings the user back to the app when clicked is trivial. You can check the <a href="https://github.com/fedepaol/AndroidTimerSample">sample on github</a>.</p>

<h2>Conclusion</h2>

<p>What I wrote today may sound obvious to a lot of experienced developers.</p>

<p>However, I thought it was a post worth writing since it&rsquo;s a good example of how you should always remember the ecosystem your app is being run into.
If you forget this and think that <strong>your app is the most important app the user has in his phone</strong>, you&rsquo;ll face some unexpected behaviours (the app gets killed) or you will piss the user off (the app needs to be active for the whole length of the timer).</p>

<p>Thanks as always to Fabio Collini and Riccardo Ciovati for proofreading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happiness Is (a) Relative (Layout)]]></title>
    <link href="http://fedepaol.github.io/blog/2016/04/20/happines-is-relative/"/>
    <updated>2016-04-20T06:34:46+02:00</updated>
    <id>http://fedepaol.github.io/blog/2016/04/20/happines-is-relative</id>
    <content type="html"><![CDATA[<h4>Using relative layout is bad</h4>

<p>.. or at least they say so.
The truth is, it is <em>relatively</em> easy to build complex layouts using RelativeLayouts, but this ease of use comes with a cost: in order to provide that kind of flexibility, RelativeLayout does two measurement passes.</p>

<p>There are a lot of talks and <a href="https://medium.com/google-developers/developing-for-android-iii-2efc140167fd#.wpqgdu3xs">posts</a> explaining that if you have nested relative layouts, you&rsquo;ll end up with many measurement passes that will consume your cpu and will contribute to miss the dreaded 16 ms threshold. The higher the RelativeLayouts are placed in your view hierarchy, the more will be the number of measurements.</p>

<p><strong>It&rsquo;s easier than you think</strong>: let&rsquo;s pretend you have a RelativeLayout as the root of your activity view (because hey, it&rsquo;s what Android Studio sets as default from the BlankActivity template).</p>

<p>Then you have a fragment, and for some reason you have a list you want to place aside a button and you need a RelativeLayout over there.</p>

<p>Finally, you&rsquo;ll have to place an image and a text inside the list elements, isn&rsquo;t there an easier way than RelativeLayout? (Actually, <a href="http://antonioleiva.com/textview_power_drawables/">there is and it&rsquo;s much more efficient</a>)</p>

<p><img class="center" src="/images/relative_hierarchy.png" width="300"></p>

<p>What will happen here is that with this unharmful scenario the <code>onMeasure()</code> method of each children of the list <strong>will be called 8 times</strong> each frame.</p>

<h3>But why does RelativeLayout need two passes?</h3>

<p>Given that Android is an open source framework, I could satisfy my curiosity by digging into the source code. Here I will try to provide a high level explanation of my understanding on how it works, without going too much into the details.</p>

<p>Let&rsquo;s pretend you want four children (A, B, C, D) for your layout, and the rules are the following:</p>

<ul>
<li>A is above C</li>
<li>B is to right of A</li>
<li>D is below B and its right margin is aligned to B</li>
<li>C is to left of D and its top is aligned to D</li>
</ul>


<p><img class="center" src="/images/relative_sample.png" width="200"></p>

<p>The concept behind RelativeLayout is fairly simple. <strong>In order to measure (and place) a certain child, you need to measure (and place) all the views that child depends on</strong> in term of relationship. For this reason, the first thing RelativeLayout does is to build a graph of dependencies between the children. Those dependencies determine the order in which the children are measured (i.e. first the views with no dependencies, then the views that depend only from the root, etc).</p>

<p>This explains the need for two measurement passes: <strong>the order the views need to be measured horizontally can be different from the order the views need to be measured vertically</strong>. In my example, A does not have any <em>horizontal</em> dependency but <em>vertically</em> it depends on the size and the position of C.</p>

<p>In the example, the sequence of measurement are:</p>

<p>Horizontal dimension:
A -> B -> D -> C</p>

<p><img src="/images/relative_horizontal.png" width="800"></p>

<p>Note that given the vertical size is not calculated yet, the views are temporarly assigned with the height of the parent view while measuring the horizontal sizes.</p>

<p>Vertical dimension:
B -> D -> C -> A</p>

<p><img src="/images/relative_vertical.png" width="800"></p>

<p>Other than these two passes, RelativeLayout can also loop its children up to three other times to finalize their placement (for example for those that are aligned to the bottom of the parent in case of wrap content).</p>

<p>The position of the views is calculated during the measurement double pass. For this reason the <code>onLayout()</code> implementation is pretty trivial.</p>

<p>Finally, the dependency lists are cached, but those cached elements are invalidated whenever a <code>requestLayout()</code> happens. This, together with the fact that <code>requestLayout()</code> goes up to the root and is called on all the children is another reason for not having deep view hierarchy especially with RelativeLayouts.</p>

<h3>Optimizing RelativeLayout</h3>

<p>First of all, remember that you don&rsquo;t always need to. If you are in the early stage of the development or under strict time constraints and you prefer the simplicity of use of <code>RelativeLayout</code> against performance then use it, <strong>just be aware of the implications</strong>. This small piece of technical debt might come back in the future to claim its price.</p>

<p><strong>Measure twice and cut once</strong> (but remember to do that from time to time). Hierarchy Viewer is a convenient way to understand if your hierarchy is too complex and to see at glance what&rsquo;s costing too much:</p>

<p><img class="center" src="/images/hierarchy.png" width="700"></p>

<p><a href="https://github.com/lucasr/probe">Probe</a> by Lucas Rocha is also an effective tool to check if your views are getting measured too many times.</p>

<p>After that, if you realize that your view groups suffer from performance issues, the most efficient way to optimize is to write a custom viewgroup. It might look scary at first, but it&rsquo;s just a matter of measuring and placing boxes <strong>knowing exactly where you want to place them and how their container looks like</strong>. This will flat your hierarchy and make it a lot more efficient.</p>

<p>I don&rsquo;t want to write (yet another) tutorial on building custom viewgroups here since it will double the lenght of this post, but some good starting points are:</p>

<ul>
<li><a href="https://newcircle.com/s/post/1663/tutorial_enhancing_android_ui_with_custom_views_dave_smith_video">Dave Smith&rsquo;s post on custom views</a></li>
<li><a href="https://sriramramani.wordpress.com/2015/05/06/custom-viewgroups/">Sriram Ramani&rsquo;s post on custom viewgroups</a></li>
<li><a href="https://www.youtube.com/watch?v=NYtB6mlu7vA">This talk from google io 2013</a></li>
<li><a href="https://www.youtube.com/watch?v=-xAdDqwaWJk">Loving lean layouts from Droidcon SF</a></li>
</ul>


<h3>What&rsquo;s the take home lesson</h3>

<p>RelativeLayout is an awesome piece of software. It makes it super easy to describe complex scenarios without needing to do nasty nested linear layouts.</p>

<p><strong>However</strong> from today, before placing it inside a view I will start thinking not only about the two passes, but also to all the hard work this complex piece of software needs to do behind the scene in order to offer me the flexibility I am used to.</p>

<p>The two measurement passes can be the biggest source of problems because of the risk of exponential explosion, but <strong>other than that there are a lot of computation and additional data structures involved</strong> in building (and maintain) those dependency lists, and a good amount of extra loops through the children needed to place them correctly.</p>

<p>Thanks to Riccardo Ciovati and Fabio Collini for proofreading this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subscribe It While It's Hot: Cached Rest Requests With RxJava]]></title>
    <link href="http://fedepaol.github.io/blog/2016/01/01/cached-rest-requests-with-rxjava/"/>
    <updated>2016-01-01T17:54:21+01:00</updated>
    <id>http://fedepaol.github.io/blog/2016/01/01/cached-rest-requests-with-rxjava</id>
    <content type="html"><![CDATA[<h4>Disclaimer:</h4>

<p>In this post I am trying to cover a proper approach to a common problem. I am still in the process of wrapping my head around RxJava so what I write here might not be the best way to solve the problem.</p>

<h1>Cached requests with RxJava</h1>

<p>Lately I&rsquo;ve been trying to develop a rest backed app using RxJava. I must admit that once you get in the proper mental mood, RxJava almost feels like cheating. Everything looks cleaner, multiple requests can be composed and manipulated easily, the StrictMode gets satisfied by observing on the ui thread and subscribing on a different thread, and all the nice things that can be read about how cool is RxJava with Android.
What I could not find easily, was how to store the result of a request and be sure that even in case of no network, a cached content was available for the user, while still handling everything in a reactive fashion.</p>

<h3>Caching vs non caching</h3>

<p>Going straight from rest result to the UI is appropriate in many cases, for example when displaying the result of a search whose arguments are not predictable (think about Ebay, or Amazon where the user is looking for something different every time).</p>

<p><em>However</em>, there are cases when the results fetched earlier are still significant and displaying them can improve the user experience significantly, compared to a spinning wheel or a white page. Those cases include your twitter feed, a local weather forecast that was fetched just 5 minutes before, or the list of the github repos of a given user.</p>

<p>Here you can see the difference between a non cached version and a cached version of the same activity:</p>

<p><img src="/images/uncached.gif" width="300">      <img src="/images/cached.gif" width="300"></p>

<p>For this reason I tried to figure out what could have been a clean way to cache the results of a request while keeping the flow in a reactive fashion.</p>

<h3>The storage as the unique source of the truth</h3>

<h4>All reactive</h4>

<p>If we want to cache the data while keeping everything inside the same subscription, things get a bit messy. The result of the request is thrown at the UI and the response is also stored in the storage. The UI subscribes from the storage too but checks which result came first and if the data is too old.</p>

<p><img src="/images/messy.jpg" width="500"></p>

<h4>Cached</h4>

<p>In this <em>hybrid</em> variant, the UI subscribes only to the storage, and a facade class wraps the storage and the subscription to the retrofit client that feeds the storage. Once the storage is filled with new data, the UI thread is automatically notified of every change.
<img src="/images/clean.jpg" width="500"></p>

<p>In this scenario the observable acts as a <em>hot</em> observable, the first time it gets subscribed it emits the content of the storage, and any other change it might happen to it.</p>

<h3>Talk is cheap, show me the code</h3>

<p>A working example of the following code can be found <a href="https://github.com/fedepaol/RxRestSample">in my github repo here</a>
To write this sample, I started from the abused Github apis which seems to power the 99% of the rest related examples. Sorry about that.</p>

<p>First there is the storage. I wrapped a SQLite helper (which I happily generated with <a href="https://github.com/fedepaol/Android-sql-lite-helper">my handy script</a>) with a class that contains a <a href="http://reactivex.io/RxJava/javadoc/rx/subjects/PublishSubject.html">PublishSubject</a> which can be subscribed to and which we will notify when the insertion methods are called:</p>

<pre><code class="Java">public class ObservableRepoDb {
    private PublishSubject&lt;List&lt;Repo&gt;&gt; mSubject = PublishSubject.create();
    private RepoDbHelper mDbHelper;

    private List&lt;Repo&gt; getAllReposFromDb() {
        List&lt;Repo&gt; repos = new ArrayList&lt;&gt;();
        // .. performs the query and fills the result
        return repos;
    }

    public Observable&lt;List&lt;Repo&gt;&gt; getObservable() {
        Observable&lt;List&lt;Repo&gt;&gt; firstTimeObservable =
                Observable.fromCallable(this::getAllReposFromDb);

        return firstTimeObservable.concatWith(mSubject);
    }

    public void insertRepo(Repo r) {
        // ...
        // performs the insertion on the SQLite helper
        // ...
        List&lt;Repo&gt; result = getAllReposFromDb();
        mSubject.onNext(result);
    }
}
</code></pre>

<p>What we have here is the first piece of the puzzle: a storage that can be subscribed to. The concatenation is needed because we want it to emit the content of the storage as soon as it gets subscribed.</p>

<p>Then there is the facade class, where we get the observable from and to which we start a new update:</p>

<pre><code class="Java">public class ObservableGithubRepos {
    ObservableRepoDb mDatabase;
    private BehaviorSubject&lt;String&gt; mRestSubject;

    // ...
    public Observable&lt;List&lt;Repo&gt;&gt; getDbObservable() {
        return mDatabase.getObservable();
    }

    public void updateRepo(String userName) {
        Observable&lt;List&lt;Repo&gt;&gt; observable = mClient.getRepos(userName);
        observable.subscribeOn(Schedulers.io())
                  .observeOn(Schedulers.io())
                  .subscribe(l -&gt; mDatabase.insertRepoList(l));
    }
} 
</code></pre>

<p>Note that everything happens far from the UI thread. This is because we are going to subscribe to the database observable as the unique source of truth.</p>

<p>Now, given that the observable is now <em>hot</em>, we can&rsquo;t listen for its <em>onComplete</em> in order to stop any progress indicators we might put in place.
What we need is another subject that can be bound to the update request, so here it is the new facade class:</p>

<pre><code class="Java ">public class ObservableGithubRepos {
    // ...

    public Observable&lt;List&lt;Repo&gt;&gt; getDbObservable() {
        return mDatabase.getObservable();
    }

    public Observable&lt;String&gt; updateRepo(String userName) {
        BehaviorSubject&lt;String&gt; requestSubject = BehaviorSubject.create();

        Observable&lt;List&lt;Repo&gt;&gt; observable = mClient.getRepos(userName);
        observable.subscribeOn(Schedulers.io())
                  .observeOn(Schedulers.io())
                  .subscribe(l -&gt; {
                                    mDatabase.insertRepoList(l);
                                    requestSubject.onNext(userName);},
                             e -&gt; requestSubject.onError(e),
                             () -&gt; requestSubject.onCompleted());
        return requestSubject;
    }
}
</code></pre>

<p>In the UI client (activity or fragment) we&rsquo;ll need to subscribe to the storage in order to get the data and to the request observable in order to stop the progress indicators. An observable that emits the state of the pending request is returned every time an update is being requested.</p>

<pre><code class="Java">    mObservable = mRepo.getDbObservable();
    mProgressObservable = mRepo.getProgressObservable()

    mObservable.subscribeOn(Schedulers.io())
                   .observeOn(AndroidSchedulers.mainThread()).subscribe(l -&gt; {
                    mAdapter.updateData(l);
                });

    Observable&lt;List&lt;Repo&gt;&gt; progressObservable = mRepo.updateRepo("fedepaol");
    progressObservable.subscribeOn(Schedulers.io())
                           .observeOn(AndroidSchedulers.mainThread())
                           .subscribe(s -&gt; {},
                                      e -&gt; { Log.d("RX", "There has been an error");
                                            mSwipeLayout.setRefreshing(false);
                                      },
                                      () -&gt; mSwipeLayout.setRefreshing(false));
</code></pre>

<p>Please remember that the DbObservable is a hot one, so every time a call to updateRepo happens, the db will be fed with the result of the query and the ui will get subsequently notified.</p>

<h3>SqlBrite</h3>

<p>If all this wrapping seems too laboruous, the prolific guys from Square wrote <a href="https://github.com/square/sqlbrite">SqlBrite</a> which is a super generic database wrapper that was written for this same purpouse. I am sure it&rsquo;s better and more battle field tested than the poor man&rsquo;s version we can write by ourselves.</p>

<h2>Conclusion</h2>

<p>I don&rsquo;t know if this is an healthy way to use RxJava. Maybe I ended up with this scenario only because I am not 100% confident with RxJava and I am putting some non rx-ness in the middle to better control it.
Here we need to choose where to place the operators, since we can modify the flow that feeds the storage from the http client, or the flow that comes out of the storage itself.</p>

<p>In any case, having an unique source of truth seems more clear, and I feel that in this way it would be a lot easier to do stuff like prefetching, scheduling updates so the user is presented with fresh data (remember having your <a href="https://www.youtube.com/watch?v=GcNNx2zdXN4">app work like magic?</a>), checking if an update is worth to be done at all (such as displaying a 5 minutes old weather forecast) and stuff like that.</p>

<p>Thanks to Fabio Collini for spotting a lot of mistakes in the first draft of this posts, and to Riccardo Ciovati for proof reading it.</p>
]]></content>
  </entry>
  
</feed>
