<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Maven | My little Android warehouse]]></title>
  <link href="http://fedepaol.github.io/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://fedepaol.github.io/"/>
  <updated>2015-09-05T14:42:57+02:00</updated>
  <id>http://fedepaol.github.io/</id>
  <author>
    <name><![CDATA[Federico Paolinelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gridlayout Support Library With Maven]]></title>
    <link href="http://fedepaol.github.io/blog/2012/09/15/gridlayout-support-library-with-maven/"/>
    <updated>2012-09-15T00:00:00+02:00</updated>
    <id>http://fedepaol.github.io/blog/2012/09/15/gridlayout-support-library-with-maven</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><span style="font-size: x-large;">EDIT 17/10/2012:</span><br />Gridlayout support is now working natively with maven android deployer. I strongly suggest to use it instead of my method.<br /><span style="font-size: x-large;"><br /></span><span style="font-size: x-large;">&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</span><br /><span style="font-size: x-large;"><br /></span><br /><a href="http://developer.android.com/reference/android/widget/GridLayout.html">Gridlayout</a> has been introduced since api level 14, and is being suggested layout as a more efficient alternative over nested linear layouts and relative layout.<br /><br />It has also been recently added as part of the android support library, in order to have it available on older devices.<br /><br />Trying to use it in a maven setup is a bit tricky.<br />At the time of writing, the version added by <a href="https://github.com/mosabua/maven-android-sdk-deployer">maven android deployer</a> won&#8217;t work because of this <a href="https://github.com/mosabua/maven-android-sdk-deployer/issues/50">issue</a>&nbsp;.<br />The problem is, you can&#8217;t just add the jar because the library is intended to be an android project library, which means that brings with itself a couple of resources.<br /><br /><br />The error you might get is<br /><br /><b><span style="font-size: large;">java.lang.NoClassDefFoundError: android/support/v7/gridlayout/R$dimen</span></b><br /><br />I don&#8217;t know if the following is the best &#8220;mavenic&#8221; way to solve the problem, however it worked for me and I am sharing it here.<br /><br />What you need to do is to build your own apk lib to add to your maven repo to link against.<br /><br /><h3>Step 1: building an apk lib</h3><div>The information you can find on android maven plugin <a href="http://code.google.com/p/maven-android-plugin/wiki/ApkLib">website</a>&nbsp;wasn&#8217;t very clear to me. However they ship a couple of <a href="https://github.com/jayway/maven-android-plugin-samples/archives/stable">examples</a> you can take inspiration from.</div><div><br /></div><div><br /></div><div>Assuming that you have a proper ANDROID_HOME variable set up, and you already used maven android deployer to have a working setup, the first thing you have to do is to download the support library.&nbsp;</div><div>You will find it under $ANDROID_HOME/extras/android/support/v7/gridlayout</div><div><br /></div><div>Make your own copy somewhere else in your hard disk.</div><div><br /></div><div><br /></div><div>Now copy my pom.xml file:</div><!-- HTML generated using hilite.me --><br /><div style="background: #ffffff; background: white; border-width: .1em .1em .1em .8em; border: solid gray; color: black; overflow: auto; padding: .2em .6em; width: auto;"><pre style="line-height: 125%; margin: 0;"><span style="color: #507090;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br /><span style="color: #007000;">&lt;project</span> <span style="color: #0000c0;">xmlns=</span><span style="background-color: #fff0f0;">"http://maven.apache.org/POM/4.0.0"</span> <span style="color: #0000c0;">xmlns:xsi=</span><span style="background-color: #fff0f0;">"http://www.w3.org/2001/XMLSchema-instance"</span><br />         <span style="color: #0000c0;">xsi:schemaLocation=</span><span style="background-color: #fff0f0;">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span><span style="color: #007000;">&gt;</span><br />    <span style="color: #007000;">&lt;modelVersion&gt;</span>4.0.0<span style="color: #007000;">&lt;/modelVersion&gt;</span><br /><br /><br />    <span style="color: #007000;">&lt;version&gt;</span>1.0.0-SNAPSHOT<span style="color: #007000;">&lt;/version&gt;</span><br />    <span style="color: #007000;">&lt;groupId&gt;</span>com.support.gridlayout<span style="color: #007000;">&lt;/groupId&gt;</span><br />    <span style="color: #007000;">&lt;artifactId&gt;</span>gridlayout_compat<span style="color: #007000;">&lt;/artifactId&gt;</span><br />    <span style="color: #007000;">&lt;packaging&gt;</span>apklib<span style="color: #007000;">&lt;/packaging&gt;</span><br />    <span style="color: #007000;">&lt;name&gt;</span>Gridlayout compatibility library<span style="color: #007000;">&lt;/name&gt;</span><br /><br />    <span style="color: #007000;">&lt;dependencies&gt;</span><br />        <span style="color: #007000;">&lt;dependency&gt;</span><br />            <span style="color: #007000;">&lt;groupId&gt;</span>android<span style="color: #007000;">&lt;/groupId&gt;</span><br />            <span style="color: #007000;">&lt;artifactId&gt;</span>android<span style="color: #007000;">&lt;/artifactId&gt;</span><br />            <span style="color: #007000;">&lt;scope&gt;</span>provided<span style="color: #007000;">&lt;/scope&gt;</span><br />            <span style="color: #007000;">&lt;version&gt;</span>4.0.3_r3<span style="color: #007000;">&lt;/version&gt;</span><br />        <span style="color: #007000;">&lt;/dependency&gt;</span><br /><br />        <span style="color: #007000;">&lt;dependency&gt;</span><br />            <span style="color: #007000;">&lt;groupId&gt;</span>com.grid<span style="color: #007000;">&lt;/groupId&gt;</span><br />            <span style="color: #007000;">&lt;artifactId&gt;</span>gridlayout<span style="color: #007000;">&lt;/artifactId&gt;</span><br />            <span style="color: #007000;">&lt;version&gt;</span>1.0<span style="color: #007000;">&lt;/version&gt;</span><br />        <span style="color: #007000;">&lt;/dependency&gt;</span><br />    <span style="color: #007000;">&lt;/dependencies&gt;</span><br /><br />    <span style="color: #007000;">&lt;build&gt;</span><br />        <span style="color: #007000;">&lt;plugins&gt;</span><br />            <span style="color: #007000;">&lt;plugin&gt;</span><br />                <span style="color: #007000;">&lt;groupId&gt;</span>com.jayway.maven.plugins.android.generation2<span style="color: #007000;">&lt;/groupId&gt;</span><br />                <span style="color: #007000;">&lt;version&gt;</span>3.1.1<span style="color: #007000;">&lt;/version&gt;</span><br />                <span style="color: #007000;">&lt;artifactId&gt;</span>android-maven-plugin<span style="color: #007000;">&lt;/artifactId&gt;</span><br />                <span style="color: #007000;">&lt;extensions&gt;</span>true<span style="color: #007000;">&lt;/extensions&gt;</span><br />            <span style="color: #007000;">&lt;/plugin&gt;</span><br />        <span style="color: #007000;">&lt;/plugins&gt;</span><br />    <span style="color: #007000;">&lt;/build&gt;</span><br />    <span style="color: #007000;">&lt;repositories&gt;</span><br />        <span style="color: #007000;">&lt;repository&gt;</span><br />            <span style="color: #007000;">&lt;id&gt;</span>repo<span style="color: #007000;">&lt;/id&gt;</span><br />            <span style="color: #007000;">&lt;releases&gt;</span><br />                <span style="color: #007000;">&lt;enabled&gt;</span>true<span style="color: #007000;">&lt;/enabled&gt;</span><br />                <span style="color: #007000;">&lt;checksumPolicy&gt;</span>ignore<span style="color: #007000;">&lt;/checksumPolicy&gt;</span><br />            <span style="color: #007000;">&lt;/releases&gt;</span><br />            <span style="color: #007000;">&lt;snapshots&gt;</span><br />                <span style="color: #007000;">&lt;enabled&gt;</span>false<span style="color: #007000;">&lt;/enabled&gt;</span><br />            <span style="color: #007000;">&lt;/snapshots&gt;</span><br />            <span style="color: #007000;">&lt;url&gt;</span>file://${project.basedir}/repo<span style="color: #007000;">&lt;/url&gt;</span><br />        <span style="color: #007000;">&lt;/repository&gt;</span><br />    <span style="color: #007000;">&lt;/repositories&gt;</span><br /><br /><span style="color: #007000;">&lt;/project&gt;</span><br /></pre></div><div><br /></div><div><br /></div><div>You will have another thing to do. Since you cannot include jar files directly but you have to specify them as depedencies, you can:</div><div><ul><li>refer to the jar provided by maven android deployer</li><li>have a dependency pointing a local repo, as described <a href="http://stackoverflow.com/questions/364114/can-i-add-jars-to-maven-2-build-classpath-without-installing-them">here</a></li></ul><div><br /></div></div><div>I chose the second approach.<br /><br />As you can see in the lower part of the pom file, I add a local repository.<br />You need to put the jar file in that repository. As suggested by the stackoverflow answer, you can let maven build it for you with<br /><!-- HTML generated using hilite.me --><br /><div style="background: #ffffff; background: white; border-width: .1em .1em .1em .8em; border: solid gray; color: black; overflow: auto; padding: .2em .6em; width: auto;"><pre style="line-height: 125%; margin: 0;">mvn install:install-file -DlocalRepositoryPath=repo -DcreateChecksum=true -Dpackaging=jar -Dfile=libs/android-support-v7-gridlayout.jar -DgroupId=com.grid -DartifactId=gridlayout -Dversion=1.0<br /></pre></div><br /><h3>Step 2: Including the apklib to your project</h3><br />Now you have your apklib ready to use. You can add it as a dependency in the pom.xml of your app<br /><br /><!-- HTML generated using hilite.me --><br /><div style="background: #ffffff; background: white; border-width: .1em .1em .1em .8em; border: solid gray; color: black; overflow: auto; padding: .2em .6em; width: auto;"><pre style="line-height: 125%; margin: 0;">       <span style="color: #007000;">&lt;dependency&gt;</span><br />          <span style="color: #007000;">&lt;groupId&gt;</span>com.support.gridlayout<span style="color: #007000;">&lt;/groupId&gt;</span><br />          <span style="color: #007000;">&lt;artifactId&gt;</span>gridlayout_compat<span style="color: #007000;">&lt;/artifactId&gt;</span><br />          <span style="color: #007000;">&lt;version&gt;</span>1.0.0-SNAPSHOT<span style="color: #007000;">&lt;/version&gt;</span><br />          <span style="color: #007000;">&lt;type&gt;</span>apklib<span style="color: #007000;">&lt;/type&gt;</span><br />        <span style="color: #007000;">&lt;/dependency&gt;</span><br /></pre></div><br /><br /><br />This costed me a couple of sleepless nights figuring out why it was not working&#8230;<br /><br /><h3>Edit:</h3><div>As markus pointed out in his comment, I forgot the last trivial step which is to run</div><div><i>mvn install&nbsp;</i><br /><i><br /></i><i><br /></i><i><br /></i><i><br /></i></div><h4>Epilogue:</h4><div>Please read the README file included in the gridlayout support library BEFORE trying to use it. It will save you a bit of extra headache.</div><div><br /></div><br />If you liked this post, you might be interested in following me on twitter <a href="https://twitter.com/fedepaol">@fedepaol</a><br /><br /><br /><br /></div><div><br /></div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Markus</div>
<div class='content'>
Last Step is mvn install.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellij, Robolectric and Android]]></title>
    <link href="http://fedepaol.github.io/blog/2012/07/23/intellij-robolectric-and-android/"/>
    <updated>2012-07-23T00:00:00+02:00</updated>
    <id>http://fedepaol.github.io/blog/2012/07/23/intellij-robolectric-and-android</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br />I have been curious about intellij since droicon uk 2011, where I noticed that some of the speakers were using IntelliJ instead of eclipse.<br /><br />A <a href="https://plus.google.com/115995639636688350464/posts/CgPZkFGvbm3">post</a> from Richard Hyndman, who is a developer advocate from Google, was the final straw that pushed me to download IntelliJ and give it a try.<br /><br />The first thing an eclipse user will notice in intellij is how slick and fast compares to the behemoth which is eclipse. On the other hand, an you can feel a bit disoriented at first.<br /><br /><br />Setting up a new android project using IntelliJ is pretty straightforward. You can follow the nice tutorial from jetbrains website http://wiki.jetbrains.net/intellij/Android.<br />For this reason, I will not write about how to set up an Android project in intellij here.<br /><br /><br />What I am going to write about is how to setup an <b>android project with intellij and integrate robolectric</b> with it.<br /><br />I really like robolectric. It makes unit testing for android a lot faster as it would be on the emulator. What&#8217;s more, you can use mockito with it.<br />Mockito is a mocking framework that makes a lot easier to mock your java objects.<br />Mockito does not work with dalvik jvm, but robolectric makes your tests run on your pc&#8217;s jvm.<br /><br /><br />Despite robolectric provides instruction on how to setup an intellij project manually, I have tried that process a lot of times, carefully checking if I was missing a step.<br />However, I did not manage to get it working. The guys from Pivotal provide also an intellij starter project, which you can configure to point a git repository https://github.com/pivotal/AndroidIntelliJStarter<br /><br /><br />However, I was not either satisfied with this solution and, inspired by this <a href="https://groups.google.com/forum/?fromgroups#!topic/robolectric/QN6dskFjrHc">post</a>&nbsp;,&nbsp;I tried to setup a maven solution and to import it in intellij afterwards.<br /><br />This provides another great benefit, which is the fact that I can import the same project in my linux netbook without bothering for relative paths in eclipse projects.<br /><br />So, here are the steps I had to follow in order to get it working:<br /><br />- Install the android sdk. This is trivial, I assume you are comfortable with that<br />- Let the ANDROID_HOME environment variable point the path where you uncompressed the android sdk<br />- You need to have at least one version of the sdk installed, so if you haven&#8217;t yet, you should launch the sdk manager that is the &#8220;android&#8221; executable on ANDROID_HOME/tools/android. Install also the extras, such as the compatibility library, admob stuff and all the libraries you find at the bottom<br /><br /><br />- install the maven android sdk deployer you can find at <a href="https://github.com/mosabua/maven-android-sdk-deployer">https://github.com/mosabua/maven-android-sdk-deployer </a>and then install it.<br /><br />I read somewhere that you can get android jar without relying on it, but in any case, if you need google maps or other private apis like that you still need to use this tool.<br />&nbsp;I use the latest (almost) version which is 4.0.3, so I run mvn install -P 4.0.3<br /><br /><br />- Install maven android plugin. The easiest way is to use android archetypes from here:<br />https://github.com/akquinet/android-archetypes<br /><br /><br />Finally, you are now ready to generate your first maven android project:<br /><br /><br /><br /><br /><br />mvn archetype:generate \<br />&nbsp; -DarchetypeArtifactId=android-quickstart \<br />&nbsp; -DarchetypeGroupId=de.akquinet.android.archetypes \<br />&nbsp; -DarchetypeVersion=1.0.8 \<br />&nbsp; -DgroupId=your.company \<br />&nbsp; -DartifactId=my-android-application<br /><br /><br /><br />You <i>could</i> find an issue. &nbsp;Recently the tree of the android sdk folders has been slightly changed. Maven android plugin expects them to be in the updated version (I don&#8217;t remember what the differences where). However, if maven complains it cannot find android related stuff, and your sdk has been installed for some time, a good option would be to remove the sdk and reinstall it from scratch (at least the part you download with the sdk manager).<br /><br /><br /><br />At this point, you have a working maven project, which you could already open with intellij. What is still missing is the robolectric dependencies.<br />Nothing more easy, all you have to do is to add<br /><br /><br /><br /><br /><script src="https://gist.github.com/3165830.js?file=aaa.xml"></script> right below android dependencies.  You should also create the test folder, under <i>src/test/your/package/ </i><br /><br />Now, a problem I had was that I had to change the pointer of the repository in order to have robolectric 1.2 working.<br /><div><br /></div><div><br /></div><div><br /></div><br /><script src="https://gist.github.com/3165854.js?file=bbb.xml"></script><br /><br /><br /><br /><br />At this point, you should be able to open the pom.xml with intellij.<br /><br /><br />Now, to have robolectric working from intellij, you still need to make a couple of changes:<br />- the order of include of jars does not respect the one you specified. What&#8217;s more, you will likely to get the STUB! error because android jar is included before junit and robolectric.<br />All you need to do is to move the android jar below junit and robolectric<br /><br />- you need to manually specify the javadocs for android. You do this by highlighting android jar, pressing the little edit in the lower left corner.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-Cix5eHOX7ik/UA2uDjBWp2I/AAAAAAAAHso/ctXgbFyx8Tg/s1600/intellij1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="200" src="http://3.bp.blogspot.com/-Cix5eHOX7ik/UA2uDjBWp2I/AAAAAAAAHso/ctXgbFyx8Tg/s320/intellij1.png" width="320" /></a></div><br /><br /><br />and pressing the plus sign. Then you choose &#8220;Attach files or directories&#8221;, point the path related to your android docs,<br />which is /docs/references under your ANDROID_HOME. Finally, you declare that it&#8217;s related to javadoc.<br /><br /><br /><br /><br />Now you are _almost_ ready to start. You made all this mess because you want to have robolectric working with intellij.<br /><br />You need to create, right under src/ folder, the following path:<br /><i>src/test/java/ YOUR_PACKAGE&nbsp;</i><br /><i><br /></i><br />where you are going to include your unit tests, and you are done!<br /><br /><br />If you liked this post, please consider following me @fedepaol .<br /><br /><br /><br /><br /><div><br /></div><br /><div><br /></div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Federico Paolinelli</div>
<div class='content'>
I added here https://dl.dropbox.com/u/3092639/pom.xml a working pom.xml I am currently using. I just tried to mvn clean install from a clean checkout and it looks to be finding robolectric. I hope you are missing something which you can correct using this example. Ping me if you can&#39;t</div>
</div>
<div class='comment'>
<div class='author'>Christopher Perry</div>
<div class='content'>
I added the sonatype repository stuff, and it&#39;s not finding robolectric. Not sure why.</div>
</div>
<div class='comment'>
<div class='author'>Christopher Perry</div>
<div class='content'>
This comment has been removed by the author.</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
